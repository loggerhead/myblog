<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>loggerhead's blog</title><link href="https://loggerhead.me/" rel="alternate"></link><link href="https://loggerhead.me/atom.xml" rel="self"></link><id>https://loggerhead.me/</id><updated>2016-12-06T21:00:00+08:00</updated><entry><title>Shadowsocks 源码分析——协议与结构</title><link href="https://loggerhead.me/posts/shadowsocks-yuan-ma-fen-xi-xie-yi-yu-jie-gou.html" rel="alternate"></link><published>2016-12-06T21:00:00+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2016-12-06:posts/shadowsocks-yuan-ma-fen-xi-xie-yi-yu-jie-gou.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/shadowsocks/shadowsocks/tree/master"&gt;Shadowsocks&lt;/a&gt; 是一款著名的 SOCKS5 代理工具，深受人民群众喜爱。它的源码工程质量很高，十分便于研究。不过当你真正开始读源码的时候，会有一种似懂非懂的感觉，因为虽然它的大体框架容易理解，但是其中的诸多细节却不是那么简单明了。&lt;/p&gt;
&lt;p&gt;本文将基于 &lt;a href="https://github.com/loggerhead/shadowsocks/tree/8e8ee5d490ce319b8db9b61001dac51a7da4be63"&gt;2.9.0 版本的源码&lt;/a&gt;对 shadowsocks 进行分析，希望读者看完以后能对 shadowsocks 的原理有个大体上的认识。为了行文简洁，在示例中我们用 ss 指代 shadowsocks。&lt;/p&gt;


&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#socks5"&gt;SOCKS5 协议&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;握手阶段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;建立连接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;传输阶段&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;整体结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;事件处理&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#eventlooppy"&gt;eventloop.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tcprelaypy"&gt;tcprelay.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#udprelaypy"&gt;udprelay.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#asyncdnspy"&gt;asyncdns.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="socks5"&gt;SOCKS5 协议&lt;/h1&gt;
&lt;p&gt;无论是实现什么网络应用，首当其冲的就是确定通讯协议。SOCKS5 协议作为一个同时支持 TCP 和 UDP 的应用层协议（&lt;a href="https://www.ietf.org/rfc/rfc1928.txt"&gt;RFC&lt;/a&gt; 只有短短的 7 页），因为其简单易用的特性而被 shadowsocks 青睐。我们先从 SOCKS5 协议入手，一点一点剖析 shadowsocks。&lt;/p&gt;
&lt;h2 id="_1"&gt;握手阶段&lt;/h2&gt;
&lt;p&gt;客户端和服务器在握手阶段协商认证方式，比如：是否采用用户名/密码的方式进行认证，或者不采用任何认证方式。&lt;/p&gt;
&lt;p&gt;客户端发送给服务器的消息格式如下（数字表示对应字段占用的字节数）：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+----+----------+----------+
|VER | NMETHODS | METHODS  |
+----+----------+----------+
| 1  |    1     |  1~255   |
+----+----------+----------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VER&lt;/code&gt; 字段是当前协议的版本号，也就是 &lt;code&gt;5&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NMETHODS&lt;/code&gt; 字段是 &lt;code&gt;METHODS&lt;/code&gt; 字段占用的字节数；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;METHODS&lt;/code&gt; 字段的每一个字节表示一种认证方式，表示客户端支持的全部认证方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器在收到客户端的协商请求后，会检查是否有服务器支持的认证方式，并返回客户端如下格式的消息：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+----+--------+
|VER | METHOD |
+----+--------+
| 1  |   1    |
+----+--------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;对于 shadowsocks 而言，返回给客户端的值只有两种可能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0x05 0x00&lt;/code&gt;：告诉客户端采用无认证的方式建立连接；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x05 0xff&lt;/code&gt;：客户端的任意一种认证方式服务器都不支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个例子，就 shadowsocks 而言，最简单的握手可能是这样的：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client -&amp;gt; ss: 0x05 0x01 0x00
ss -&amp;gt; client: 0x05 0x00
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;如果客户端 &lt;strong&gt;还支持&lt;/strong&gt; 用户名/密码的认证方式，那么握手会是这样子：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client -&amp;gt; ss: 0x05 0x02 0x00 0x02
ss -&amp;gt; client: 0x05 0x00
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;如果客户端 &lt;strong&gt;只支持&lt;/strong&gt; 用户名/密码的认证方式，那么握手会是这样子：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client -&amp;gt; ss: 0x05 0x01 0x02
ss -&amp;gt; client: 0x05 0xff
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_2"&gt;建立连接&lt;/h2&gt;
&lt;p&gt;完成握手后，客户端会向服务器发起请求，请求的格式如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+----+-----+-------+------+----------+----------+
|VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |
+----+-----+-------+------+----------+----------+
| 1  |  1  |   1   |  1   | Variable |    2     |
+----+-----+-------+------+----------+----------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMD&lt;/code&gt; 字段：&lt;code&gt;command&lt;/code&gt; 的缩写，shadowsocks 只用到了：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0x01&lt;/code&gt;：建立 TCP 连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x03&lt;/code&gt;：关联 UDP 请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RSV&lt;/code&gt; 字段：保留字段，值为 &lt;code&gt;0x00&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ATYP&lt;/code&gt; 字段：&lt;code&gt;address type&lt;/code&gt; 的缩写，取值为：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0x01&lt;/code&gt;：IPv4&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x03&lt;/code&gt;：域名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x04&lt;/code&gt;：IPv6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DST.ADDR&lt;/code&gt; 字段：&lt;code&gt;destination address&lt;/code&gt; 的缩写，取值随 &lt;code&gt;ATYP&lt;/code&gt; 变化：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ATYP == 0x01&lt;/code&gt;：4 个字节的 IPv4 地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ATYP == 0x03&lt;/code&gt;：1 个字节表示域名长度，紧随其后的是对应的域名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ATYP == 0x04&lt;/code&gt;：16 个字节的 IPv6 地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DST.PORT&lt;/code&gt; 字段：目的服务器的端口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在收到客户端的请求后，服务器会返回如下格式的消息：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+----+-----+-------+------+----------+----------+
|VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |
+----+-----+-------+------+----------+----------+
| 1  |  1  |   1   |  1   | Variable |    2     |
+----+-----+-------+------+----------+----------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;REP&lt;/code&gt; 字段：用以告知客户端请求处理情况。在请求处理成功的情况下，shadowsocks 将这个字段的值设为 &lt;code&gt;0x00&lt;/code&gt;，否则，shadowsocks 会直接断开连接；&lt;/li&gt;
&lt;li&gt;其它字段和请求中字段的取值类型一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例来说，如果客户端通过 shadowsocks 代理 &lt;code&gt;127.0.0.1:8000&lt;/code&gt; 的请求，那么客户端和 shadowsocks 之间的请求和响应是这样的：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#    request: VER  CMD  RSV  ATYP DST.ADDR            DST.PORT &lt;/span&gt;
client -&amp;gt; ss: 0x05 0x01 0x00 0x01 0x7f 0x00 0x00 0x01 0x1f 0x40
&lt;span class="c1"&gt;#   response: VER  REP  RSV  ATYP BND.ADDR            BND.PORT&lt;/span&gt;
ss -&amp;gt; client: 0x05 0x00 0x00 0x01 0x00 0x00 0x00 0x00 0x10 0x10
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这里 &lt;code&gt;0x7f 0x00 0x00 0x01 0x1f 0x40&lt;/code&gt; 对应的是 &lt;code&gt;127.0.0.1:8000&lt;/code&gt;。需要注意的是，当请求中的 &lt;code&gt;CMD == 0x01&lt;/code&gt; 时，绝大部分 SOCKS5 客户端的实现都会忽略 SOCKS5 服务器返回的 &lt;code&gt;BND.ADDR&lt;/code&gt; 和 &lt;code&gt;BND.PORT&lt;/code&gt; 字段，所以这里的 &lt;code&gt;0x00 0x00 0x00 0x00 0x10 0x10&lt;/code&gt; 只是 shadowsocks 返回的一个无意义的地址和端口&lt;sup id="fnref:bnd.addr"&gt;&lt;a class="footnote-ref" href="#fn:bnd.addr" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2 id="_3"&gt;传输阶段&lt;/h2&gt;
&lt;p&gt;SOCKS5 协议只负责建立连接，在完成握手阶段和建立连接之后，SOCKS5 服务器就只做简单的转发了。假如客户端通过 shadowsocks 代理 &lt;code&gt;google.com:80&lt;/code&gt;（用 &lt;code&gt;remote&lt;/code&gt; 表示），那么整个过程如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="socks example" src="https://dn-loggerhead.qbox.me/socks5-example.svg" /&gt;&lt;/p&gt;
&lt;p&gt;整个过程中发生的传输可能是这样的：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 握手阶段&lt;/span&gt;
client -&amp;gt; ss: 0x05 0x01 0x00
ss -&amp;gt; client: 0x05 0x00
&lt;span class="c1"&gt;# 建立连接&lt;/span&gt;
client -&amp;gt; ss: 0x05 0x01 0x00 0x03 0x0a b&lt;span class="s1"&gt;&amp;#39;google.com&amp;#39;&lt;/span&gt;  0x00 0x50
ss -&amp;gt; client: 0x05 0x00 0x00 0x01 0x00 0x00 0x00 0x00 0x10 0x10
&lt;span class="c1"&gt;# 传输阶段&lt;/span&gt;
client -&amp;gt; ss -&amp;gt; remote
remote -&amp;gt; ss -&amp;gt; client
...
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;b'google.com'&lt;/code&gt; 表示 &lt;code&gt;google.com&lt;/code&gt; 对应的 ASCII 码。 &lt;/p&gt;
&lt;h1 id="_4"&gt;整体结构&lt;/h1&gt;
&lt;p&gt;在进一步了解 shadowsocks 的内部构造之前，我们粗略的看一下各个模块分别做了些什么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tcprelay.py&lt;/code&gt;：核心部分，整个 SOCKS5 协议的实现都在这里。负责 TCP 代理的实现；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;udprelay.py&lt;/code&gt;：负责 UDP 代理的实现；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asyncdns.py&lt;/code&gt;：实现了简单的异步 DNS 查询；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eventloop.py&lt;/code&gt;：封装了三种常见的 IO 复用函数——&lt;code&gt;epoll&lt;/code&gt;、&lt;code&gt;kqueue&lt;/code&gt; 和 &lt;code&gt;select&lt;/code&gt;，提供统一的接口；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;encrypt.py&lt;/code&gt;：提供统一的加密解密接口；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;crypto&lt;/code&gt;：封装了多种加密库的调用，包括 OpenSSL 和 libsodium；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;daemon.py&lt;/code&gt;：用于实现守护进程；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shell.py&lt;/code&gt;：读取命令行参数，检查配置；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;common.py&lt;/code&gt;：提供一些工具函数，比如：将 &lt;code&gt;bytes&lt;/code&gt; 转换成 &lt;code&gt;str&lt;/code&gt;、解析 SOCKS5 请求；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lru_cache.py&lt;/code&gt;：实现了 &lt;a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_Recently_Used_.28LRU.29"&gt;LRU 缓存&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;local.py&lt;/code&gt;：shadowsocks 客户端（即 &lt;code&gt;sslocal&lt;/code&gt; 命令）的入口；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;server.py&lt;/code&gt;：shadowsocks 服务器（即 &lt;code&gt;ssserver&lt;/code&gt; 命令）的入口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sslocal 和 ssserver 复用了绝大部分的代码，所以两者的运行流程都可以用伪代码表示为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# local.py or server.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# 解析命令行和配置文件中的参数&lt;/span&gt;
    &lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# 根据配置决定要不要以守护进程的方式运行&lt;/span&gt;
    &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;daemonize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eventloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tcp_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tcprelay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;udp_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;udprelay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dns_resolver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncdns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# 将 TCPRelay、UDPRelay 和 DNSResolver 注册到事件循环中&lt;/span&gt;
    &lt;span class="n"&gt;tcp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_to_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;udp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_to_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dns_resolver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_to_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# eventloop.py 中 loop.run 的实现&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;loop_run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wait_for_events&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# handler 是 TCPRelay、UDPRelay 或 DNSResolver&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;有一点需要提一下：&lt;strong&gt;代理和能翻墙的代理是不一样的&lt;/strong&gt;。比如，下图是普通的 SOCKS5 代理：&lt;/p&gt;
&lt;p&gt;&lt;img alt="normal-proxy" src="https://dn-loggerhead.qbox.me/normal-proxy.svg" /&gt;&lt;/p&gt;
&lt;p&gt;而能翻墙的 SOCKS5 代理是下图这种结构：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ss-proxy" src="https://dn-loggerhead.qbox.me/ss-proxy.svg" /&gt;&lt;/p&gt;
&lt;p&gt;可以看出来，SOCKS5 服务器的实现被拆分成了两部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sslocal 负责与 SOCKS5 客户端进行 SOCKS5 协议相关的通讯（握手并建立连接），在建立连接后将 SOCKS5 客户端发来的数据加密并发送给 ssserver；&lt;/li&gt;
&lt;li&gt;ssserver 起到一个中继的作用，负责解密以后将数据转发给目标服务器，并不涉及 SOCKS5 协议的任何一部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中一个重要的环节就是加密解密——数据经过 sslocal（本机）加密以后转发给 ssserver（VPS），这也是普通代理和能翻墙的代理的区别。在了解到这一点以后，shadowsocks 的很多细节就容易理解了。下面我们分模块，对 shadowsocks 内部结构一探究竟。&lt;/p&gt;
&lt;h1 id="_5"&gt;事件处理&lt;/h1&gt;
&lt;p&gt;Shadowsocks 封装了三种常见的 IO 复用函数——&lt;code&gt;epoll&lt;/code&gt;、&lt;code&gt;kqueue&lt;/code&gt; 和 &lt;code&gt;select&lt;/code&gt;，并通过 &lt;code&gt;eventloop.py&lt;/code&gt; 提供统一的接口。之所以使用 IO 复用，而不是多线程的方式，是因为前者能提供更好的性能和更少的内存开销，这在路由器上至关重要&lt;sup id="fnref:router-problem"&gt;&lt;a class="footnote-ref" href="#fn:router-problem" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2 id="eventlooppy"&gt;eventloop.py&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;eventloop.py&lt;/code&gt; 的主要逻辑在于 &lt;code&gt;run&lt;/code&gt; 函数的实现：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_stopping&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# as soon as possible&lt;/span&gt;
        &lt;span class="n"&gt;asap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="c1"&gt;# 获取事件&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TIMEOUT_PRECISION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;OSError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;errno_from_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EINTR&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c1"&gt;# EPIPE: Happens when the client closes the connection&lt;/span&gt;
                &lt;span class="c1"&gt;# EINTR: Happens when received a signal&lt;/span&gt;
                &lt;span class="c1"&gt;# handles them as soon as possible&lt;/span&gt;
                &lt;span class="n"&gt;asap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
                &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;poll:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;poll:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;
                &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_exc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="c1"&gt;# 找到事件对应的 handler，将事件交由它处理&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# 通过 fd 找到对应的 handler&lt;/span&gt;
            &lt;span class="c1"&gt;# 一个 handler 可能对应多个 fd（reactor 模式）&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fdmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;# handler 可能是 TCPRelay、UDPRelay 或 DNSResolver&lt;/span&gt;
                    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;OSError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 计时器。每隔 10s 调用注册的 handle_periodic 函数&lt;/span&gt;
        &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;asap&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_last_time&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;TIMEOUT_PRECISION&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_callbacks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_last_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;run&lt;/code&gt; 是一个典型的事件循环，它会阻塞在第 8 行等待注册事件的发生，然后通过事件对应的文件描述符 &lt;code&gt;fd&lt;/code&gt; 找到 &lt;code&gt;handler&lt;/code&gt;，调用 &lt;code&gt;handler.handle_event(sock, fd, event)&lt;/code&gt; 来将事件交由 &lt;code&gt;handler&lt;/code&gt; 处理，同时每隔 10 秒调用 &lt;code&gt;TCPRelay&lt;/code&gt;、&lt;code&gt;UDPRelay&lt;/code&gt; 或 &lt;code&gt;DNSResolver&lt;/code&gt; 的 &lt;code&gt;handle_periodic&lt;/code&gt; 函数处理超时或清除缓存。&lt;/p&gt;
&lt;p&gt;比如：如果客户端连接到 sslocal，第 8 行会返回可读事件，第 30 行会调用 &lt;code&gt;TCPRelay&lt;/code&gt; 的 &lt;code&gt;handle_event&lt;/code&gt; 来处理，&lt;code&gt;handle_event&lt;/code&gt; 发现这是一个可读事件，会调用 &lt;code&gt;accept&lt;/code&gt; 建立新连接。&lt;/p&gt;
&lt;h2 id="tcprelaypy"&gt;tcprelay.py&lt;/h2&gt;
&lt;p&gt;Shadowsocks 采用了反应器模式（&lt;a href="https://en.wikipedia.org/wiki/Reactor_pattern"&gt;reactor pattern&lt;/a&gt;）。以下图为例：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ss-reactor-pattern" src="https://dn-loggerhead.qbox.me/ss-reactor-pattern.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TCPRelayHandler&lt;/code&gt; 的事件会由 &lt;code&gt;EventLoop&lt;/code&gt; 分发给 &lt;code&gt;TCPRelay&lt;/code&gt;，再经由 &lt;code&gt;TCPRelay&lt;/code&gt; 将事件分发给相应的 &lt;code&gt;TCPRelayHandler&lt;/code&gt; 处理。这个过程发生在 &lt;code&gt;EventLoop&lt;/code&gt; 和 &lt;code&gt;TCPRelay&lt;/code&gt; 的 &lt;code&gt;handle_event&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;我们去掉其中的日志处理和错误处理逻辑，看看 &lt;code&gt;handle_event&lt;/code&gt; 函数：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# 如果是 TCPRelay 的 socket&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_server_socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_server_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;TCPRelayHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fd_to_handlers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_eventloop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_dns_resolver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_is_local&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# 找到 fd 对应的 TCPRelayHandler&lt;/span&gt;
        &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fd_to_handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;逻辑很简单，如果发生事件（可读事件）的 socket 是 &lt;code&gt;TCPRelay&lt;/code&gt; 的 socket，说明有新的 TCP 连接，创建一个 &lt;code&gt;TCPRelayHandler&lt;/code&gt; 对象将新连接封装起来。否则，找到发生事件的 &lt;code&gt;TCPRelayHandler&lt;/code&gt;，将事件交给它处理。&lt;/p&gt;
&lt;h2 id="udprelaypy"&gt;udprelay.py&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;UDPRelay&lt;/code&gt; 的 &lt;code&gt;handle_event&lt;/code&gt; 类似，不过它没有什么 &lt;code&gt;UDPRelayHandler&lt;/code&gt;，所有的逻辑都是 &lt;code&gt;UDPRelay&lt;/code&gt; 处理的，只不过不同的 socket 对应不同的函数——&lt;code&gt;_handle_server&lt;/code&gt; 和 &lt;code&gt;_handle_client&lt;/code&gt;。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 只有可读事件，所以不需要传入 event 给 `_handle_server` 或 `_handle_client`&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_server_socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# 如果有错误发生，记录日志&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;eventloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POLL_ERR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UDP server_socket err&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_server&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sockets&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;eventloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POLL_ERR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UDP client_socket err&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 需要告诉是哪个 sock 发生了事件&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="asyncdnspy"&gt;asyncdns.py&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;DNSResolver&lt;/code&gt; 的 &lt;code&gt;handle_event&lt;/code&gt; 与 &lt;code&gt;TCPRelay&lt;/code&gt; 和 &lt;code&gt;UDPRelay&lt;/code&gt; 都不一样，因为它不需要分发处理，所以逻辑更简单：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 只有可读事件&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# 防御性编程，实际上是个无用的判断&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="c1"&gt;# 如果有错误事件发生&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;eventloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POLL_ERR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dns socket err&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 从事件循环移除 self._sock&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# 重新初始化 self._sock&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_UDP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 将套接字设置为非阻塞模式&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setblocking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 重新注册到事件循环&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eventloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POLL_IN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# 读取一个 UDP 包，并取出前 1024 个字节 &lt;/span&gt;
        &lt;span class="c1"&gt;# 注意：如果一个 UDP 包超过 1024 字节，比如：2048 字节。&lt;/span&gt;
        &lt;span class="c1"&gt;# 一次 recvfrom(1024) 也会消耗整个 UDP 包。这里是认为&lt;/span&gt;
        &lt;span class="c1"&gt;# DNS 查询返回的 UDP 包都不会超过 1024 字节。&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recvfrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_servers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;received a packet other than our dns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;    
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1 id="_6"&gt;总结&lt;/h1&gt;
&lt;p&gt;本来想一篇写完的……没想到才简单的介绍一下就这么长了，之后再分两篇写 &lt;code&gt;tcprelay.py&lt;/code&gt; 和 &lt;code&gt;udprelay.py&lt;/code&gt; 的细节好了。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:bnd.addr"&gt;
&lt;p&gt;也有部分 SOCKS5 服务器的实现返回全零。&amp;#160;&lt;a class="footnote-backref" href="#fnref:bnd.addr" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:router-problem"&gt;
&lt;p&gt;因为路由器的 CPU 性能远不如 PC，内存也很少，可能只有几十 MB 可以用。&amp;#160;&lt;a class="footnote-backref" href="#fnref:router-problem" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="源码分析"></category><category term="Python"></category></entry><entry><title>逆向工程初体验</title><link href="https://loggerhead.me/posts/ni-xiang-gong-cheng-chu-ti-yan.html" rel="alternate"></link><published>2016-05-19T15:37:01+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2016-05-19:posts/ni-xiang-gong-cheng-chu-ti-yan.html</id><summary type="html">&lt;p&gt;为了读懂 &lt;a href="https://pdos.csail.mit.edu/6.828/2014/jos.git/"&gt;JOS&lt;/a&gt; 的代码，最近学了一波汇编。主要是通过粗略的过一遍 &lt;a href="http://opensecuritytraining.info/"&gt;OpenSecurityTraining.info&lt;/a&gt; 上的 &lt;a href="http://opensecuritytraining.info/IntroX86.html"&gt;Introductory Intel x86 课程&lt;/a&gt; 来了解大概，因为已经学过一次，所以只要捡起来直接看代码就行了，遇到模糊不清的地方就详细看看 &lt;a href="http://www.drpaulcarter.com/pcasm/"&gt;PC Assembly Tutorial&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Introductory Intel x86 课程上有个很有趣的逆向工程作业——拆除「炸弹」。「炸弹」是一个二进制可执行文件，由 6 个阶段和 1 个隐藏阶段组成，每个阶段都会读取用户输入，只有特定的输入才能通过这个阶段，在通过所有阶段后，炸弹就被成功拆除了。之所以说它有趣，是因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有二进制文件，所以只能通过反汇编后读 x86 汇编来拆除炸弹，难度不小&lt;/li&gt;
&lt;li&gt;每一阶段难度递增，隐藏阶段只有达到特定条件才能进入，像极了闯关游戏&lt;/li&gt;
&lt;li&gt;通过汇编考察了很常见的程序结构和数据结构，十分考验 C 语言功底&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文将一步一步介绍怎么拆除炸弹。关于炸弹的详细说明请戳：&lt;a href="http://www.cs.cmu.edu/afs/cs/academic/class/15213-s02/www/applications/labs/lab2/bomblab.html"&gt;CMU binary bomb challenge&lt;/a&gt;，下载「炸弹」请戳：&lt;a href="http://http//csapp.cs.cmu.edu/2e/bomb32.tar"&gt;bomb32.tar&lt;/a&gt;，查看答案或者帮助请戳：&lt;a href="https://github.com/loggerhead/CMU-binary-bomb-challenge"&gt;loggerhead/CMU-binary-bomb-challenge&lt;/a&gt;。&lt;/p&gt;


&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;准备工作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;第一阶段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;第二阶段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;第三阶段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;第四阶段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;第五阶段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;第六阶段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;隐藏阶段&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="_1"&gt;准备工作&lt;/h1&gt;
&lt;p&gt;既然是拆除炸弹这种专业的任务，自然需要专业的工具才能解决。不过炸弹只能运行在 Linux 系统上，而大部分的 Linux 发行版本都自带了这些工具，所以也不用自己再去特意安装啦。下面介绍一下这些工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/GNU_Debugger"&gt;gdb&lt;/a&gt;: GNU 出品的一款著名的命令行调试工具，可以用来调试包括 C/C++ 在内的一系列语言。功能十分强大，可以自定义函数，查看寄存器的值等等。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.thegeekstuff.com/2012/09/objdump-examples/"&gt;objdump&lt;/a&gt;: 用于显示可执行文件的各种信息，包括：符号表、反汇编结果等等。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.thegeekstuff.com/2010/11/strings-command-examples/"&gt;strings&lt;/a&gt;: 显示文件中包含的所有字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在着手拆除炸弹之前，我们先看一看炸弹的大致构造。为此，我们执行以下命令生成 AT&amp;amp;T 语法的汇编：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 解压&lt;/span&gt;
tar xvf bomb32.tar
&lt;span class="c1"&gt;# 反汇编&lt;/span&gt;
objdump -d bomb &amp;gt; bomb.asm
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;也可以通过以下命令生成 intel 语法的汇编：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;objdump -M intel -d bomb &amp;gt; bomb.asm
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;一般没有特别说明是 AT&amp;amp;T 语法的话，接触到的汇编都是 intel 语法的。两者只有些许不同，详情见：&lt;a href="http://www.imada.sdu.dk/Courses/DM18/Litteratur/IntelnATT.htm"&gt;Intel and AT&amp;amp;T Syntax&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;现在拿起我们的炸弹瞧一瞧。容易发现有一些库函数，比如：&lt;code&gt;fprintf&lt;/code&gt;、&lt;code&gt;fgets&lt;/code&gt;、&lt;code&gt;printf&lt;/code&gt;；一些名字怪异，很有可能是编译器自动生成的函数；再往下翻翻就找到了 &lt;code&gt;main&lt;/code&gt; 函数，随便一扫，开头这堆汇编看不太出来是做什么的，但是很快我们看到一个熟悉的身影：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 80489e1:   e8 9a fe ff ff          call   8048880 &amp;lt;fopen@plt&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;fopen&lt;/code&gt; 应该是从文件读取输入，再看到：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 80489bd:   83 f8 01                cmp    $0x1,%eax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;应该是判断命令行参数个数是不是等于 1。如果你有好好看一下炸弹的 &lt;a href="http://www.cs.cmu.edu/afs/cs/academic/class/15213-s02/www/applications/labs/lab2/bomblab.html"&gt;详细说明&lt;/a&gt;，那么应该注意到下面这段话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The bomb ignores blank input lines. If you run the bomb with a command line argument such as &lt;em&gt;psol.txt&lt;/em&gt;, it will read the input lines from &lt;em&gt;psol.txt&lt;/em&gt; until it reaches EOF, and then switch over to&lt;em&gt;stdin&lt;/em&gt;. In a moment of weakness, Dr. Evil added this feature so you don't have to keep retyping the solutions to phases you have already defused.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以我们猜测这段代码是用来从文件读取输入的。继续往下翻，发现有好几个结构类似的片段：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048a52:   e8 a5 07 00 00          call   80491fc &amp;lt;read_line&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048a57:   83 c4 f4                add    $0xfffffff4,%esp&lt;/span&gt;
&lt;span class="x"&gt; 8048a5a:   50                      push   %eax&lt;/span&gt;
&lt;span class="x"&gt; 8048a5b:   e8 c0 00 00 00          call   8048b20 &amp;lt;phase_1&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048a60:   e8 c7 0a 00 00          call   804952c &amp;lt;phase_defused&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;用 C 表示就是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_line&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;phase_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;phase_defused&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这三行代码到底做了些什么，我们暂时不清楚，不过对 &lt;code&gt;main&lt;/code&gt; 一番扫视让我们了解到炸弹大概类似于：&lt;/p&gt;
&lt;p&gt;&lt;img alt="bomb_main.jpg" src="https://dn-loggerhead.qbox.me/images/bomb_main.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;只有 6 次正确的输入才能解除炸弹，否则就会……&lt;/p&gt;
&lt;p&gt;&lt;img alt="bomb_exploded.jpg" src="https://dn-loggerhead.qbox.me/images/bomb_exploded.jpg" /&gt;&lt;/p&gt;
&lt;h1 id="_2"&gt;第一阶段&lt;/h1&gt;
&lt;p&gt;我们看到 &lt;code&gt;phase_1&lt;/code&gt; 函数，结构比较简单，关键在于下面这几行在做什么：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048b32:   e8 f9 04 00 00          call   8049030 &amp;lt;strings_not_equal&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048b37:   83 c4 10                add    $0x10,%esp&lt;/span&gt;
&lt;span class="x"&gt; 8048b3a:   85 c0                   test   %eax,%eax&lt;/span&gt;
&lt;span class="x"&gt; 8048b3c:   74 05                   je     8048b43 &amp;lt;phase_1+0x23&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048b3e:   e8 b9 09 00 00          call   80494fc &amp;lt;explode_bomb&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;从函数名字来看，似乎是比较两个字符串是否相等，然后根据结果决定要不要引爆炸弹。随便尝试几次，发现结果都是爆炸，所以这部分的逻辑很可能是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strings_not_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CONST_STRING&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;按照惯例，函数的输出会保存在 &lt;code&gt;eax&lt;/code&gt; 寄存器中。那么 &lt;code&gt;8048b3a&lt;/code&gt; 和 &lt;code&gt;8048b3c&lt;/code&gt; 两行的作用就很明显了，根据 &lt;code&gt;test %eax, %eax&lt;/code&gt; 的结果决定跳转到 &lt;code&gt;8048b43&lt;/code&gt;，还是运行 &lt;code&gt;8048b3e&lt;/code&gt; 的指令。通过 Google &lt;code&gt;80386 test&lt;/code&gt; 很容易就能找到 &lt;code&gt;test&lt;/code&gt; 指令的作用，&lt;code&gt;test&lt;/code&gt; 和 &lt;code&gt;je&lt;/code&gt; 两行结合起来正好就是上述的 &lt;code&gt;if&lt;/code&gt;。所以解除第一阶段的问题就简化成了：让 &lt;code&gt;line&lt;/code&gt; 和 &lt;code&gt;CONST_STRING&lt;/code&gt; 相等。为了搞明白这两个参数来自哪里，我们往上看，注意到两个疑似传参的 &lt;code&gt;push&lt;/code&gt; 指令：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048b2c:   68 c0 97 04 08          push   $0x80497c0&lt;/span&gt;
&lt;span class="x"&gt; 8048b31:   50                      push   %eax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;0x80497c0&lt;/code&gt; 看着像是字符串常量 &lt;code&gt;CONST_STRING&lt;/code&gt; 的地址，&lt;code&gt;eax&lt;/code&gt; 寄存器估计是存放了输入字符串的地址。另外，根据传参的原则——最先 &lt;code&gt;push&lt;/code&gt; 的是最右边的参数，而且两个参数正好对应两次 &lt;code&gt;push&lt;/code&gt;，这也进一步肯定了我们的想法。&lt;/p&gt;
&lt;p&gt;接下来我们通过 gdb 来验证一下。依次输入以下 gdb 命令，运行到 &lt;code&gt;8048b32&lt;/code&gt; 这一行：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;b *0x8048b32
r
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;我们尝试打印一下 &lt;code&gt;0x80497c0&lt;/code&gt; 和 &lt;code&gt;eax&lt;/code&gt; 指向的字符串：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;x/s 0x80497c0&lt;/span&gt;
&lt;span class="x"&gt;x/s &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;eax&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;发现输出和我们预料的一样，&lt;code&gt;0x80497c0&lt;/code&gt; 果然存放了字符串的地址，其指向的字符串是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Public speaking is very easy.
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;eax&lt;/code&gt; 也和我们的输入一模一样。我们再试试把输入换成上述字符串，看能不能解除第一阶段。成功！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Phase 1 defused. How about the next one?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="_3"&gt;第二阶段&lt;/h1&gt;
&lt;p&gt;不管你解除第一阶段时心情是怎样的，反正我是异常兴奋的。第一阶段主要考察函数的调用过程，第二阶段就不只是这么简单咯。简洁起见，接下来不会再对基本的汇编知识进行详细解释了，如果还不太熟悉，可以按之前说的去掌握汇编的基础知识。&lt;/p&gt;
&lt;p&gt;粗略的看一眼代码，发现 &lt;code&gt;phase_2&lt;/code&gt; 有三个条件跳转，和一个新函数 &lt;code&gt;read_six_numbers&lt;/code&gt;。一下子看不出来什么，再用命令 &lt;code&gt;strings bomb&lt;/code&gt; 看看有些什么字符串，虽然不能直接找到答案，但是我们可以看到一串熟悉的字符串——&lt;code&gt;%d %d %d %d %d %d&lt;/code&gt;，再根据 &lt;code&gt;read_six_numbers&lt;/code&gt; 的函数名，可以猜测 &lt;code&gt;read_six_numbers&lt;/code&gt; 把读入的一行输入转换成了 6 个数字。我们把断点设在 &lt;code&gt;8048b5b&lt;/code&gt;，发现疑似参数的寄存器 &lt;code&gt;edx&lt;/code&gt; 的值就是我们的输入，而 &lt;code&gt;eax&lt;/code&gt; 的值似乎没有规律，再通过 &lt;code&gt;p/x $eax&lt;/code&gt; 查看一下 &lt;code&gt;eax&lt;/code&gt; 中存放的十六进制值，也没有什么规律。&lt;/p&gt;
&lt;p&gt;先不管这么多，通过命令 &lt;code&gt;ni&lt;/code&gt; 接着往下调试，遇到第一个条件跳转：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048b63:   83 7d e8 01             cmpl   $0x1,-0x18(%ebp)&lt;/span&gt;
&lt;span class="x"&gt; 8048b67:   74 05                   je     8048b6e &amp;lt;phase_2+0x26&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048b69:   e8 8e 09 00 00          call   80494fc &amp;lt;explode_bomb&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这里的逻辑可以表示为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;0x18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mh"&gt;0x1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;我们通过 &lt;code&gt;x/x $ebp-0x18&lt;/code&gt; 看看地址 &lt;code&gt;$ebp-0x18&lt;/code&gt; 处存放的值，发现正好和我们输入的第一个数字是一样的，这一点可以通过多次输入不同的值来验证。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048b6e:   bb 01 00 00 00          mov    $0x1,%ebx&lt;/span&gt;
&lt;span class="x"&gt; 8048b73:   8d 75 e8                lea    -0x18(%ebp),%esi&lt;/span&gt;
&lt;span class="x"&gt; 8048b76:   8d 43 01                lea    0x1(%ebx),%eax&lt;/span&gt;
&lt;span class="x"&gt; 8048b79:   0f af 44 9e fc          imul   -0x4(%esi,%ebx,4),%eax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;翻译成 C 就是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// 第一个数字的地址&lt;/span&gt;
&lt;span class="n"&gt;esi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x18&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ebx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;0x4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;esi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;之前提到 &lt;code&gt;read_six_numbers&lt;/code&gt; 把输入的字符串转换成了 6 个数字，但是这 6 个数字是以什么样的方式存储呢？返回值又是什么？如果熟悉 C 语言，很快就能想到一种实现：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;read_six_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;sscanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%d %d %d %d %d %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;再对照着上面的翻译和 &lt;code&gt;ebp - 0x18&lt;/code&gt;所指向的数字，不难发现 &lt;code&gt;8048b6e&lt;/code&gt; 到 &lt;code&gt;8048b79&lt;/code&gt; 这 4 行代码实际上是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// ebx&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;esi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// int 占 4 个字节&lt;/span&gt;
&lt;span class="c1"&gt;// eax *= *(esi + (ebx-1)*4)&lt;/span&gt;
&lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;看到这两行跳转：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048b7e:   39 04 9e                cmp    %eax,(%esi,%ebx,4)&lt;/span&gt;
&lt;span class="x"&gt; 8048b81:   74 05                   je     8048b88 &amp;lt;phase_2+0x40&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;是不是就是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;再看到接下来三行：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048b88:   43                      inc    %ebx&lt;/span&gt;
&lt;span class="x"&gt; 8048b89:   83 fb 05                cmp    $0x5,%ebx&lt;/span&gt;
&lt;span class="x"&gt; 8048b8c:   7e e8                   jle    8048b76 &amp;lt;phase_2+0x2e&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;继续我们的翻译：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="mh"&gt;0x8048b76&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;把这几行结合到一起看：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048b76:   8d 43 01                lea    0x1(%ebx),%eax&lt;/span&gt;
&lt;span class="x"&gt; 8048b79:   0f af 44 9e fc          imul   -0x4(%esi,%ebx,4),%eax&lt;/span&gt;
&lt;span class="x"&gt; 8048b7e:   39 04 9e                cmp    %eax,(%esi,%ebx,4)&lt;/span&gt;
&lt;span class="x"&gt; 8048b81:   74 05                   je     8048b88 &amp;lt;phase_2+0x40&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048b83:   e8 74 09 00 00          call   80494fc &amp;lt;explode_bomb&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048b88:   43                      inc    %ebx&lt;/span&gt;
&lt;span class="x"&gt; 8048b89:   83 fb 05                cmp    $0x5,%ebx&lt;/span&gt;
&lt;span class="x"&gt; 8048b8c:   7e e8                   jle    8048b76 &amp;lt;phase_2+0x2e&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;也就是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// go on&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;first_line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;亦即：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这下逻辑就很清晰了，翻译成人话就是：第 i 个数等于前一个数乘以 &lt;code&gt;i+1&lt;/code&gt;。所以答案就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 2 6 24 120 720&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OK，第二阶段主要考察了循环。&lt;/p&gt;
&lt;h1 id="_4"&gt;第三阶段&lt;/h1&gt;
&lt;p&gt;瞟一眼，发现有很多重复结构：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048be0:   b3 71                   mov    $0x71,%bl&lt;/span&gt;
&lt;span class="x"&gt; 8048be2:   81 7d fc 09 03 00 00    cmpl   $0x309,-0x4(%ebp)&lt;/span&gt;
&lt;span class="x"&gt; 8048be9:   0f 84 a0 00 00 00       je     8048c8f &amp;lt;phase_3+0xf7&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048bef:   e8 08 09 00 00          call   80494fc &amp;lt;explode_bomb&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;   8048bf4: e9 96 00 00 00          jmp    8048c8f &amp;lt;phase_3+0xf7&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;看到一个 &lt;code&gt;sscanf&lt;/code&gt;，按着老套路来，容易发现要求输入符合 &lt;code&gt;%d %c %d&lt;/code&gt; 这样的格式，&lt;code&gt;8048bbf&lt;/code&gt; 开始的三行代码是检查 &lt;code&gt;sscanf&lt;/code&gt; 成功解析的次数是否大于 2。上述重复结构很容易让我们想到，会不会是挨个挨个检查输入，然后所有输入都匹配才成功通过？这一点很容易否决，因为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这些相似结构不止出现了 3 次，而我们的输入只有 2 个整数，1 个字符；&lt;/li&gt;
&lt;li&gt;其中出现的条件跳转并不是往下跳，而是跳转到同一个位置——&lt;code&gt;8048c8f&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第二点让我们联想到 C 语言中的 switch-case 结构，至于是不是，我们先看看 &lt;code&gt;8048c8f&lt;/code&gt; 后面的几行代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048c8f:   3a 5d fb                cmp    -0x5(%ebp),%bl&lt;/span&gt;
&lt;span class="x"&gt; 8048c92:   74 05                   je     8048c99 &amp;lt;phase_3+0x101&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048c94:   e8 63 08 00 00          call   80494fc &amp;lt;explode_bomb&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;翻译成 C：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bl&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;0x5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;告诉我们成功条件是 &lt;code&gt;bl == *(ebp-0x5)&lt;/code&gt;。回到一开始：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048bc9:   83 7d f4 07             cmpl   $0x7,-0xc(%ebp)&lt;/span&gt;
&lt;span class="x"&gt; 8048bcd:   0f 87 b5 00 00 00       ja     8048c88 &amp;lt;phase_3+0xf0&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048bd3:   8b 45 f4                mov    -0xc(%ebp),%eax&lt;/span&gt;
&lt;span class="x"&gt; 8048bd6:   ff 24 85 e8 97 04 08    jmp    *0x80497e8(,%eax,4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;等价于：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;0xC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="mh"&gt;0x8048c88&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;0xC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x80497e8&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;因为这几行代码是必经之地，所以我们将断点设在这里，输入 &lt;code&gt;11 a 13&lt;/code&gt; 调试看看。一步一步调试过去，发现 &lt;code&gt;*(ebp-0xC)&lt;/code&gt; 是输入的第一个数（输入不同值可以验证），跳转到 &lt;code&gt;8048c88&lt;/code&gt; 以后，这两行代码告诉我们：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048c88:   b3 78                   mov    $0x78,%bl&lt;/span&gt;
&lt;span class="x"&gt; 8048c8a:   e8 6d 08 00 00          call   80494fc &amp;lt;explode_bomb&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;只要第一个数大于 7，直接爆炸。所以上述逻辑可以简化为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x80497e8&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;注意到 0 到 7 有八个数，好像重复结构也差不多是七八个，数一数发现正好有 8 个重复结构。很自然想到是不是 &lt;code&gt;goto addr&lt;/code&gt; 就相当于 &lt;code&gt;switch&lt;/code&gt; 的作用，而重复结构就是 &lt;code&gt;case&lt;/code&gt;，其中出现的无条件跳转 &lt;code&gt;jmp 8048c8f&lt;/code&gt; 就是 &lt;code&gt;break&lt;/code&gt;。我们换一个输入 &lt;code&gt;7 a 13&lt;/code&gt; 看看到底是怎样的，单步运行会发现跳转到了：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048c76:   b3 62                   mov    $0x62,%bl&lt;/span&gt;
&lt;span class="x"&gt; 8048c78:   81 7d fc 0c 02 00 00    cmpl   $0x20c,-0x4(%ebp)&lt;/span&gt;
&lt;span class="x"&gt; 8048c7f:   74 0e                   je     8048c8f &amp;lt;phase_3+0xf7&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048c81:   e8 76 08 00 00          call   80494fc &amp;lt;explode_bomb&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048c86:   eb 07                   jmp    8048c8f &amp;lt;phase_3+0xf7&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这几行代码很简单，就不翻译了吧……关键在于 &lt;code&gt;cmpl $0x20c,-0x4(%ebp)&lt;/code&gt; 这一句，如果两个操作数不相等就会爆炸，否则就 &lt;code&gt;break&lt;/code&gt; 了。在 gdb 输入 &lt;code&gt;x/x $ebp-4&lt;/code&gt; 命令发现 &lt;code&gt;ebp-0x4&lt;/code&gt; 是对应于输入的第三个整数，&lt;code&gt;0x20c&lt;/code&gt; 的十进制表示是 &lt;code&gt;524&lt;/code&gt;，所以这次我们把输入换成 &lt;code&gt;7 a 524&lt;/code&gt; 再试试。继续一步一步看过去，发现最后跳转到了 &lt;code&gt;8048c8f&lt;/code&gt;，也就是最终成功条件的判断——&lt;code&gt;bl == *(ebp-0x5)&lt;/code&gt;。因为 &lt;code&gt;bl&lt;/code&gt; 占 1 个字节，正好对应于输入的字符，接着通过 &lt;code&gt;x/c $ebp-5&lt;/code&gt; 可以确认这一点。而最近对 &lt;code&gt;bl&lt;/code&gt; 的一次赋值是上面的第一行代码，&lt;code&gt;0x62&lt;/code&gt; 对应于 &lt;code&gt;b&lt;/code&gt;，所以正确的输入是 &lt;code&gt;7 b 524&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;整体的逻辑等价于：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sscanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%d %c %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
                    &lt;span class="p"&gt;...;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
                    &lt;span class="p"&gt;...;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
                    &lt;span class="n"&gt;bl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x62&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mh"&gt;0x20c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
                        &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bl&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1 id="_5"&gt;第四阶段&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Halfway there!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;终于闯过了一半，真是不容易……来到第四阶段，发现代码挺短，瞬间信心大增。又看到了 &lt;code&gt;sscanf&lt;/code&gt;，它附近的代码又在干同样的事情，这次是读取一个整数。随便输入一个整数 &lt;code&gt;42&lt;/code&gt;，然后将断点设在 &lt;code&gt;8048d03&lt;/code&gt;，看看 &lt;code&gt;-0x4(%ebp)&lt;/code&gt; 是什么内容。容易验证 &lt;code&gt;$ebp-4&lt;/code&gt; 是我们输入的那个整数，如此一来，&lt;code&gt;phase_4&lt;/code&gt; 的逻辑就明了了：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sscanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mh"&gt;0x37&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;拆除第四阶段的关键就转换为了：如何使 &lt;code&gt;func4(num) == 0x37&lt;/code&gt;。我们继续运行，进入 &lt;code&gt;func4&lt;/code&gt;，直到遇到 &lt;code&gt;8048cab&lt;/code&gt; 的跳转，查看 &lt;code&gt;ebx&lt;/code&gt; 的值，发现是我们的输入，也就是说 &lt;code&gt;$ebp+0x8&lt;/code&gt; 是输入的数字。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048cab:   83 fb 01                cmp    $0x1,%ebx&lt;/span&gt;
&lt;span class="x"&gt; 8048cae:   7e 20                   jle    8048cd0 &amp;lt;func4+0x30&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;不难发现这两行的逻辑是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;所以关键是 &lt;code&gt;else&lt;/code&gt; 后面做了些什么，让返回值是 &lt;code&gt;0x37&lt;/code&gt;，也就是 &lt;code&gt;55&lt;/code&gt; 的。&lt;code&gt;else&lt;/code&gt; 后面的语句是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048cb3:   8d 43 ff                lea    -0x1(%ebx),%eax&lt;/span&gt;
&lt;span class="x"&gt; 8048cb6:   50                      push   %eax&lt;/span&gt;
&lt;span class="x"&gt; 8048cb7:   e8 e4 ff ff ff          call   8048ca0 &amp;lt;func4&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048cbc:   89 c6                   mov    %eax,%esi&lt;/span&gt;
&lt;span class="x"&gt; 8048cbe:   83 c4 f4                add    $0xfffffff4,%esp&lt;/span&gt;
&lt;span class="x"&gt; 8048cc1:   8d 43 fe                lea    -0x2(%ebx),%eax&lt;/span&gt;
&lt;span class="x"&gt; 8048cc4:   50                      push   %eax&lt;/span&gt;
&lt;span class="x"&gt; 8048cc5:   e8 d6 ff ff ff          call   8048ca0 &amp;lt;func4&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048cca:   01 f0                   add    %esi,%eax&lt;/span&gt;
&lt;span class="x"&gt; 8048ccc:   eb 07                   jmp    8048cd5 &amp;lt;func4+0x35&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;除去传参的 &lt;code&gt;push&lt;/code&gt; 和调整堆栈值以外，剩下部分的逻辑是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ebx&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;esi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ebx&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;esi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;合并化简一下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;回想一下你学 C 语言的时候做过的那些「数学题」，这个式子不就是 Fibonacci 数列的递推公式吗？这下 &lt;code&gt;func4&lt;/code&gt; 就明了了：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;结合到一起，&lt;code&gt;phase_4&lt;/code&gt; 等于在问：第几个数对应的 Fibonacci 数等于 &lt;code&gt;55&lt;/code&gt;？所以答案是 &lt;code&gt;9&lt;/code&gt;。这一阶段考察的是递归，难点在于对函数的传参和返回是否熟悉，堆栈的变化是否清楚，比如：&lt;code&gt;add 0xfffffff4,%esp&lt;/code&gt; 等价于 &lt;code&gt;sub $0xC,%esp&lt;/code&gt;。此外出现了一些等价于 &lt;code&gt;nop&lt;/code&gt; 的指令，也会对分析产生干扰，如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;mov %esi,%esi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;不过这些问题都可以通过耐心的进行「翻译」，以及 Google 进行解决。&lt;/p&gt;
&lt;h1 id="_6"&gt;第五阶段&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;路漫漫其修远兮，吾将上下而求索&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只剩最后两阶段了，让我们看看第五阶段又有哪些花样。一眼就看到了 &lt;code&gt;string_length&lt;/code&gt; 这个函数，那么我们这次的输入应该是字符串，不再是数字了，紧跟着的 &lt;code&gt;cmp 0x6,%eax&lt;/code&gt; 告诉我们字符串长度是 6。有了这些信息，我们就可以开始调试看看了，先输入 &lt;code&gt;hello5&lt;/code&gt;，将断点设到 &lt;code&gt;8048d43&lt;/code&gt;，单步调试，发现如我们所料，跳转到了 &lt;code&gt;8048d4d&lt;/code&gt;。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048d4d:   31 d2                   xor    %edx,%edx&lt;/span&gt;
&lt;span class="x"&gt; 8048d4f:   8d 4d f8                lea    -0x8(%ebp),%ecx&lt;/span&gt;
&lt;span class="x"&gt; 8048d52:   be 20 b2 04 08          mov    $0x804b220,%esi&lt;/span&gt;
&lt;span class="x"&gt; 8048d57:   8a 04 1a                mov    (%edx,%ebx,1),%al&lt;/span&gt;
&lt;span class="x"&gt; 8048d5a:   24 0f                   and    $0xf,%al&lt;/span&gt;
&lt;span class="x"&gt; 8048d5c:   0f be c0                movsbl %al,%eax&lt;/span&gt;
&lt;span class="x"&gt; 8048d5f:   8a 04 30                mov    (%eax,%esi,1),%al&lt;/span&gt;
&lt;span class="x"&gt; 8048d62:   88 04 0a                mov    %al,(%edx,%ecx,1)&lt;/span&gt;
&lt;span class="x"&gt; 8048d65:   42                      inc    %edx&lt;/span&gt;
&lt;span class="x"&gt; 8048d66:   83 fa 05                cmp    $0x5,%edx&lt;/span&gt;
&lt;span class="x"&gt; 8048d69:   7e ec                   jle    8048d57 &amp;lt;phase_5+0x2b&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;注意到 &lt;code&gt;8048d69&lt;/code&gt; 的跳转是往回跳，意味着很有可能是个循环。至于是不是，我们先翻译一遍：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// edx&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;ecx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;esi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x804b220&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;al&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;al&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;esi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;al&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ecx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;al&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;为了进一步简化，我们需要知道 &lt;code&gt;ebx&lt;/code&gt;、&lt;code&gt;ecx&lt;/code&gt;、&lt;code&gt;esi&lt;/code&gt; 的值。通过 &lt;code&gt;x/s&lt;/code&gt;、&lt;code&gt;x/8x&lt;/code&gt; 指令发现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ebx&lt;/code&gt;：指向输入 &lt;code&gt;hello5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ecx&lt;/code&gt;：指向一个占 8 字节的数组，数组已经被初始化为 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;esi&lt;/code&gt;：指向字符串 &lt;code&gt;isrveawhobpnutfg\260\001&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为这几个寄存器都是一些字符串，所以类似于 &lt;code&gt;*(ebx+i)&lt;/code&gt; 的表达式其实就是 &lt;code&gt;ebx[i]&lt;/code&gt;，并且这里的 do-while 循环可以转换为 for 循环。进一步简化得到：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// $ebp-8, $ebp-7, ..., $ebp-1&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;isrveawhobpnutfg&lt;/span&gt;&lt;span class="se"&gt;\260\001&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;上面的代码根据我们输入字符串从 &lt;code&gt;isrveawhobpnutfg&lt;/code&gt;（注意 &lt;code&gt;num&lt;/code&gt; 小于 16）选出了 5 个字符。接着看到 &lt;code&gt;strings_not_equal&lt;/code&gt; 这个函数，让我们不禁猜想是不是拿这 5 个字符与另一个字符串进行比较，相等就拆除这一阶段。不管这段逻辑是不是，我们尝试一把，先搞清 &lt;code&gt;0x804980b&lt;/code&gt; 指向 &lt;code&gt;giants&lt;/code&gt;。&lt;code&gt;giants&lt;/code&gt; 对应于 &lt;code&gt;isrveawhobpnutfg&lt;/code&gt; 的位置如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;g&lt;/th&gt;
&lt;th&gt;i&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;n&lt;/th&gt;
&lt;th&gt;t&lt;/th&gt;
&lt;th&gt;s&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;'o' &amp;amp; 0xF&lt;/td&gt;
&lt;td&gt;'p' &amp;amp; 0xF&lt;/td&gt;
&lt;td&gt;'e' &amp;amp; 0xF&lt;/td&gt;
&lt;td&gt;'k' &amp;amp; 0xF&lt;/td&gt;
&lt;td&gt;'m' &amp;amp; 0xF&lt;/td&gt;
&lt;td&gt;'a' &amp;amp; 0xF&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们将输入换成 &lt;code&gt;opekma&lt;/code&gt;，成功！看来这部分逻辑和猜想的一样，就不用再看这部分代码了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Good work!  On to the next...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="_7"&gt;第六阶段&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;phase_6&lt;/code&gt; 给人的第一印象是：有点长，各种跳转，看来并不简单。在深入研究之前，我们先去掉一些等价于 &lt;code&gt;nop&lt;/code&gt; 的指令：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;lea 0x0(%esi),%esi&lt;/span&gt;
&lt;span class="x"&gt;lea 0x0(%esi,%eiz,1),%esi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;将断点设在 &lt;code&gt;8048dc3&lt;/code&gt;，我们看看跳转之前做了些什么。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048dc0:   8d 45 e8                lea    -0x18(%ebp),%eax&lt;/span&gt;
&lt;span class="x"&gt; 8048dc3:   8b 04 b8                mov    (%eax,%edi,4),%eax&lt;/span&gt;
&lt;span class="x"&gt; 8048dc6:   48                      dec    %eax&lt;/span&gt;
&lt;span class="x"&gt; 8048dc7:   83 f8 05                cmp    $0x5,%eax&lt;/span&gt;
&lt;span class="x"&gt; 8048dca:   76 05                   jbe    8048dd1 &amp;lt;phase_6+0x39&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;上面的代码等价于：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// ptr = ebp - 0x18;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;edi&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;容易发现 &lt;code&gt;$ebp-0x18&lt;/code&gt; 是个指针，指向的值是 &lt;code&gt;1&lt;/code&gt;，正好是我们输入的第一个整数，当然也有可能是程序中的一个常量。具体是哪种情况，暂不清楚，先放在一边，继续单步执行，我们遇到了一个循环。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048de6:   8b 55 c8                mov    -0x38(%ebp),%edx&lt;/span&gt;
&lt;span class="x"&gt; 8048de9:   8b 04 32                mov    (%edx,%esi,1),%eax&lt;/span&gt;
&lt;span class="x"&gt; 8048dec:   3b 04 9e                cmp    (%esi,%ebx,4),%eax&lt;/span&gt;
&lt;span class="x"&gt; 8048def:   75 05                   jne    8048df6 &amp;lt;phase_6+0x5e&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048df1:   e8 06 07 00 00          call   80494fc &amp;lt;explode_bomb&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 8048df6:   43                      inc    %ebx&lt;/span&gt;
&lt;span class="x"&gt; 8048df7:   83 fb 05                cmp    $0x5,%ebx&lt;/span&gt;
&lt;span class="x"&gt; 8048dfa:   7e ea                   jle    8048de6 &amp;lt;phase_6+0x4e&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;并不清楚是在做什么，不管这么多，先写出它的等价 C 代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 8048de3: ptr = ebp - 0x18&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 8048dec&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;0x38&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;光从这段代码很难推断出什么有用信息，我们只能知道：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ebx&lt;/code&gt; 是个计数变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ptr&lt;/code&gt; 是个指针，看着像是指向一个整型数组&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;往下看：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; 8048dfc:   47                      inc    %edi&lt;/span&gt;
&lt;span class="x"&gt; 8048dfd:   83 ff 05                cmp    $0x5,%edi&lt;/span&gt;
&lt;span class="x"&gt; 8048e00:   7e be                   jle    8048dc0 &amp;lt;phase_6+0x28&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这三句告诉我们上面分析的两段代码其实是处于一个大的循环中，结合之前的分析，我们把 &lt;code&gt;8048dc0&lt;/code&gt; 到 &lt;code&gt;8048e00&lt;/code&gt; 这段代码翻译出来，然后写出它的等价逻辑：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// ptr = ebp - 0x18;&lt;/span&gt;
&lt;span class="c1"&gt;// i = edi;&lt;/span&gt;
&lt;span class="c1"&gt;// j = ebx;&lt;/span&gt;

&lt;span class="c1"&gt;// 8048db8: edi = 0;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;我们从 &lt;code&gt;8048dc0&lt;/code&gt; 往上看，&lt;code&gt;8048db8&lt;/code&gt; 告诉我们 &lt;code&gt;i&lt;/code&gt; 被初始化了 &lt;code&gt;0&lt;/code&gt;，所以循环总共迭代了 6 次，可能是对我们输入的 6 个整数做了处理。再看看 &lt;code&gt;ptr + i*4&lt;/code&gt;，也就是 &lt;code&gt;ebp-0x18&lt;/code&gt;、&lt;code&gt;ebp-0x14&lt;/code&gt;、...、&lt;code&gt;ebp-0x04&lt;/code&gt; 所指向的值，发现正好对应于输入的 6 个整数，所以 &lt;code&gt;*(ptr + i*4)&lt;/code&gt; 等价于 &lt;code&gt;nums[i]&lt;/code&gt;：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;所以 &lt;code&gt;8048dc0&lt;/code&gt; 到 &lt;code&gt;8048e00&lt;/code&gt; 告诉我们输入的 6 个整数必须满足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;小于等于 6&lt;/li&gt;
&lt;li&gt;互不相等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;依葫芦画瓢是个好办法，但是我们先不急着翻译，看看各种跳转把执行流导向了哪里：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mf"&gt;8048e02&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mf"&gt;8048e10&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mf"&gt;8048e1&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ecx&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="mf"&gt;8048e38&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mf"&gt;8048e26&lt;/span&gt;
    &lt;span class="mf"&gt;8048e29&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mf"&gt;8048e30&lt;/span&gt;
        &lt;span class="mf"&gt;8048e33&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="mf"&gt;8048e38&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt; 
    &lt;span class="mf"&gt;8048e3&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="mf"&gt;8048e10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mf"&gt;8048e44&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="mf"&gt;8048e4&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;

        &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="mf"&gt;8048e52&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;
            &lt;span class="mf"&gt;8048e5&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="mf"&gt;8048e60&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="mf"&gt;8048e70&lt;/span&gt;
        &lt;span class="mf"&gt;8048e73&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;edx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="mf"&gt;8048e7&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
            &lt;span class="mf"&gt;8048e81&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="mf"&gt;8048e70&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;乍看之下，这个控制流十分复杂，但在进一步规约后，我们会发现都是些很简单的结构：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mf"&gt;8048e02&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mf"&gt;8048e0&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mf"&gt;8048e10&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="mf"&gt;8048e1&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ecx&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mf"&gt;8048e26&lt;/span&gt;
        &lt;span class="mf"&gt;8048e29&lt;/span&gt;
        &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="mf"&gt;8048e30&lt;/span&gt;
            &lt;span class="mf"&gt;8048e33&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mf"&gt;8048e38&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt; 
    &lt;span class="mf"&gt;8048e3&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="mf"&gt;8048e44&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mf"&gt;8048e4&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mf"&gt;8048e52&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="mf"&gt;8048e5&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="mf"&gt;8048e60&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mf"&gt;8048e6&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mf"&gt;8048e70&lt;/span&gt;
    &lt;span class="mf"&gt;8048e73&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;edx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="mf"&gt;8048e7&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="mf"&gt;8048e81&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;我们耐心的把这些汇编翻译过来，然后化简就得到了：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// i = edi&lt;/span&gt;
&lt;span class="c1"&gt;// j = ebx&lt;/span&gt;
&lt;span class="c1"&gt;// ptr = esi&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x34&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x30&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x34&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x30&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x30&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x34&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;什么都看不出来，但是我们发现有些地址反复出现，比如：&lt;code&gt;ebp-0x34&lt;/code&gt;、&lt;code&gt;ebp-0x30&lt;/code&gt;，查看他们的值发现无一例外都指向一个地址。对照翻译的逻辑跑一遍，发现 16 到 19 行代码很有规律，跟踪几次迭代后会发现 17 和 18 两行代码很像链表的操作：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;而 &lt;code&gt;ebp-0x30&lt;/code&gt; 似乎就是用来构造链表的结构体数组，要搞清楚这一点，最简单的办法莫过于查看这个数组的每一个值，看看相互之间有没有关联。为此，我们回头找初始化的代码，注意到第 8 行对 &lt;code&gt;ebp-0x30&lt;/code&gt;、&lt;code&gt;ebp-0x2c&lt;/code&gt;、...、&lt;code&gt;ebp-0x1c&lt;/code&gt; 进行了赋值，且 &lt;code&gt;ebp-0x34&lt;/code&gt; 的值在 &lt;code&gt;8048da4&lt;/code&gt; 处被赋值成了一个地址 &lt;code&gt;0x804b26c&lt;/code&gt;。我们跟踪第 6 行，发现有 6 个地址相互有关联：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x804b26c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x804b260&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x804b260&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x804b254&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x804b254&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x804b248&lt;/span&gt; 
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x804b248&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x804b23c&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x804b23c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x804b230&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x804b230&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这显然是一个链表结构，而 &lt;code&gt;+0x8&lt;/code&gt; 简直和 &lt;code&gt;-&amp;gt;next&lt;/code&gt; 一模一样，替换一下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// i = edi&lt;/span&gt;
&lt;span class="c1"&gt;// j = ebx&lt;/span&gt;
&lt;span class="c1"&gt;// ptr = esi&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x30&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x30&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x30&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;是不是感觉整个世界都明朗了，哈哈。接着就只需要弄明白，&lt;code&gt;*(ebp - 0x30 + i*4)&lt;/code&gt; 到底是个什么东西。注意到第 9 行，因为 &lt;code&gt;ptr&lt;/code&gt; 是个指针，而 &lt;code&gt;i*4&lt;/code&gt; 在前面已经见过了，种种这些都暗示我们 &lt;code&gt;ebp - 0x30&lt;/code&gt; 是个指针数组，我们再据此改写一下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// i = edi&lt;/span&gt;
&lt;span class="c1"&gt;// j = ebx&lt;/span&gt;
&lt;span class="c1"&gt;// ptr = esi&lt;/span&gt;
&lt;span class="c1"&gt;// ptrs = ebp - 0x30&lt;/span&gt;
&lt;span class="c1"&gt;// nodes = {&lt;/span&gt;
&lt;span class="c1"&gt;//     0x804b26c, 0x804b260, 0x804b254,&lt;/span&gt;
&lt;span class="c1"&gt;//     0x804b248, 0x804b23c, 0x804b230,&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ptrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;explode_bomb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这下一切都清楚了，第 5 到 11 行根据我们输入的数字将指针数组 &lt;code&gt;ptrs&lt;/code&gt; 初始化，第 13 到 18 行将 &lt;code&gt;ptrs&lt;/code&gt; 中的结构体依次链接起来，第 20 到 25 行告诉我们链接起来形成的链表必须满足递减的规律。接下来的事情就简单了，打印出 &lt;code&gt;nodes&lt;/code&gt; 中那些地址指向的值，然后排序以后得出答案：&lt;code&gt;4 2 6 3 1 5&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Address&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Order&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0x804b26c&lt;/td&gt;
&lt;td&gt;0x000000fd&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x804b260&lt;/td&gt;
&lt;td&gt;0x000002d5&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x804b254&lt;/td&gt;
&lt;td&gt;0x0000012d&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x804b248&lt;/td&gt;
&lt;td&gt;0x000003e5&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x804b23c&lt;/td&gt;
&lt;td&gt;0x000000d4&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x804b230&lt;/td&gt;
&lt;td&gt;0x000001b0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;Congratulations! You've defused the bomb!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;至此，我们已经成功拆除了炸弹。&lt;/p&gt;
&lt;h1 id="_8"&gt;隐藏阶段&lt;/h1&gt;
&lt;p&gt;第六阶段非常难，没有动手写过一些 C 语言代码，几乎很难察觉到其中的奥秘。不过隐藏阶段才是真正的 BOSS……这里不详细说明了，照着上面的办法，慢慢的尝试，花点时间也能做出来。下面给几个提示，有兴趣的同学可以尝试尝试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在第四阶段加点料才能进入隐藏阶段&lt;/li&gt;
&lt;li&gt;&lt;img alt="fun7_tree" src="https://dn-loggerhead.qbox.me/images/fun7_tree.png" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;成功解决这个炸弹相信非常有成就感，不过其实拆除炸弹有个十分简单的办法——&lt;code&gt;Ctrl+C&lt;/code&gt; :P&lt;/p&gt;</summary><category term="汇编"></category><category term="Linux"></category></entry><entry><title>Python 的 import 机制</title><link href="https://loggerhead.me/posts/python-de-import-ji-zhi.html" rel="alternate"></link><published>2016-04-25T14:15:50+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2016-04-25:posts/python-de-import-ji-zhi.html</id><summary type="html">&lt;p&gt;一直对 Python 的 import 机制不甚了解，这次在写 &lt;a href="https://github.com/loggerhead/Easy-Karabiner"&gt;Easy-Karabiner&lt;/a&gt; 的时候就踩坑了，顺便了解了一下，发现这玩意儿还不是那么「符合直觉」，遂写篇博客讲讲。&lt;/p&gt;


&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;模块与包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#import"&gt;两种形式的 import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#import_1"&gt;import 的搜索路径&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#import-import"&gt;相对 import 与 绝对 import&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#import_2"&gt;相对 import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#import_3"&gt;绝对 import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;两者的差异&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#import_4"&gt;import 的大致过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips"&gt;Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="_1"&gt;模块与包&lt;/h1&gt;
&lt;p&gt;在了解 import 之前，有两个概念必须提一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块: 一个 &lt;code&gt;.py&lt;/code&gt; &lt;strong&gt;文件&lt;/strong&gt; 就是一个模块（module）&lt;/li&gt;
&lt;li&gt;包: &lt;code&gt;__init__.py&lt;/code&gt; 文件所在 &lt;strong&gt;目录&lt;/strong&gt; 就是包（package）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，这只是极简版的概念。实际上包是一种特殊的模块，而任何定义了 &lt;code&gt;__path__&lt;/code&gt; 属性的模块都被当做包。只不过，咱们日常使用中并不需要知道这些。&lt;/p&gt;
&lt;h1 id="import"&gt;两种形式的 import&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;import&lt;/code&gt; 有两种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from ... import ...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两者有着很细微的区别，先看几行代码。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ascii_lowercase&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string.ascii_lowercase&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;运行后发现最后一行代码报错：&lt;code&gt;ImportError: No module named ascii_lowercase&lt;/code&gt;，意思是：“找不到叫 ascii_lowercase 的模块”。第 1 行和第 3 行的区别只在于有没有 &lt;code&gt;from&lt;/code&gt;，翻翻&lt;a href="https://docs.python.org/2/reference/simple_stmts.html#import"&gt;语法定义&lt;/a&gt;发现有这样的规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import ...&lt;/code&gt; 后面只能是模块或包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from ... import ...&lt;/code&gt; 中，&lt;code&gt;from&lt;/code&gt; 后面只能是模块或包，&lt;code&gt;import&lt;/code&gt; 后面可以是任何变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以简单的记成：&lt;em&gt;第一个空只能填模块或包，第二个空填啥都行&lt;/em&gt;。&lt;/p&gt;
&lt;h1 id="import_1"&gt;import 的搜索路径&lt;/h1&gt;
&lt;p&gt;提问，下面这几行代码的输出结果是多少？&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# foo.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_lowercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;是小写字母吗？那可不一定，如果目录树是这样的：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./
├── foo.py
└── string.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;foo.py&lt;/code&gt; 所在目录有叫 &lt;code&gt;string.py&lt;/code&gt; 的文件，结果就不确定了。因为你不知道 &lt;code&gt;import string&lt;/code&gt; 到底是 import 了 &lt;code&gt;./string.py&lt;/code&gt; 还是标准库的 &lt;code&gt;string&lt;/code&gt;。为了回答这个问题，我们得了解一下 import 是怎么找到模块的，这个过程比较简单，只有两个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;搜索「内置模块」（built-in module）&lt;/li&gt;
&lt;li&gt;搜索 &lt;code&gt;sys.path&lt;/code&gt; 中的路径&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而 &lt;code&gt;sys.path&lt;/code&gt; 在初始化时，又会按照顺序添加以下路径：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;foo.py&lt;/code&gt; 所在目录&lt;/strong&gt;（如果是软链接，那么是真正的 &lt;code&gt;foo.py&lt;/code&gt; 所在目录）或 &lt;strong&gt;当前目录&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;环境变量 &lt;code&gt;PYTHONPATH&lt;/code&gt;&lt;/strong&gt; 中列出的目录（类似环境变量 &lt;code&gt;PATH&lt;/code&gt;，由用户定义，默认为空）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;site&lt;/code&gt; 模块&lt;/strong&gt; 被 import 时添加的路径&lt;sup id="fnref:import-site"&gt;&lt;a class="footnote-ref" href="#fn:import-site" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;（&lt;code&gt;site&lt;/code&gt; 会在运行时被自动 import）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;import site&lt;/code&gt; 所添加的路径一般是 &lt;code&gt;XXX/site-packages&lt;/code&gt;（Ubuntu 上是 &lt;code&gt;XXX/dist-packages&lt;/code&gt;），比如在我的机器上是 &lt;code&gt;/usr/local/lib/python2.7/site-packages&lt;/code&gt;。同时，通过 &lt;code&gt;pip&lt;/code&gt; 安装的包也是保存在这个目录下的。如果懒得记 &lt;code&gt;sys.path&lt;/code&gt; 的初始化过程，可以简单的认为 import 的查找顺序是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内置模块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.py&lt;/code&gt; 文件所在目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip&lt;/code&gt; 或 &lt;code&gt;easy_install&lt;/code&gt; 安装的包&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;回到前面的问题，因为 &lt;code&gt;import string&lt;/code&gt; 是通过搜寻 &lt;code&gt;foo.py&lt;/code&gt; 文件所在目录，找到 &lt;code&gt;string.py&lt;/code&gt; 后 import 的，所以输出取决于 import &lt;code&gt;string.py&lt;/code&gt; 时执行的代码。&lt;/p&gt;
&lt;h1 id="import-import"&gt;相对 import 与 绝对 import&lt;/h1&gt;
&lt;h2 id="import_2"&gt;相对 import&lt;/h2&gt;
&lt;p&gt;当项目规模变大，代码复杂度上升的时候，我们通常会把一个一个的 &lt;code&gt;.py&lt;/code&gt; 文件组织成一个包，让项目结构更加清晰。这时候 import 又会出现一些问题，比如：一个典型包的目录结构是这样的：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;string/
├── __init__.py
├── find.py
└── foo.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;如果 &lt;code&gt;string/foo.py&lt;/code&gt; 的代码如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# string/foo.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;那么 &lt;code&gt;python string/foo.py&lt;/code&gt; 的运行结果会是下面的哪一个呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;module 'string.find' from 'string/find.py'&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;function find at 0x123456789&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按我们前面讲的各种规则来推导，因为 &lt;code&gt;foo.py&lt;/code&gt; 所在目录 &lt;code&gt;string/&lt;/code&gt; 没有 &lt;code&gt;string&lt;/code&gt; 模块（即 &lt;code&gt;string.py&lt;/code&gt;），所以 import 的是标准库的 &lt;code&gt;string&lt;/code&gt;，答案是后者。不过，如果你把 &lt;code&gt;foo&lt;/code&gt; 当成 &lt;code&gt;string&lt;/code&gt; 包中的模块运行，即 &lt;code&gt;python -m string.foo&lt;/code&gt;，会发现运行结果是前者。同样的语句，却有着两种不同的语义，这无疑加重了咱们的心智负担，总不能每次咱们调试包里的模块时，都去检查一下执行的命令是 &lt;code&gt;python string/foo.py&lt;/code&gt; 还是 &lt;code&gt;python -m string.foo&lt;/code&gt; 吧？&lt;/p&gt;
&lt;p&gt;相对 import 就是专为解决「包内导入」（intra-package import）而出现的。它的使用也很简单，&lt;code&gt;from&lt;/code&gt; 的后面跟个 &lt;code&gt;.&lt;/code&gt; 就行：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.XXX&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;比如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# from string/ import find.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;
&lt;span class="c1"&gt;# from string/find.py import *&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.find&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;我们再看个复杂点的例子，有个包的目录结构长这样：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;one/
├── __init__.py
├── foo.py
└── two/
    ├── __init__.py
    ├── bar.py
    └── three/
        ├── __init__.py
        ├── dull.py
        └── run.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;foo.py&lt;/code&gt;、&lt;code&gt;bar.py&lt;/code&gt;、&lt;code&gt;dull.py&lt;/code&gt; 中的代码分别是 &lt;code&gt;print(1)&lt;/code&gt;、&lt;code&gt;print(2)&lt;/code&gt;、&lt;code&gt;print(3)&lt;/code&gt;，并且 &lt;code&gt;run.py&lt;/code&gt; 的代码如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dull&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;..&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;...&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Go, go, go!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;我们通过 &lt;code&gt;python -m one.two.three.run&lt;/code&gt; 运行 &lt;code&gt;run.py&lt;/code&gt;，可以看到 &lt;code&gt;run.py&lt;/code&gt; 运行结果如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;3
2
1
Go, go, go!
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;意思就是，&lt;code&gt;from&lt;/code&gt; 后面出现几个 &lt;code&gt;.&lt;/code&gt; 就表示往上找第几层的包。也可以将 &lt;code&gt;run.py&lt;/code&gt; 改写成下面这样，运行结果是一样的：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.dull&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;..bar&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;...foo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Go, go, go!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;好啦，相对 import 就介绍到这里，回到最初的问题。如果用相对 import，把 &lt;code&gt;string/foo.py&lt;/code&gt; 改写成：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# string/foo.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;那么 &lt;code&gt;python string/foo.py&lt;/code&gt; 和 &lt;code&gt;python -m string.foo&lt;/code&gt; 的运行结果又是怎样呢？运行一下发现，两者的输出分别是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string/foo.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Attempted&lt;/span&gt; &lt;span class="n"&gt;relative&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;in&lt;/span&gt; &lt;span class="nn"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;string.find&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;string/find.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;原因在于 &lt;code&gt;python string/foo.py&lt;/code&gt; 把 &lt;code&gt;foo.py&lt;/code&gt; 当成一个单独的脚本来运行，认为 &lt;code&gt;foo.py&lt;/code&gt; 不属于任何包，所以此时相对 import 就会报错。也就是说，无论命令行是怎么样的，运行时 import 的语义都统一了，不会再出现运行结果不一致的情况。&lt;/p&gt;
&lt;h2 id="import_3"&gt;绝对 import&lt;/h2&gt;
&lt;p&gt;绝对 import 和相对 import 很好区分，因为从行为上来看，绝对 import 会通过搜索 &lt;code&gt;sys.path&lt;/code&gt; 来查找模块；另一方面，除了相对 import 就只剩绝对 import 了嘛 :) 也就是说：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有的 &lt;code&gt;import ...&lt;/code&gt; 都是绝对 import&lt;/li&gt;
&lt;li&gt;所有的 &lt;code&gt;from XXX import ...&lt;/code&gt; 都是绝对 import&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过，第 2 点只对 2.7 及其以上的版本（包括 3.x）成立喔！如果是 2.7 以下的版本，得使用&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;absolute_import&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_2"&gt;两者的差异&lt;/h2&gt;
&lt;p&gt;首先，绝对 import 是 Python 默认的 import 方式，其原因有两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绝对 import 比相对 import 使用更频繁&lt;/li&gt;
&lt;li&gt;绝对 import 能实现相对 import 的所有功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其次，两者搜索模块的方式不一样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于相对 import，通过查看 &lt;code&gt;__name__&lt;/code&gt; 变量，在「包层级」（package hierarchy）中搜索&lt;/li&gt;
&lt;li&gt;对于绝对 import，当不处于包层级中时，搜索 &lt;code&gt;sys.path&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面在介绍 &lt;code&gt;sys.path&lt;/code&gt; 的初始化的时候，我在有个地方故意模棱两可，即：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;foo.py 所在目录（如果是软链接，那么是真正的 foo.py 所在目录）或 当前目录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;官方文档的原文是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the directory containing the input script (or the current directory).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是因为当模块处于包层级中的时候，绝对 import 的行为比较蛋疼，官方的说法是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The submodules often need to refer to each other. For example, the surround module might use the echo module. In fact, such references are so common that the import statement first looks in the containing package before looking in the standard module search path. Thus, the surround module can simply use import echo or from echo import echofilter. If the imported module is not found in the current package (the package of which the current module is a submodule), the import statement looks for a top-level module with the given name.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是在我的测试中发现，其行为可能是下面两者中的任意一种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.py&lt;/code&gt; 文件所在目录&lt;/li&gt;
&lt;li&gt;当前目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如，对于目录结构如下的包：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;father/
├── __init__.py
├── child/
│   ├── __init__.py
│   ├── foo.py
│   └── string.py
└── string/
    └── __init__.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;其中，&lt;code&gt;foo.py&lt;/code&gt; 代码如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;import string&lt;/code&gt; 真正导入的模块是：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;version&lt;/th&gt;
&lt;th&gt;&lt;code&gt;python -m child.foo&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;python child/foo.py&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;2.7.11&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;child/string.py&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;child/string.py&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3.5.1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string/__init__.py&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;child/string.py&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果将 &lt;code&gt;foo.py&lt;/code&gt; 的代码改成（你可以 &lt;code&gt;print(sys.path)&lt;/code&gt; 看看为什么改成这样）：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;import 的模块就变成了：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;version&lt;/th&gt;
&lt;th&gt;&lt;code&gt;python -m child.foo&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;python child/foo.py&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;2.7.11&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;child/string.py&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string/__init__.py&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3.5.1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string/__init__.py&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string/__init__.py&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;为了避免踩到这种坑，咱们可以这样子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免包或模块重名，避免使用 &lt;code&gt;__main__.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;包内引用尽量使用相对 import&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="import_4"&gt;import 的大致过程&lt;/h1&gt;
&lt;p&gt;import 的实际过程十分复杂，不过其大致过程可以简化为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;module_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;module_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;module_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;module_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;module_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;sys.modules&lt;/code&gt; 用于缓存，避免重复 import 带来的开销；&lt;code&gt;load&lt;/code&gt; 会将模块执行一次，类似于直接运行。&lt;/p&gt;
&lt;h1 id="tips"&gt;Tips&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;import 会生成 &lt;code&gt;.pyc&lt;/code&gt; 文件，&lt;code&gt;.pyc&lt;/code&gt; 文件的执行速度不比 &lt;code&gt;.py&lt;/code&gt; 快，但是加载速度更快&lt;/li&gt;
&lt;li&gt;重复 import 只会执行第一次 import&lt;/li&gt;
&lt;li&gt;如果在 &lt;code&gt;ipython&lt;/code&gt; 中 import 的模块发生改动，需要通过 &lt;code&gt;reload&lt;/code&gt; 函数重新加载&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import *&lt;/code&gt; 会导入除了以 &lt;code&gt;_&lt;/code&gt; 开头的所有变量，但是如果定义了 &lt;code&gt;__all__&lt;/code&gt;，那么会导入 &lt;code&gt;__all__&lt;/code&gt; 中列出的东西&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_3"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/__main__.html"&gt;__name__ 与 __main__&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/sys.html#sys.path"&gt;sys.path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0328/"&gt;PEP 328&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leemendelowitz.github.io/blog/how-does-python-find-packages.html"&gt;How does python find packages?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/site.html"&gt;site 模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/modules.html#the-module-search-path"&gt;The Module Search Path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH"&gt;环境变量 PYTHONPATH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/reference/import.html"&gt;The import system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python-notes.curiousefficiency.org/en/latest/python_concepts/import_traps.html"&gt;Traps for the Unwary in Python's Import System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/reference/simple_stmts.html#import"&gt;The import statement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:import-site"&gt;
&lt;p&gt;官方说法是「Python 安装时设定的默认路径」（The installation-dependent default path），而这玩意儿实际上是通过 &lt;code&gt;site&lt;/code&gt; 模块来设置的。&amp;#160;&lt;a class="footnote-backref" href="#fnref:import-site" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Python"></category><category term="编程语言"></category></entry><entry><title>给 GitHub 项目戴上勋章</title><link href="https://loggerhead.me/posts/gei-github-xiang-mu-dai-shang-xun-zhang.html" rel="alternate"></link><published>2016-03-27T10:20:12+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2016-03-27:posts/gei-github-xiang-mu-dai-shang-xun-zhang.html</id><summary type="html">&lt;p&gt;如果你常常使用 GitHub，稍微留心就会发现，不少项目都有勋章（badges），那这些勋章有什么用呢？要怎么给自己的项目也「戴上」勋章呢？&lt;/p&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Travis&lt;/th&gt;
&lt;th&gt;Coveralls&lt;/th&gt;
&lt;th&gt;PyPI&lt;/th&gt;
&lt;th&gt;License&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt="Travis badge" src="https://img.shields.io/travis/loggerhead/Easy-Karabiner.svg" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Coveralls badge" src="https://img.shields.io/coveralls/loggerhead/Easy-Karabiner.svg" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="PyPI Version" src="https://img.shields.io/pypi/v/easy_karabiner.svg" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="License" src="https://img.shields.io/badge/license-MIT-blue.svg" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id="_1"&gt;勋章的作用&lt;/h1&gt;
&lt;p&gt;在继续介绍勋章之前，我们先了解什么是持续集成。&lt;/p&gt;
&lt;h2 id="_2"&gt;持续集成&lt;/h2&gt;
&lt;p&gt;有经验的开发者往往对自己写的代码有很强的「信心」，这种「信心」来自于丰富的经验，丰富到对代码的任何一点改动，都能被他们的「大局观」给捕捉到。但是随着代码规模增加，无论开发者的经验如何丰富，也很难继续「掌控」全局。因为开发者对项目其他部分可能一无所知，不知道其他开发者提供的接口是不是足够健壮，不知道对某个文件的修改会不会影响其他函数的调用，所有的这些未知都会让开发者逐渐丧失「信心」。&lt;/p&gt;
&lt;p&gt;众所周知，给项目加上充足的测试通常能很好的解决上述问题。不过保持多高的测试频率才适当呢？应当每完成一个模块测试一次，或者每完成一个函数测试一次？一个自然而然的想法是，测试频率越高越好，不过如果项目迭代速度很快，每次都手动测试，等待测试结果出来再继续开发，这个过程就有点繁琐了。因此，有人提出了持续集成&lt;sup id="fnref:continuous-integration"&gt;&lt;a class="footnote-ref" href="#fn:continuous-integration" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;的概念。持续集成的核心想法是：如果有代码更新，运行自动化测试，并给出测试结果。持续集成的直接好处就是：如果有 bug，很快就能发现，并能定位到提交者（commiter），那么 bug 就能在更短的周期内被修复。&lt;/p&gt;
&lt;p&gt;如果我们在 GitHub 上的开源项目也能做到持续集成，那么项目的质量就有所保证。也因此，无论是开发者，还是使用者都会对项目更加有信心。那么持续集成的结果怎么表达给项目的使用者呢，总不能叫他们去看冗长的分析结果吧？答案就是—勋章。&lt;/p&gt;
&lt;h2 id="_3"&gt;持续集成服务&lt;/h2&gt;
&lt;h3 id="travis-ci"&gt;Travis CI &lt;img alt="Travis badge" src="https://img.shields.io/travis/loggerhead/Easy-Karabiner.svg" /&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt; 是一个免费为开源项目提供持续集成的网站。在与 GitHub 的账号关联以后，只需按一个按钮，写好 &lt;code&gt;.travis.yml&lt;/code&gt;，就能让它对每一个 commit 或 pull request 按照 &lt;code&gt;.travis.yml&lt;/code&gt; 中的规则执行脚本。&lt;/p&gt;
&lt;p&gt;它实现的功能看似简单，但却十分强大，前面提到的自动化测试就是通过它实现的。以 &lt;a href="https://github.com/loggerhead/Easy-Karabiner"&gt;Easy-Karabiner&lt;/a&gt; 的 &lt;code&gt;.travis.yml&lt;/code&gt; 为例：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3.3&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3.4&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3.5&amp;quot;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install coveralls&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install lxml click&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;cache&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;directories&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$HOME/.cache/pip&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python setup.py install&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nosetests --with-coverage --cover-package=easy_karabiner&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;after_success&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;coveralls&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;上面的规则告诉 Travis CI 在四种 Python 环境下分别进行相同的操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装依赖：&lt;code&gt;pip install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装项目：&lt;code&gt;python setup.py install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行测试：&lt;code&gt;nosetests&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上传测试结果到 Coveralls：&lt;code&gt;coveralls&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;只有所有的操作都执行成功，它才会 passing 。&lt;/p&gt;
&lt;h3 id="coveralls"&gt;Coveralls &lt;img alt="Coveralls badge" src="https://img.shields.io/coveralls/loggerhead/Easy-Karabiner.svg" /&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://coveralls.io/"&gt;Coveralls&lt;/a&gt; 是一个提供测试覆盖率分析的网站，它能告诉你每个文件的测试覆盖率是多少，甚至代码中哪些行没有被测试用例覆盖到也能在报告中看到。更棒的是，对开源项目永久免费！&lt;/p&gt;
&lt;p&gt;&lt;img alt="coveralls-example-file.png" src="https://dn-loggerhead.qbox.me/images/coveralls-example-file.png" /&gt;
&lt;img alt="coveralls-example-detail.png" src="https://dn-loggerhead.qbox.me/images/coveralls-example-detail.png" /&gt;&lt;/p&gt;
&lt;p&gt;Coveralls 的使用和 Travis CI 略有不同，其步骤如下（详见 Travis CI 中的示例）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;与 GitHub 帐号关联，Turn on 需要分析的 repo&lt;/li&gt;
&lt;li&gt;在 Travis CI 中执行测试，并生成 Coveralls 支持的测试报告&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;coveralls&lt;/code&gt; 命令上传测试报告&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;目前 Coveralls 支持的语言和服务如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语言：Ruby、Python、PHP、Node.js、C/C++、Scala&lt;/li&gt;
&lt;li&gt;CI 服务：Travis CI、Travis Pro、CircleCI、Jenkins、Semaphore、Codeship&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果开发语言是 Python，个人推荐下面这套 Combo：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nose.readthedocs.org/en/latest/"&gt;nosetests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/coagulant/coveralls-python"&gt;coveralls-python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="landscape"&gt;Landscape &lt;img alt="Landscape badge" src="https://landscape.io/github/loggerhead/Easy-Karabiner/master/landscape.svg" /&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://landscape.io/"&gt;Landscape&lt;/a&gt; 是 &lt;strong&gt;提供 Python 代码质量分析&lt;/strong&gt; 的网站，它能帮助你发现代码中的错误或「坏味道」，比如：&lt;/p&gt;
&lt;p&gt;&lt;img alt="landscape-example-warning.png" src="https://dn-loggerhead.qbox.me/images/landscape-example-warning.png" /&gt;
&lt;img alt="landscape-example-error.png" src="https://dn-loggerhead.qbox.me/images/landscape-example-error.png" /&gt;&lt;/p&gt;
&lt;p&gt;同样，它也能给出每个文件的「健康情况」：&lt;/p&gt;
&lt;p&gt;&lt;img alt="landscape-example-score.png" src="https://dn-loggerhead.qbox.me/images/landscape-example-score.png" /&gt;&lt;/p&gt;
&lt;p&gt;Landscape 默认使用 &lt;a href="https://github.com/PyCQA/pylint"&gt;pylint&lt;/a&gt; 进行分析，也可以创建 &lt;code&gt;.landscape.yml&lt;/code&gt; 文件，并在里面配置使用其他工具或者 disable 一些检查，比如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pylint&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;disable&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;unused-argument&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;redefined-builtin&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;arguments-differ&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1 id="_4"&gt;获取勋章&lt;/h1&gt;
&lt;p&gt;上述持续集成服务自身就有提供勋章，拿 &lt;a href="https://github.com/loggerhead/Easy-Karabiner"&gt;loggerhead/Easy-Karabiner&lt;/a&gt; 为例，这些勋章的链接分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://travis-ci.org/loggerhead/Easy-Karabiner.svg"&gt;https://travis-ci.org/loggerhead/Easy-Karabiner.svg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coveralls.io/repos/github/loggerhead/Easy-Karabiner/badge.svg"&gt;https://coveralls.io/repos/github/loggerhead/Easy-Karabiner/badge.svg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://landscape.io/github/loggerhead/Easy-Karabiner/master/landscape.svg"&gt;https://landscape.io/github/loggerhead/Easy-Karabiner/master/landscape.svg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想添加其他勋章，可以在 http://shields.io/ 找找看，它提供了很多种类的勋章，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub: &lt;img alt="Stars badge" src="https://img.shields.io/github/stars/django/django.svg" /&gt; &lt;img alt="Forks badge" src="https://img.shields.io/github/forks/django/django.svg" /&gt; &lt;img alt="Issues badge" src="https://img.shields.io/github/issues/django/django.svg" /&gt;&lt;/li&gt;
&lt;li&gt;PyPI&lt;sup id="fnref:How-to-submit-a-package-to-PyPI"&gt;&lt;a class="footnote-ref" href="#fn:How-to-submit-a-package-to-PyPI" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;: &lt;img alt="PyPI download badge" src="https://img.shields.io/pypi/dm/Django.svg" /&gt; &lt;img alt="PyPI version badge" src="https://img.shields.io/pypi/v/Django.svg" /&gt; &lt;img alt="PyPI pyversions badge" src="https://img.shields.io/pypi/pyversions/Django.svg" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过 &lt;a href="http://shields.io/"&gt;Shields.io&lt;/a&gt; 只给出了勋章的示例链接，具体的格式还得靠自己观察……比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://img.shields.io/pypi/dm/Django.svg"&gt;https://img.shields.io/pypi/dm/Django.svg&lt;/a&gt; 的格式是 &lt;code&gt;https://img.shields.io/pypi/dm/{{PACKAGE_NAME}}.svg&lt;/code&gt;，其中 &lt;code&gt;dm&lt;/code&gt; 是 &lt;code&gt;download per month&lt;/code&gt; 的意思。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://img.shields.io/github/stars/badges/shields.svg"&gt;https://img.shields.io/github/stars/badges/shields.svg&lt;/a&gt; 的格式是 &lt;code&gt;https://img.shields.io/github/stars/{{USER_NAME}}/{{REPO_NAME}}.svg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:continuous-integration"&gt;
&lt;p&gt;关于持续集成更详细的介绍可以看看这篇博客：&lt;a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html"&gt;持续集成是什么？&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:continuous-integration" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:How-to-submit-a-package-to-PyPI"&gt;
&lt;p&gt;PyPI 是 Python Package Index 的缩写，通过 &lt;code&gt;pip install&lt;/code&gt; 命令下载的包都必须先上传到这里，具体的操作过程参见博客：&lt;a href="http://peterdowns.com/posts/first-time-with-pypi.html"&gt;How to submit a package to PyPI&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:How-to-submit-a-package-to-PyPI" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="GitHub"></category><category term="non-tech"></category></entry><entry><title>2015 年终小结</title><link href="https://loggerhead.me/posts/2015-nian-zhong-xiao-jie.html" rel="alternate"></link><published>2016-01-29T00:04:33+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2016-01-29:posts/2015-nian-zhong-xiao-jie.html</id><summary type="html">&lt;p&gt;呜。。写小结完全是为了督促自己一把，顺便理一理过去一年自己把时间都花在哪了。就像理财，不怕亏损，就怕花得不明不白。很具体的也没啥好说的，就随便过一过好了。&lt;/p&gt;


&lt;h1 id="_1"&gt;考研&lt;/h1&gt;
&lt;p&gt;花了我大把大把的时间，除了达成了目标以外。最大的收获是把阿宝骗到手了，其次是英语狠狠的补了一把。最不甘心的是，三年的技术和折腾就在这段时间差不多全忘光了。不过，塞翁失马，焉知非福。&lt;/p&gt;
&lt;h1 id="_2"&gt;毕设&lt;/h1&gt;
&lt;p&gt;忙完考研就忙毕设了，总没个消停的时间。毕设老师不是很 push，所以趁这段时间赶紧看了一部分 &lt;a href="http://book.douban.com/subject/1500149/"&gt;Unix 网络编程&lt;/a&gt;，算是把计算机网络这块短板给补了补。后来同组的小伙伴家里出了事，毕设任务量一下多了不少，就花了一段时间做毕设。&lt;/p&gt;
&lt;p&gt;记得有个需求是：客户端将加密后的文件传给服务器，并能从服务器下载，当然用户认证也得有。不过当时时间比较紧，没想清楚应用层该用什么协议，就闷着头做了。后来想想有不少缺陷和可以改进的地方，比如，如果用 HTTP 做上层协议而不是直接用 TCP 能轻松不少。一来是因为 HTTP 成熟且简单，二来是技术风险小，开源库肯定一搜一大把。虽然当时有考虑到这一点，但是因为纯 C 的 HTTP 库要么有不少依赖或者得直接“一条龙”，要么就很久没有维护了、文档少；以及毕设项目本身不算复杂，而且服务器不是重点，最后就简单粗暴的直接用 TCP 了。现在想想真是“Too young, too simple, sometimes naive.”&lt;/p&gt;
&lt;h1 id="_3"&gt;暑假&lt;/h1&gt;
&lt;p&gt;毕设做完后勾起了我造轮子的欲望，于是暑假就花了一些时间写了个“轻量级” HTTP 服务器。这东西倒不是很难实现，用了 libuv 分离开更底层的套接字编程后，剩下的大部分是“体力活”。不过 HTTP 虽然看似简单，但是实际上有很多让具体实现难以“优雅”的地方，比如：缓存引入的状态变化和 HTTP 本身无状态之间的“矛盾”。还有向后兼容这种蛋疼的事情……都让它不像看上去那么简单。&lt;/p&gt;
&lt;p&gt;后来去了&lt;a href="http://yunba.io/"&gt;云巴&lt;/a&gt;实习了一个月（因为九月份就开学）。期间：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读了部分业务代码&lt;/li&gt;
&lt;li&gt;学了 Erlang&lt;/li&gt;
&lt;li&gt;学了 Ansible&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;认识到自己有几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码读得太少。仔细想想，确实没怎么读过代码&lt;/li&gt;
&lt;li&gt;掌握的技能/技术没有形成系统，泛而不精&lt;/li&gt;
&lt;li&gt;操作系统是短板，面试的时候一眼就被看穿了……&lt;/li&gt;
&lt;li&gt;身体不好。容易感冒，腰和脖子都有些难受&lt;/li&gt;
&lt;li&gt;英语不够好。虽说一般的技术文档没问题，但是稍难一点的文档，还是得集中注意力才能看懂&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="_4"&gt;开学&lt;/h1&gt;
&lt;h2 id="_5"&gt;第一个月&lt;/h2&gt;
&lt;p&gt;在被 Erlang 虐得死去活来以后，对函数式产生了哲学上的兴趣，遂继续折腾了下 Erlang。但是因为非并发场景用起来麻烦，且 gen 之类的 OTP 找不到合适的练习方式，最后还是放弃了。&lt;/p&gt;
&lt;h2 id="_6"&gt;第二个月&lt;/h2&gt;
&lt;p&gt;算法虽然不算短板，但是也不算很好，为了让它更长一点，又开始刷 OJ 题。不过始终停留在 &lt;code&gt;i&lt;/code&gt; 阶段，没有发生 &lt;code&gt;i+1&lt;/code&gt; 的变化。因为总是对函数式念念不忘，就顺便学了久仰大名的 Haskell。总算没白学，了解到很多新奇的东西，编程思维有所提升。抱着深入了解函数式的心态买了本 &lt;a href="http://book.douban.com/subject/1148282/"&gt;计算机程序的构造和解释&lt;/a&gt;。正如豆瓣上的评论所说：“有些书是这样子，你抱着一个目的去读，结果发现它完全写的不是你期待的那些内容，但是却给了你更大的惊喜。” 这本书又简称为 SICP，很难一两句话说清楚它到底讲了些什么，只能说真的是书如其名，千万别误会，里面的内容和硬件无关。暂时只读了前三章，思想很精华，收获不小。&lt;/p&gt;
&lt;h2 id="_7"&gt;接下来..%&amp;amp;$@&lt;/h2&gt;
&lt;p&gt;考试，写作业，考试，做 project ... 忙的不可开交，想清楚了一些事情。看了吴恩达的公开课，发现机器学习挺好玩的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="一切都是兴趣使然" src="https://dn-loggerhead.qbox.me/images/goofysmile.png/webp" /&gt;&lt;/p&gt;</summary><category term="non-tech"></category></entry><entry><title>求 Fibonacci 数列的 N 种算法</title><link href="https://loggerhead.me/posts/qiu-fibonacci-shu-lie-de-n-chong-suan-fa.html" rel="alternate"></link><published>2015-10-28T21:58:40+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2015-10-28:posts/qiu-fibonacci-shu-lie-de-n-chong-suan-fa.html</id><summary type="html">&lt;p&gt;高中学过一个神奇的数列——Fibonacci 数列，它的特点是：除了最初的两个 Fibonacci 数以外，其余的所有 Fibonacci 数都等于前两个 Fibonacci 数之和。表达成数学公式就是：&lt;/p&gt;
&lt;div class="math"&gt;
F_{n}=\begin{cases}
      0               &amp;amp; n=0\\
      1               &amp;amp; n=1\\
      F_{n-1}+F_{n-2} &amp;amp; n\geq 2
      \end{cases}
&lt;/div&gt;
&lt;p&gt;下面是 Fibonacci 数列的头几项（0 是第零项）。&lt;/p&gt;
&lt;div class="math"&gt;0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233...&lt;/div&gt;
&lt;p&gt;同时，Fibonacci 数列也出现在很多计算机相关的书上面，那么我们怎么编程求第 n 个 Fibonacci 数呢？&lt;sup id="fnref:source code"&gt;&lt;a class="footnote-ref" href="#fn:source code" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;


&lt;h1 id="o2n-on"&gt;&lt;span class="math"&gt;O(2^n), O(n)&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;首先，很自然的想法是直接将通项公式“翻译”成代码。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;几乎没什么难度，但是如果你这样就满足了，那只能说实在是 “too young, too simple”。这种算法存在一个很严重的问题——当输入稍微大一点的时候，比如：42，需要运行很久，速度非常慢。&lt;/p&gt;
&lt;p&gt;原因在于，&lt;code&gt;fib1(n-1) + fib1(n-2)&lt;/code&gt; 中的递归导致算法的时间复杂度是指数型的，也就是 &lt;span class="math"&gt;O(2^n)&lt;/span&gt;&lt;sup id="fnref:fib1 time complexity"&gt;&lt;a class="footnote-ref" href="#fn:fib1 time complexity" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;。假设计算 &lt;span class="math"&gt;F_n&lt;/span&gt; 需要 &lt;span class="math"&gt;T(n)&lt;/span&gt; 的运算时间，那么 &lt;span class="math"&gt;T(n)&lt;/span&gt; 等于计算 &lt;span class="math"&gt;F_{n-1}&lt;/span&gt; 和 &lt;span class="math"&gt;F_{n-2}&lt;/span&gt; 的时间加上一个常量 &lt;span class="math"&gt;C&lt;/span&gt;（&lt;code&gt;if&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt; 和 &lt;code&gt;return&lt;/code&gt; 的时间）。&lt;/p&gt;
&lt;div class="math"&gt;T(n)=T(n-1)+T(n-2)+C &amp;lt; 2\times T(n-1) = O(2^n) \qquad n\rightarrow\infty&lt;/div&gt;
&lt;p&gt;再来看 &lt;code&gt;fib1(n)&lt;/code&gt; 的空间复杂度，容易发现递归的最大深度是 n，所以递归形成的隐式栈占用了 &lt;span class="math"&gt;O(n)&lt;/span&gt; 的空间，即空间复杂度为 &lt;span class="math"&gt;O(n)&lt;/span&gt;。如果把递归过程看成一颗树，那么空间复杂度正比于树的高度，时间复杂度正比于树的节点数。&lt;/p&gt;
&lt;p&gt;&lt;img alt="complexity of fib1" src="https://dn-loggerhead.qbox.me/images/fib1.svg" /&gt;&lt;/p&gt;
&lt;h1 id="on-on"&gt;&lt;span class="math"&gt;O(n), O(n)&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;fib1&lt;/code&gt; 进行了很多重复运算，就 &lt;code&gt;fib1(4)&lt;/code&gt; 来说，&lt;code&gt;fib1(2)&lt;/code&gt; 被计算了 2 次。&lt;/p&gt;
&lt;p&gt;&lt;img alt="fib1_4" src="https://dn-loggerhead.qbox.me/images/fib1_4.svg" /&gt;&lt;/p&gt;
&lt;p&gt;发现了这一点后，我们将 &lt;code&gt;fib1&lt;/code&gt; 进行改造，记录下每一个算出来的 &lt;span class="math"&gt;F_n&lt;/span&gt;，避免重复计算，减少运行时间。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fib2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;如图，&lt;code&gt;fib2(4)&lt;/code&gt; 在第一次计算 &lt;code&gt;fib2(2)&lt;/code&gt; 时保存了结果，第二次计算 &lt;code&gt;fib2(2)&lt;/code&gt; 时就不用再递归计算了，而是直接返回 &lt;code&gt;fib2(2)&lt;/code&gt; 的值。&lt;/p&gt;
&lt;p&gt;&lt;img alt="fib2_4" src="https://dn-loggerhead.qbox.me/images/fib2_4.svg" /&gt;&lt;/p&gt;
&lt;p&gt;因为递归的最大深度没变，所以 &lt;code&gt;fib2&lt;/code&gt; 的空间复杂度还是 &lt;span class="math"&gt;O(n)&lt;/span&gt;。但是因为每个子问题只需要计算一次，所以时间复杂度变成了 &lt;span class="math"&gt;O(n)&lt;/span&gt;。&lt;/p&gt;
&lt;div class="math"&gt;T(n)=T(n-1)+T(n-2)+C=T(n-1)+C'+C=O(n) \qquad T(n-2)=C'&lt;/div&gt;
&lt;h1 id="on-o1"&gt;&lt;span class="math"&gt;O(n), O(1)&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;仔细观察递推公式 &lt;span class="math"&gt;F_{n}=F_{n-1}+F_{n-2}&lt;/span&gt;，发现每次计算 &lt;span class="math"&gt;F_{n}&lt;/span&gt; 都只需要 &lt;span class="math"&gt;F_{n-1}&lt;/span&gt; 和 &lt;span class="math"&gt;F_{n-2}&lt;/span&gt; 两个值。利用这一点，我们可以用两个变量 &lt;code&gt;f2&lt;/code&gt; 和 &lt;code&gt;f1&lt;/code&gt; 分别记录计算 &lt;span class="math"&gt;F_{n}&lt;/span&gt; 所需要的 &lt;span class="math"&gt;F_{n-1}&lt;/span&gt; 和 &lt;span class="math"&gt;F_{n-2}&lt;/span&gt;，而不是 &lt;span class="math"&gt;F_0, F_1, ..., F_n&lt;/span&gt; 的值，将空间复杂度降为 &lt;span class="math"&gt;O(1)&lt;/span&gt;。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;fib3(4)&lt;/code&gt; 的计算过程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="fib3_4" src="https://dn-loggerhead.qbox.me/images/fib3_4.svg" /&gt;&lt;/p&gt;
&lt;h1 id="olog-n-olog-n"&gt;&lt;span class="math"&gt;O(\log n), O(\log n)&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;在介绍 &lt;span class="math"&gt;O(\log n)&lt;/span&gt; 的算法前，我们先考虑一下怎么计算 &lt;span class="math"&gt;2^n&lt;/span&gt;。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pow2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;上述算法在计算 &lt;span class="math"&gt;2^8&lt;/span&gt; 时，&lt;code&gt;pow2(8)&lt;/code&gt; 迭代过程中的 &lt;code&gt;p&lt;/code&gt; 为：&lt;/p&gt;
&lt;div class="math"&gt;1, 2, 4, 8, 16, 32, 64, 128, 256&lt;/div&gt;
&lt;p&gt;也就是做了 8 次运算。但是如果把 &lt;span class="math"&gt;2^8&lt;/span&gt; 看成是 &lt;span class="math"&gt;2^4\times 2^4&lt;/span&gt;，而不是 &lt;span class="math"&gt;2\times 2^7&lt;/span&gt;，那么计算过程就变成了：&lt;/p&gt;
&lt;div class="math"&gt;256=16\times 16, 16=4\times 4, 4=2\times 2&lt;/div&gt;
&lt;p&gt;只需要 3 次运算。把这个想法提炼一下就有了下面这个 &lt;span class="math"&gt;O(\log n)&lt;/span&gt; 的递归式。&lt;/p&gt;
&lt;div class="math"&gt;
2^{n}=\begin{cases}
      2\times 2^{n-1}                       &amp;amp; n=1,3,\cdots\\
      2^{\frac{n}{2}}\times 2^{\frac{n}{2}} &amp;amp; n=2,4,\cdots
      \end{cases}
&lt;/div&gt;
&lt;p&gt;对于给定的 n，递归过程中每次 n 为偶数时，问题规模减半，而 n 为奇数的次数顶多比 n 为偶数的次数多一次。比如，求 &lt;span class="math"&gt;2^{15}&lt;/span&gt; 的递归过程中 n 的变化是：&lt;span class="math"&gt;15, 14, 7, 6, 3, 2, 1&lt;/span&gt;。递归深度和运行时间都正比于问题规模减半的次数，所以时间复杂度和空间复杂度都是 &lt;span class="math"&gt;O(\log n)&lt;/span&gt;。把整个想法用 python 实现就是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pow2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pow2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pow2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;重复平方技术也可以用在求 Fibonacci 数上。&lt;/p&gt;
&lt;h2 id="_1"&gt;矩阵方法&lt;/h2&gt;
&lt;p&gt;把 &lt;code&gt;fib3&lt;/code&gt; 中的变换：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{aligned}
f2' &amp;amp;= f2 + f1 \\
f1' &amp;amp;= f2  
\end{aligned}
&lt;/div&gt;
&lt;p&gt;用矩阵表示就是：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{bmatrix}
f1' &amp;amp; f2'
\end{bmatrix}
=
\begin{bmatrix}
f1 &amp;amp; f2
\end{bmatrix}
\times
\begin{bmatrix}
0 &amp;amp; 1\\
1 &amp;amp; 1
\end{bmatrix}
&lt;/div&gt;
&lt;p&gt;所以 Fibonacci 数列的通项公式可以用矩阵表示为：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{bmatrix}
F_n &amp;amp; F_{n+1}
\end{bmatrix}
=
\begin{bmatrix}
F_0 &amp;amp; F_1
\end{bmatrix}
\times
\begin{bmatrix}
0 &amp;amp; 1\\
1 &amp;amp; 1
\end{bmatrix}^n
&lt;/div&gt;
&lt;p&gt;注意到其中二维矩阵的乘法也可以用重复平方技术大大减少运算时间：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{bmatrix}
0 &amp;amp; 1\\
1 &amp;amp; 1
\end{bmatrix}^n
=
\begin{cases}
\begin{bmatrix}
0 &amp;amp; 1\\
1 &amp;amp; 1
\end{bmatrix}
\times
\begin{bmatrix}
0 &amp;amp; 1\\
1 &amp;amp; 1
\end{bmatrix}^{n-1}         &amp;amp; n=1,3,\cdots\\
\begin{bmatrix}
0 &amp;amp; 1\\
1 &amp;amp; 1
\end{bmatrix}^{\frac{n}{2}}
\times
\begin{bmatrix}
0 &amp;amp; 1\\
1 &amp;amp; 1
\end{bmatrix}^{\frac{n}{2}} &amp;amp; n=2,4,\cdots
\end{cases}
&lt;/div&gt;
&lt;p&gt;其实现为：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_coefs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
             &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
             &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
        &lt;span class="c1"&gt;# `n &amp;amp; 1` == `n % 2 == 1`&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# `mmul` == `Matrix Multiplication`&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;calc_coefs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;coef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_coefs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mmul&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;calc_coefs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_2"&gt;代数方法&lt;/h2&gt;
&lt;p&gt;再看看 &lt;code&gt;fib3&lt;/code&gt; 中的变换：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{aligned}
f2' &amp;amp;= f2 + f1 \\
f1' &amp;amp;= f2 
\end{aligned}
&lt;/div&gt;
&lt;p&gt;如果我们能找到一种方法把两次变换后的 &lt;span class="math"&gt;f2'', f1''&lt;/span&gt; 表示成 &lt;span class="math"&gt;f2, f1&lt;/span&gt;，那不是又能用上重复平方技术了吗？上式等价于下式 &lt;span class="math"&gt;p=0, q=1&lt;/span&gt; 的特殊情况。&lt;/p&gt;
&lt;div class="math"&gt;
\begin{aligned}
f2' &amp;amp;= f1\times q + f2\times q +f2\times p \\
f1' &amp;amp;= f1\times q+f2\times q
\end{aligned}
&lt;/div&gt;
&lt;p&gt;将 &lt;span class="math"&gt;f2''&lt;/span&gt; 和 &lt;span class="math"&gt;f1''&lt;/span&gt; 做代换后发现，当 &lt;span class="math"&gt;p'=p^2+q^2, q'=q^2+2qp&lt;/span&gt; 时，下式成立：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{aligned}
f2'' &amp;amp;= f1'\times q + f2'\times q +f2'\times p    \\
     &amp;amp;= f1\times p' + f2'\times q' + f2'\times p' \\
\\
f1'' &amp;amp;= f1'\times q+f2'\times q                   \\
     &amp;amp;= f1\times q' + f2'\times q                 
\end{aligned}
&lt;/div&gt;
&lt;p&gt;这样就能用算 &lt;span class="math"&gt;2^n&lt;/span&gt; 的方法来实现下面这种算法了。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_3"&gt;性能问题&lt;/h2&gt;
&lt;p&gt;虽然上述算法理论上时间复杂度是 &lt;span class="math"&gt;O(\log n)&lt;/span&gt;，但当 n 较大时，发现它们的运行时间增长不符合对数型的增长。原因在于，当 n 较大时，&lt;span class="math"&gt;F_{\frac{n}{2}}&lt;/span&gt; 是个非常大的整数，而 &lt;strong&gt;大整数的乘法不是 &lt;span class="math"&gt;O(1)&lt;/span&gt; 的&lt;/strong&gt;，所以 &lt;span class="math"&gt;F_{\frac{n}{2}}\times F_{\frac{n}{2}}&lt;/span&gt; 的开销不是个常数。如果读者对这个问题感兴趣，可以自行用 C 语言实现两个大整数（&lt;code&gt;long long&lt;/code&gt; 也无法表示的整数）的乘法。&lt;/p&gt;
&lt;h1 id="_4"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/斐波那契数列"&gt;Wiki: 斐波那契数列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.19"&gt;计算机程序的构造和解释&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:source code"&gt;
&lt;p&gt;文中几种算法的实现可参考我的 &lt;a href="https://gist.github.com/loggerhead/6bf260918d07e10f273b"&gt;Gist&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:source code" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:fib1 time complexity"&gt;
&lt;p&gt;&lt;span class="math"&gt;O(2^n)&lt;/span&gt; 是时间上界，精确的时间界是个无理数的 n 次幂&amp;#160;&lt;a class="footnote-backref" href="#fnref:fib1 time complexity" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="算法"></category><category term="Python"></category></entry><entry><title>绝对安全的量子加密</title><link href="https://loggerhead.me/posts/jue-dui-an-quan-de-liang-zi-jia-mi.html" rel="alternate"></link><published>2015-10-10T19:09:05+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2015-10-10:posts/jue-dui-an-quan-de-liang-zi-jia-mi.html</id><summary type="html">&lt;p&gt;&lt;a href="https://zh.wikipedia.org/wiki/量子密碼學"&gt;量子加密&lt;/a&gt;号称「绝对安全」绝不是哗众取宠，为什么这样说呢？因为与传统加密算法不同，量子加密的 &lt;strong&gt;原理基于物理定律&lt;/strong&gt;，而不是特定数学问题的计算复杂性。因此，无论计算机的运算能力怎么增强，也丝毫不影响量子加密的安全性。本文以 &lt;a href="https://zh.wikipedia.org/wiki/量子密碼學#BB84.E5.8D.8F.E8.AE.AE"&gt;BB84 协议&lt;/a&gt;来介绍量子加密，下文为了方便不对量子加密和 BB84 协议进行区分。&lt;/p&gt;


&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;加密过程&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;前提与假设&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;生成密钥&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;量子加密&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;为啥安全&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_6"&gt;中间人攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;一次一密&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="_1"&gt;加密过程&lt;/h1&gt;
&lt;p&gt;我们先看一个不涉及任何物理定律，但是原理和量子加密相同的加密过程。&lt;/p&gt;
&lt;h2 id="_2"&gt;前提与假设&lt;/h2&gt;
&lt;p&gt;假设存在两个函数：&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;×&lt;/code&gt;，和一些值：0、1、→、↑、↖ 和 ↗。它们的运算满足：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;→&lt;/td&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;×&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;↖&lt;/td&gt;
&lt;td&gt;↗&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;→&lt;/th&gt;
&lt;th&gt;↑&lt;/th&gt;
&lt;th&gt;↖&lt;/th&gt;
&lt;th&gt;↗&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;→&lt;/td&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;×&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;↖&lt;/td&gt;
&lt;td&gt;↗&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以 &lt;code&gt;+&lt;/code&gt; 函数为例，不难理解：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;+(0)&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;+(1)&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;+(→)&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;+(↑)&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;td&gt;→&lt;/td&gt;
&lt;td&gt;→&lt;/td&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;唯一特殊的地方在于 &lt;code&gt;+(↖)&lt;/code&gt; 和 &lt;code&gt;+(↗)&lt;/code&gt; 是从 ↖ 或 ↗ 中随机挑一个作为运算结果，即产生 &lt;code&gt;+(↖)=↖&lt;/code&gt; 或 &lt;code&gt;+(↖)=↗&lt;/code&gt; 的可能性一样大，都为 &lt;span class="math"&gt;\frac{1}{2}&lt;/span&gt;。注意，这里的随机 &lt;em&gt;不是传统计算机中的伪随机，而是真随机&lt;/em&gt;。&lt;/p&gt;
&lt;h2 id="_3"&gt;生成密钥&lt;/h2&gt;
&lt;p&gt;假设 Alice 和 Bob 要进行通信，整个加密过程如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Quantum Cryptography" src="https://dn-loggerhead.qbox.me/images/quantum_cryptography.png" /&gt;&lt;/p&gt;
&lt;p&gt;Alice 随机产生一个数（0 或 1），再随机选择一个函数 &lt;code&gt;+&lt;/code&gt; 或 &lt;code&gt;×&lt;/code&gt; 进行运算。比如：Alice 随机产生的第一个数为 1，随机选择的函数为 &lt;code&gt;+&lt;/code&gt;，那么运算结果为 &lt;code&gt;+(1)=→&lt;/code&gt;。此过程会重复多次，产生一系列 →、↑、↖ 或 ↗，随后 Alice 将这些运算结果传送给 Bob。&lt;/p&gt;
&lt;table&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td class="thead"&gt;Alice 产生的随机数&lt;/td&gt; 
        &lt;td&gt;1&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="thead"&gt;Alice 随机选择的函数&lt;/td&gt; 
        &lt;td&gt;+&lt;/td&gt; &lt;td&gt;×&lt;/td&gt; &lt;td&gt;×&lt;/td&gt; &lt;td&gt;×&lt;/td&gt; &lt;td&gt;×&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;×&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;×&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="thead"&gt;Alice 发送的运算结果&lt;/td&gt; 
        &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↖&lt;/td&gt; &lt;td&gt;↖&lt;/td&gt; &lt;td&gt;↗&lt;/td&gt; &lt;td&gt;↖&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;↖&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;↗&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Bob 在接收到 Alice 发送的一系列 →、↑、↖ 或 ↗ 值后，对每个值随机选择 &lt;code&gt;+&lt;/code&gt; 或 &lt;code&gt;×&lt;/code&gt; 函数进行运算。此时，Bob 得到了一系列运算结果，然后 Bob 根据 &lt;code&gt;+(1)=→, ×(1)=↖&lt;/code&gt; 等运算规则反推 Alice 发送的随机数。注意，因为进行了随机选择，所以 Bob 与 Alice 的运算结果并不一定相等，但是 Bob 并不在乎这一点。&lt;/p&gt;
&lt;table&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td class="thead"&gt;Bob 接收到的运算结果&lt;/td&gt; 
        &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↖&lt;/td&gt; &lt;td&gt;↖&lt;/td&gt; &lt;td&gt;↗&lt;/td&gt; &lt;td&gt;↖&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;↖&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;↗&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="thead"&gt;Bob 随机选择的函数&lt;/td&gt; 
        &lt;td&gt;+&lt;/td&gt; &lt;td&gt;×&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;×&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="thead"&gt;Bob 得到的运算结果&lt;/td&gt; 
        &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↖&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;↖&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;→&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="thead"&gt;Bob 认为 Alice 发送的随机数&lt;/td&gt; 
        &lt;td&gt;1&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;接下来，Bob 告诉 Alice 自己随机选择了哪些函数。Alice 将其与自己的选择做对比，然后告诉 Bob 是不是选得和她一样。Bob 收到 Alice 的回答后，找到那些和 Alice 相同的函数，将通过它们推断出的随机数作为加密用的密钥，也就是 &lt;code&gt;11100&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="compare results" src="https://dn-loggerhead.qbox.me/images/alice_and_bob_compare_results.png" /&gt;&lt;/p&gt;
&lt;h2 id="_4"&gt;量子加密&lt;/h2&gt;
&lt;p&gt;量子力学假设光子（光子是一种量子）有四种偏振方向：↑、→、↗ 和 ↖，它们都可以通过某种装置产生。而在经过直线基 &lt;code&gt;+&lt;/code&gt; 或对角基 &lt;code&gt;×&lt;/code&gt; 时，它们既有可能保持不变，也有可能随机变成一种偏振方向。比如：偏振光子 → 的在经过直线基 &lt;code&gt;+&lt;/code&gt; 时保持不变，还是 →，而在经过对角基 &lt;code&gt;×&lt;/code&gt; 后则随机的变成了 ↗ 或 ↖。同时，基 &lt;code&gt;+&lt;/code&gt; 和 &lt;code&gt;×&lt;/code&gt; 也可以用来制备量子状态，比如：基 &lt;code&gt;+&lt;/code&gt; 将比特 0 制备成 ↑，把比特 1 制备成 →。&lt;/p&gt;
&lt;p&gt;&lt;img alt="光的偏振" src="https://dn-loggerhead.qbox.me/images/光的偏振.png" /&gt;&lt;/p&gt;
&lt;p&gt;稍加思考就会发现，上述理论不就是我们的&lt;a href="#_2"&gt;前提与假设&lt;/a&gt;吗？我们将之前提到的函数、运算等等全部替换成相应的物理过程，就得到了所谓的量子加密。&lt;/p&gt;
&lt;h1 id="_5"&gt;为啥安全&lt;/h1&gt;
&lt;p&gt;相信看懂上述加密过程并不困难，那么为什么说量子加密绝对安全呢？我们首先得了解两个定律：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/不确定性原理"&gt;不确定性原理&lt;/a&gt;：任何粒子都不能被精确地测到状态，任何测量都会影响到粒子的原先状态&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/不可克隆原理"&gt;不可克隆定理&lt;/a&gt;：没有任何办法能够复制一个未知的量子态，而不改变量子态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_6"&gt;中间人攻击&lt;/h2&gt;
&lt;p&gt;如果 Eve 想要窃听 Alice 发给 Bob 的光子，因为不可克隆定理，所以 Eve 只能查看 Alice 发给 Bob 的光子，而无法复制一个进行查看。同时，因为不确定性原理，并且由于 Eve 不知道 Alice 选择的测量基（只有 Alice 自己知道），所以 Eve 只能像 Bob 那样随机选择基进行测量。那么就有 &lt;span class="math"&gt;\frac{1}{2}&lt;/span&gt; 的概率改变光子的状态。例如：Eve 用基 &lt;code&gt;×&lt;/code&gt; 测量偏振光子 ↑ 后，偏振方向变成了 ↖。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Eve eavesdrop photon" src="https://dn-loggerhead.qbox.me/images/eavesdrop_photon.png" /&gt;&lt;/p&gt;
&lt;p&gt;因为单个光子几乎没有包含任何有用信息，所以如果 Eve 想要窃听 Alice 与 Bob 的通信，势必会测量多个光子。假设 Eve 窃听过程中光子的变化如下表所示：&lt;/p&gt;
&lt;table&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td class="thead"&gt;Alice 发送的光子&lt;/td&gt; 
        &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↖&lt;/td&gt; &lt;td&gt;↖&lt;/td&gt; &lt;td&gt;↗&lt;/td&gt; &lt;td&gt;↖&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;↖&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;↗&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="thead"&gt;Eve 随机选择的测量基&lt;/td&gt; 
        &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="thead"&gt;Eve 窃听后的光子&lt;/td&gt; 
        &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;→&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Bob 接收到 Eve 窃听后发生改变的光子，假设他选择的测量基和之前一样，那么可能得到：&lt;/p&gt;
&lt;table&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td class="thead"&gt;Bob 收到的光子&lt;/td&gt; 
        &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;→&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="thead"&gt;Bob 随机选择的基&lt;/td&gt; 
        &lt;td&gt;+&lt;/td&gt; &lt;td&gt;×&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;×&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt; &lt;td&gt;+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="thead"&gt;Bob 测量得到的偏振态&lt;/td&gt; 
        &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↗&lt;/td&gt; &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;↗&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;→&lt;/td&gt; &lt;td&gt;↑&lt;/td&gt; &lt;td&gt;→&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="thead"&gt;Bob 认为 Alice 发送的随机比特&lt;/td&gt; 
        &lt;td&gt;1&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Bob 在对收到光子进行测量后告诉 Alice 自己选择的测量基，而 Alice 在与自己选的测量基进行对比后，回复 Bob 第 1、2、5、6、8 个基和她一样。此时，&lt;strong&gt;Bob 认为密钥应该是 &lt;code&gt;10000&lt;/code&gt;，而 Alice 认为密钥应该是 &lt;code&gt;11100&lt;/code&gt;&lt;/strong&gt;。为了确保没人窃听，Bob 把密钥的第 1、3 位传给 Alice，即 &lt;code&gt;10&lt;/code&gt;，Alice 收到后与自己的 &lt;code&gt;11&lt;/code&gt; 进行对比，发现不一样，于是马上意识到有人进行窃听。&lt;/p&gt;
&lt;p&gt;此处因为传送的光子很少，所以 Eve 有较大的几率窃听而不被发现。不过，只要 Alice 发送的光子足够多，Alice 和 Bob 最后得到的密钥就足够长，这时候窃听后密钥依然相同的概率就非常小，只要 Alice 与 Bob 对比一部分密钥，就能察觉是否有人监听。&lt;/p&gt;
&lt;h2 id="_7"&gt;一次一密&lt;/h2&gt;
&lt;p&gt;但是如果 Eve 不窃听光子，而是等 Alice 与 Bob 形成密钥后进行破解，Alice 与 Bob 应该如何应对呢？&lt;/p&gt;
&lt;p&gt;有一个办法是&lt;a href="https://zh.wikipedia.org/wiki/一次性密碼本"&gt;一次一密&lt;/a&gt;，也就是每次传输都使用新的密钥，且保证密钥与明文等长或者更长。采用这种方法获得的密文具有&lt;a href="https://zh.wikipedia.org/wiki/完善保密性"&gt;完善保密性&lt;/a&gt;，密文不会透露任何与明文有关的信息，从而保证了「绝对安全」。&lt;/p&gt;
&lt;h1 id="_8"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/量子密碼學"&gt;量子密碼學&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ftlin.sam.pccu.edu.tw/QuantumLab/Cryptography/BB84_Intro.htm"&gt;BB84 量子密鑰協議的說明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;视频：&lt;a href="https://www.youtube.com/watch?v=UVzRbU6y7Ks"&gt;The BB84 Protocol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="量子加密"></category><category term="加密算法"></category></entry><entry><title>Haskell 快速入门</title><link href="https://loggerhead.me/posts/haskell-kuai-su-ru-men.html" rel="alternate"></link><published>2015-10-01T21:35:00+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2015-10-01:posts/haskell-kuai-su-ru-men.html</id><summary type="html">&lt;p&gt;当你开始接触函数式的时候，经常能看到 Haskell 的身影。那么 Haskell 究竟具有什么特点，让众多程序员为之倾倒？百闻不如一见，看几个例子你就懂了：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- 从 1 到负无穷的列表&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                                        
&lt;span class="c1"&gt;-- 斐波那契数列&lt;/span&gt;
&lt;span class="nf"&gt;fibs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="n"&gt;zipWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;fibs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="n"&gt;fibs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;-- 快速排序&lt;/span&gt;
&lt;span class="nf"&gt;quicksort&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;  
&lt;span class="nf"&gt;quicksort&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quicksort&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quicksort&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;-- 将 `*2` 和 `+3` 分别作用于列表&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;-- [2,4,6,4,5,6]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;通过这几个例子，可以看出 Haskell 表达能力极强。这是因为 Haskell 是一门支持 &lt;em&gt;惰性求值&lt;/em&gt;、&lt;em&gt;模式匹配&lt;/em&gt;、&lt;em&gt;列表解析&lt;/em&gt;、&lt;em&gt;类型类&lt;/em&gt; 和 &lt;em&gt;类型推断&lt;/em&gt; 的 &lt;em&gt;强静态类型&lt;/em&gt; &amp;amp;&amp;amp; &lt;a href="https://en.wikipedia.org/wiki/Functional_programming"&gt;纯函数式&lt;/a&gt; 语言。&lt;/p&gt;
&lt;p&gt;本文主要介绍 Haskell 的语法，并不会对函数式或 Haskell 的特性进行说明。如果曾经了解过函数式语言，本文可以作为语法简介来读。如果从未接触过函数式，那么你需要 &lt;strong&gt;熟悉至少一门语言&lt;/strong&gt;，并辅以适量的&lt;a href="https://www.hackerrank.com/domains/fp/intro"&gt;习题&lt;/a&gt;才可能入门。&lt;/p&gt;


&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;环境&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;编译与运行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;语法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_5"&gt;注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;表达式&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_7"&gt;数学运算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;布尔运算&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#if"&gt;if 表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#let"&gt;let 语句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;函数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_11"&gt;匿名函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;常用函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;模式匹配&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guards"&gt;Guards（断言）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_14"&gt;. 操作符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_15"&gt;$ 函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#where"&gt;where 语句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#case"&gt;case 表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#partial-application"&gt;Partial application（偏函数）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#typeclass"&gt;类型与 Typeclass&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_16"&gt;类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#typeclass_1"&gt;Typeclass (类型类)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_17"&gt;其他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_18"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="_1"&gt;环境&lt;/h1&gt;
&lt;h2 id="_2"&gt;安装&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Linux&lt;/span&gt;
sudo apt-get install haskell-platform
&lt;span class="c1"&gt;# OSX&lt;/span&gt;
brew install ghc cabal-install
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_3"&gt;编译与运行&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 交互式解释器&lt;/span&gt;
ghci
&lt;span class="c1"&gt;# 编译生成二进制可执行文件&lt;/span&gt;
ghc --make test.hs
&lt;span class="c1"&gt;# 运行 `test.hs`（不需要编译）&lt;/span&gt;
runghc test.hs
&lt;span class="c1"&gt;# `runghc` 的别名&lt;/span&gt;
runhaskell test.hs
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1 id="_4"&gt;语法&lt;/h1&gt;
&lt;h2 id="_5"&gt;注释&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- 单行注释&lt;/span&gt;
&lt;span class="cm"&gt;{- &lt;/span&gt;
&lt;span class="cm"&gt;被 `{-` 和 `-}` 括起来的是多行注释&lt;/span&gt;
&lt;span class="cm"&gt;-}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_6"&gt;表达式&lt;/h2&gt;
&lt;h3 id="_7"&gt;数学运算&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;      &lt;span class="c1"&gt;-- 12&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;      &lt;span class="c1"&gt;-- -8&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;      &lt;span class="c1"&gt;-- 20&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;      &lt;span class="c1"&gt;-- 0.2&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="c1"&gt;-- 0&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="c1"&gt;-- 2&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;      &lt;span class="c1"&gt;-- 1024&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="_8"&gt;布尔运算&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;not&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;         &lt;span class="c1"&gt;-- 非&lt;/span&gt;
&lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;    &lt;span class="c1"&gt;-- 与&lt;/span&gt;
&lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;    &lt;span class="c1"&gt;-- 或&lt;/span&gt;

&lt;span class="mi"&gt;12345&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;54321&lt;/span&gt;   &lt;span class="c1"&gt;-- 不等于&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;   &lt;span class="c1"&gt;-- True       &lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;   &lt;span class="c1"&gt;-- True&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;-- True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;注意：只有布尔值能进行布尔运算，所以类似 &lt;code&gt;0 || 1&lt;/code&gt; 的表达式会报错。&lt;/p&gt;
&lt;h2 id="_9"&gt;列表&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- 列表中元素的类型相同&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;-- 将 1 添加到列表 [2, 3] 的头部，时间复杂度为 O(1)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;-- 从 1 到 3 的列表，实际上是 `1:2:3:[]` 的语法糖&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;-- 小写字母。字符串实际上是字符列表，即 `[Char]`&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;          &lt;span class="c1"&gt;-- &amp;quot;abcdefghijklmnopqrstuvwxyz&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;-- 根据头两个数生成列表&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;          &lt;span class="c1"&gt;-- [1,4,7,10]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;          &lt;span class="c1"&gt;-- [1,4,7,10]&lt;/span&gt;
&lt;span class="c1"&gt;-- 无穷列表&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;               &lt;span class="c1"&gt;-- 1 到正无穷&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;            &lt;span class="c1"&gt;-- 1 到负无穷&lt;/span&gt;

&lt;span class="c1"&gt;-- 比较两个列表。挨个元素比较大小，直到确定大小关系，时间复杂度为 O(n)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;-- 合并两个列表。挨个将第一个列表的元素添加到第二个列表中，时间复杂度为 O(n)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;-- `list !! i` 表示取出列表 `list` 中下标为 `i` 的元素，下标从 0 开始&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;

&lt;span class="c1"&gt;-- `[2*x | x &amp;lt;- l]` 产生了一个新列表，它的元素由列表 `l` 中的元素进行运算 `2*x` 得到&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                         &lt;span class="c1"&gt;-- [2,4]&lt;/span&gt;
&lt;span class="c1"&gt;-- 对偶数计算 `2*x`&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                         &lt;span class="c1"&gt;-- [4,8,12,16]&lt;/span&gt;
&lt;span class="c1"&gt;-- 计算与原点的距离&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)]]&lt;/span&gt;    &lt;span class="c1"&gt;-- [1.4142135623730951,13.0,5.0]&lt;/span&gt;
&lt;span class="c1"&gt;-- 计算笛卡尔积&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                         &lt;span class="c1"&gt;-- [(1,3),(1,4),(2,3),(2,4)]&lt;/span&gt;
&lt;span class="c1"&gt;-- 筛选&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)]]&lt;/span&gt;                   &lt;span class="c1"&gt;-- [4]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="if"&gt;if 表达式&lt;/h2&gt;
&lt;p&gt;与其他语言的 if 不同，Haskell 的 if 是表达式，&lt;em&gt;有返回值&lt;/em&gt;，所以 &lt;strong&gt;必须有 else&lt;/strong&gt;。下面是几个例子：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;good&amp;quot;&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;WTF?!&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="let"&gt;let 语句&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;let&lt;/code&gt; 将表达式或值绑定到变量，例如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="nf"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;let&lt;/code&gt; 有 &lt;code&gt;let ...&lt;/code&gt; 和 &lt;code&gt;let ... in ...&lt;/code&gt; 两种形式。前者只能出现在 &lt;code&gt;do&lt;/code&gt; 或列表解析中 &lt;code&gt;|&lt;/code&gt; 的后面，后者在任何表达式能够存在的地方都可以出现。例如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- 出现在 `do` 中&lt;/span&gt;
&lt;span class="kr"&gt;do&lt;/span&gt; &lt;span class="n"&gt;statements&lt;/span&gt;
   &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expr1&lt;/span&gt;
       &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expr2&lt;/span&gt;
   &lt;span class="n"&gt;statements&lt;/span&gt;

&lt;span class="c1"&gt;-- 出现在列表解析中&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                 &lt;span class="c1"&gt;-- [(1,2),(2,4)]&lt;/span&gt;

&lt;span class="c1"&gt;-- 作为表达式&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;                     &lt;span class="c1"&gt;-- 6&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;-- [(1,2),(2,6)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_10"&gt;函数&lt;/h2&gt;
&lt;p&gt;函数的语法形式如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;do_something_with_args&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Haskell 的函数有几个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数参数之间用空格隔开&lt;/li&gt;
&lt;li&gt;任何函数都有返回值&lt;/li&gt;
&lt;li&gt;函数名不一定要是字母，例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;
&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;pp&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;succ&lt;/span&gt;

&lt;span class="nf"&gt;pp&amp;#39;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;                   &lt;span class="c1"&gt;-- 3&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;                   &lt;span class="c1"&gt;-- 1&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;       &lt;span class="c1"&gt;-- &amp;quot;helloworld&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="_11"&gt;匿名函数&lt;/h3&gt;
&lt;p&gt;匿名函数是没有名字的函数，它符合&lt;a href="https://zh.wikipedia.org/wiki/Λ演算"&gt;λ演算&lt;/a&gt;，其语法如下。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;do_something_with_args&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;也许因为 &lt;code&gt;\&lt;/code&gt; 看起来像 λ，所以被用来定义匿名函数吧。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;                                           &lt;span class="c1"&gt;-- 8&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;is_odd&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;is_odd&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c1"&gt;-- [True,False,True,False,True]&lt;/span&gt;
&lt;span class="nf"&gt;foldl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                          &lt;span class="c1"&gt;-- 12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="_12"&gt;常用函数&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- 类似于 `i++`&lt;/span&gt;
&lt;span class="nf"&gt;succ&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;                          &lt;span class="c1"&gt;-- 3&lt;/span&gt;

&lt;span class="c1"&gt;-- 取出元组第一个元素&lt;/span&gt;
&lt;span class="nf"&gt;fst&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;-- &amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;span class="nf"&gt;snd&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;-- &amp;quot;world&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;head&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                     &lt;span class="c1"&gt;-- 1&lt;/span&gt;
&lt;span class="nf"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                     &lt;span class="c1"&gt;-- [2,3,4,5]&lt;/span&gt;
&lt;span class="nf"&gt;last&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                     &lt;span class="c1"&gt;-- 5&lt;/span&gt;
&lt;span class="c1"&gt;-- 丢弃最后一个元素形成的列表&lt;/span&gt;
&lt;span class="nf"&gt;init&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                     &lt;span class="c1"&gt;-- [1,2,3,4]&lt;/span&gt;

&lt;span class="nf"&gt;length&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                   &lt;span class="c1"&gt;-- 5&lt;/span&gt;
&lt;span class="c1"&gt;-- 检查列表是否为空&lt;/span&gt;
&lt;span class="nf"&gt;null&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;                         &lt;span class="c1"&gt;-- True&lt;/span&gt;
&lt;span class="c1"&gt;-- 检查列表中是否存在元素 9&lt;/span&gt;
&lt;span class="nf"&gt;elem&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                   &lt;span class="c1"&gt;-- False&lt;/span&gt;

&lt;span class="c1"&gt;-- 反转列表&lt;/span&gt;
&lt;span class="nf"&gt;reverse&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                  &lt;span class="c1"&gt;-- [5,4,3,2,1]&lt;/span&gt;
&lt;span class="c1"&gt;-- 取出列表的前 5 个元素组成新列表&lt;/span&gt;
&lt;span class="nf"&gt;take&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                    &lt;span class="c1"&gt;-- [1,2,3,4,5]&lt;/span&gt;
&lt;span class="c1"&gt;-- 丢弃列表的前 5 个元素组成新列表&lt;/span&gt;
&lt;span class="nf"&gt;drop&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                   &lt;span class="c1"&gt;-- [6,7,8,9]&lt;/span&gt;
&lt;span class="c1"&gt;-- 生成具有 5 个重复元素 &amp;#39;a&amp;#39; 的新列表&lt;/span&gt;
&lt;span class="nf"&gt;replicate&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;                 &lt;span class="c1"&gt;-- &amp;quot;aaaaa&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                      &lt;span class="c1"&gt;-- 15&lt;/span&gt;
&lt;span class="c1"&gt;-- 1*2*3*4*5&lt;/span&gt;
&lt;span class="nf"&gt;product&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                  &lt;span class="c1"&gt;-- 120&lt;/span&gt;
&lt;span class="nf"&gt;maximum&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                  &lt;span class="c1"&gt;-- 5&lt;/span&gt;
&lt;span class="nf"&gt;minimum&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                  &lt;span class="c1"&gt;-- 1&lt;/span&gt;

&lt;span class="c1"&gt;-- `foldl f acc list` 相当于 `foreach x in list do acc = f(acc, x)`&lt;/span&gt;
&lt;span class="nf"&gt;foldl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;              &lt;span class="c1"&gt;-- sum [1..5]&lt;/span&gt;
&lt;span class="nf"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;              &lt;span class="c1"&gt;-- maximum [1..5]&lt;/span&gt;
&lt;span class="c1"&gt;-- `foldr` 与 `foldl` 类似，只不过是从右到左遍历列表&lt;/span&gt;
&lt;span class="nf"&gt;foldr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;              &lt;span class="c1"&gt;-- 3&lt;/span&gt;
&lt;span class="nf"&gt;foldl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;              &lt;span class="c1"&gt;-- -15&lt;/span&gt;
&lt;span class="c1"&gt;-- `map f list` 相当于 `[f(x) | x &amp;lt;- list]`&lt;/span&gt;
&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="n"&gt;succ&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                 &lt;span class="c1"&gt;-- [succ x | x &amp;lt;- [1..5]]&lt;/span&gt;
&lt;span class="c1"&gt;-- 过滤掉不满足 `x &amp;gt; 0` 的元素&lt;/span&gt;
&lt;span class="nf"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;            &lt;span class="c1"&gt;-- [1,2,3,4,5]&lt;/span&gt;
&lt;span class="c1"&gt;-- `zip a b` 将列表 `a`、`b` 合并成新列表 `c`，其中 `c !! i == (a !! i, b !! i)`&lt;/span&gt;
&lt;span class="nf"&gt;zip&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;            &lt;span class="c1"&gt;-- [(1,2),(3,4)]&lt;/span&gt;
&lt;span class="c1"&gt;-- `zipWith f a b` 将列表 `a`、`b` 合并成新列表 `c`，其中 `c !! i == f (a !! i) (b !! i)`&lt;/span&gt;
&lt;span class="nf"&gt;zipWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;-- [3,7]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="_13"&gt;模式匹配&lt;/h3&gt;
&lt;p&gt;当定义函数时，可以为不同的模式定义不同的函数体。那到底什么是模式呢？我们先看一个例子感受一下。&lt;/p&gt;
&lt;p&gt;新建文件 &lt;code&gt;test.hs&lt;/code&gt;，输入下面的代码，保存后在命令行输入 &lt;code&gt;runhaskell test.hs&lt;/code&gt; 运行。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;fibo&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nf"&gt;fibo&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nf"&gt;fibo&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fibo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fibo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fibo&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;当调用 &lt;code&gt;fibo 2&lt;/code&gt; 时，Haskell 会从上到下依次尝试进行模式匹配。先尝试 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;1&lt;/code&gt;，发现与参数 &lt;code&gt;2&lt;/code&gt; 不匹配，直到尝试最后一个模式时，发现匹配变量 &lt;code&gt;n&lt;/code&gt;，所以执行 &lt;code&gt;fibo n&lt;/code&gt; 对应的函数体。&lt;/p&gt;
&lt;p&gt;模式匹配不仅是可以对数字进行匹配，还可以对列表和元组等进行匹配，例如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- 匹配空列表&lt;/span&gt;
&lt;span class="nf"&gt;first&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
&lt;span class="c1"&gt;-- `(x:[])` 匹配列表 `[x]`。在模式中出现的变量可以直接使用，表示匹配到的值&lt;/span&gt;
&lt;span class="nf"&gt;first&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:[]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;LAST&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;=&amp;gt; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="c1"&gt;-- `@` 前面的 `all` 表示整个列表。好处是当需要使用列表时，不需要通过 `x:xs` 再生成一次&lt;/span&gt;
&lt;span class="nf"&gt;first&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;=&amp;gt; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;注意，不能在模式匹配中使用 &lt;code&gt;++&lt;/code&gt;，因为匹配 &lt;code&gt;(xs ++ ys)&lt;/code&gt; 可能导致二义性。比如：&lt;code&gt;[1,2,3]&lt;/code&gt; 可以是 &lt;code&gt;([1] ++ [2,3])&lt;/code&gt;，也可以是 &lt;code&gt;([1,2] ++ [3])&lt;/code&gt;，鬼知道匹配哪一个！&lt;/p&gt;
&lt;h3 id="guards"&gt;Guards（断言）&lt;/h3&gt;
&lt;p&gt;断言类似于 C 语言中的 &lt;code&gt;switch&lt;/code&gt;，它会对每一个断言求值，直到遇到 &lt;code&gt;True&lt;/code&gt;，再执行所对应的逻辑。例如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;phase&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; 
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Fire&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Sublime&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Wisdom&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phase&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;phase 22&lt;/code&gt; 调用会先检查 &lt;code&gt;22 &amp;lt;= 18&lt;/code&gt;，发现为 &lt;code&gt;False&lt;/code&gt;，接着检查下一个断言 &lt;code&gt;22 &amp;lt;= 30&lt;/code&gt;，为 &lt;code&gt;True&lt;/code&gt;，于是执行 &lt;code&gt;age &amp;lt;= 30&lt;/code&gt; 后面的代码。&lt;/p&gt;
&lt;p&gt;断言中出现的 &lt;code&gt;otherwise&lt;/code&gt; 类似于 &lt;code&gt;switch&lt;/code&gt; 中的 &lt;code&gt;default&lt;/code&gt;，如果 &lt;code&gt;otherwise&lt;/code&gt; 前面的所有断言都为 &lt;code&gt;False&lt;/code&gt;，那么执行 &lt;code&gt;otherwise&lt;/code&gt; 后面的逻辑。&lt;/p&gt;
&lt;h3 id="_14"&gt;&lt;code&gt;.&lt;/code&gt; 操作符&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt; 是一个函数组合操作符。功能类似于 Unix 中的管道符 &lt;code&gt;|&lt;/code&gt;，它会将前一个函数的输出作为后一个函数的输入。先看一个例子：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;succ&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;         &lt;span class="c1"&gt;-- 16&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;.&lt;/code&gt; 将 &lt;code&gt;succ&lt;/code&gt; 和 &lt;code&gt;sum&lt;/code&gt; 组合到一起，形成一个新函数 &lt;code&gt;succ . sum&lt;/code&gt;，然后将 &lt;code&gt;[1..5]&lt;/code&gt; 作为参数调用这个函数。等价于 &lt;code&gt;succ (sum [1..5])&lt;/code&gt;。和&lt;a href="https://www.mathsisfun.com/sets/functions-composition.html"&gt;数学&lt;/a&gt;上的 &lt;code&gt;f∘g (x) &amp;lt;=&amp;gt; f(g(x))&lt;/code&gt; 概念一样。这里不多作介绍，如果感兴趣，可以看看 &lt;a href="https://stackoverflow.com/questions/20279306/what-does-f-g-mean-in-haskell#answer-20279307"&gt;StackOverflow 上的回答&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面给出一个比较复杂的例子，帮助理解 &lt;code&gt;.&lt;/code&gt; 操作符。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Char&lt;/span&gt;

&lt;span class="nf"&gt;upper_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;others&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;capitalized&lt;/span&gt; &lt;span class="n"&gt;fst&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;capitalized&lt;/span&gt; &lt;span class="n"&gt;snd&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;others&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;capitalized&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;remains&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;toUpper&lt;/span&gt; &lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="n"&gt;remains&lt;/span&gt;

&lt;span class="nf"&gt;cap_names&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unlines&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;unwords&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;upper_name&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;putStr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cap_names&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;neo loggerhead&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;foo bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;输出是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Neo Loggerhead
Foo Bar
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="_15"&gt;&lt;code&gt;$&lt;/code&gt; 函数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;$&lt;/code&gt; 函数，又被称为 &lt;em&gt;function application&lt;/em&gt;。不管有啥用，我们先看一个例子：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- 等价于 succ (cos (sin 1))&lt;/span&gt;
&lt;span class="nf"&gt;succ&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;其实 &lt;code&gt;$&lt;/code&gt; 只是一个语法糖，它具有最低优先级。可以认为 &lt;code&gt;$&lt;/code&gt; 给随后的语句加了一对括号，即把 &lt;code&gt;$&lt;/code&gt; 替换成 &lt;code&gt;(&lt;/code&gt;，并在最右边加上了 &lt;code&gt;)&lt;/code&gt;。其优点是：当函数调用很长时，避免了产生一堆影响可读性的括号。&lt;/p&gt;
&lt;h3 id="where"&gt;where 语句&lt;/h3&gt;
&lt;p&gt;同样，话不多说，先看一个计算 BMI&lt;sup id="fnref:bmi"&gt;&lt;a class="footnote-ref" href="#fn:bmi" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; 的函数：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;bmi&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;  
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mf"&gt;18.5&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You&amp;#39;re underweight, you emo, you!&amp;quot;&lt;/span&gt;  
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mf"&gt;25.0&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You&amp;#39;re supposedly normal. Pffft, I bet you&amp;#39;re ugly!&amp;quot;&lt;/span&gt;  
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mf"&gt;30.0&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You&amp;#39;re fat! Lose some weight, fatty!&amp;quot;&lt;/span&gt;  
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;                   &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You&amp;#39;re a whale, congratulations!&amp;quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;不难看出 &lt;code&gt;weight / height ^ 2&lt;/code&gt; 被重复计算了多次，违背了 DRY 原则&lt;sup id="fnref:DRY"&gt;&lt;a class="footnote-ref" href="#fn:DRY" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;。为了减少重复运算，增加可读性，可以将 &lt;code&gt;bmi&lt;/code&gt; 改写成：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;bmi&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;  
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;skinny&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You&amp;#39;re underweight, you emo, you!&amp;quot;&lt;/span&gt;  
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;normal&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You&amp;#39;re supposedly normal. Pffft, I bet you&amp;#39;re ugly!&amp;quot;&lt;/span&gt;  
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;fat&lt;/span&gt;    &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You&amp;#39;re fat! Lose some weight, fatty!&amp;quot;&lt;/span&gt;  
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;   &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You&amp;#39;re a whale, congratulations!&amp;quot;&lt;/span&gt; 
    &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;skinny&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;18.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;25.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;30.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bmi&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt; &lt;span class="mf"&gt;1.75&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;where&lt;/code&gt; 语句与 &lt;code&gt;let&lt;/code&gt; 语句作用类似，都能将值与变量绑定，方便随后的使用，其不同之处包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;where&lt;/code&gt; 中可以使用模式匹配&lt;/li&gt;
&lt;li&gt;&lt;code&gt;where&lt;/code&gt; 中绑定的变量的作用域是整个函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;where&lt;/code&gt; 是语句，不是表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="case"&gt;case 表达式&lt;/h3&gt;
&lt;p&gt;case 表达式和 if 表达式类似，都有返回值。但是 case 还能进行模式匹配。实际上，函数参数中的模式匹配就是 case 表达式的语法糖。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;{-&lt;/span&gt;
&lt;span class="cm"&gt;case expression of pattern -&amp;gt; result  &lt;/span&gt;
&lt;span class="cm"&gt;                   pattern -&amp;gt; result  &lt;/span&gt;
&lt;span class="cm"&gt;                   pattern -&amp;gt; result  &lt;/span&gt;
&lt;span class="cm"&gt;                   ...  &lt;/span&gt;
&lt;span class="cm"&gt;-}&lt;/span&gt;

&lt;span class="nf"&gt;classify&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;newborn&amp;quot;&lt;/span&gt;
                           &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;infant&amp;quot;&lt;/span&gt;
                           &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;toddler&amp;quot;&lt;/span&gt;
                           &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;senior citizen&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;classify&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;注意，模式匹配中的 &lt;code&gt;_&lt;/code&gt; 能匹配任何值。&lt;/p&gt;
&lt;h3 id="partial-application"&gt;Partial application（偏函数）&lt;/h3&gt;
&lt;p&gt;Haskell 中的所有函数都是 &lt;strong&gt;单参函数&lt;/strong&gt;。多参函数本质上是对单参函数的多次求值，例如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="cm"&gt;{- 等价于&lt;/span&gt;
&lt;span class="cm"&gt;let maxWith2 = max 2&lt;/span&gt;
&lt;span class="cm"&gt;maxWith2 3&lt;/span&gt;
&lt;span class="cm"&gt;-}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;max 2 3&lt;/code&gt; 等价于 &lt;code&gt;(max 2) 3&lt;/code&gt;，&lt;code&gt;max&lt;/code&gt; 接收 &lt;code&gt;2&lt;/code&gt; 作为参数，并返回一个新函数 &lt;code&gt;maxWith2&lt;/code&gt;，接着执行 &lt;code&gt;maxWith2 3&lt;/code&gt; 得到较大值。这样的好处是，我们能创造偏函数&lt;sup id="fnref:Partial_application"&gt;&lt;a class="footnote-ref" href="#fn:Partial_application" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;，而偏函数很多时候用起来超级方便。例如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- 计算两点距离&lt;/span&gt;
&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="c1"&gt;-- 计算到原点距离的偏函数&lt;/span&gt;
&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;distanceToOrigin&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;distanceToOrigin&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- `(&amp;gt; 0)` 等价于 `\x -&amp;gt; x &amp;gt; 0`&lt;/span&gt;
&lt;span class="nf"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;            &lt;span class="c1"&gt;-- [1,2,3,4,5]&lt;/span&gt;
&lt;span class="c1"&gt;-- `(max 0)` 等价于 `\x -&amp;gt; max 0 x`&lt;/span&gt;
&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;             &lt;span class="c1"&gt;-- [0,0,0,0,0,0,1,2,3,4,5]&lt;/span&gt;

&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;add1&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;succ&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="c1"&gt;-- `-1` 必须括起来，否则会被解释为做减法&lt;/span&gt;
&lt;span class="nf"&gt;add1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;-- 等价于 `add1 $ -1`，为什么？ &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="typeclass"&gt;类型与 Typeclass&lt;/h2&gt;
&lt;h3 id="_16"&gt;类型&lt;/h3&gt;
&lt;p&gt;文章一开始就提到了 Haskell 是强静态类型语言，这是因为 Haskell 中的所有东西都有类型。我们可以在 GHCI 中使用 &lt;code&gt;:t anything&lt;/code&gt; 命令查看 &lt;code&gt;anything&lt;/code&gt; 的类型，比如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Prelude&amp;gt; :t (.)
(.) :: (b -&amp;gt; c) -&amp;gt; (a -&amp;gt; b) -&amp;gt; a -&amp;gt; c
Prelude&amp;gt; :t 123
123 :: Num a =&amp;gt; a
Prelude&amp;gt; :t &amp;#39;a&amp;#39;  
&amp;#39;a&amp;#39; :: Char  
Prelude&amp;gt; :t 4 == 5  
4 == 5 :: Bool  
Prelude&amp;gt; :t mod
mod :: Integral a =&amp;gt; a -&amp;gt; a -&amp;gt; a
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;不难发现，&lt;code&gt;::&lt;/code&gt; 前面是表达式，后面是表达式的类型说明，并且 &lt;em&gt;类型都以大写字母开头&lt;/em&gt;。其中，&lt;code&gt;=&amp;gt;&lt;/code&gt; 叫 &lt;em&gt;类约束（class constraint）&lt;/em&gt;，用来指明类型属于哪些 typeclass，&lt;code&gt;a&lt;/code&gt;、&lt;code&gt;b&lt;/code&gt;、&lt;code&gt;c&lt;/code&gt;等出现在类型说明中的小写字母叫 &lt;em&gt;类型变量（type variable）&lt;/em&gt;。我们看个例子：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;mod&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Integral&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;上面的类型说明可以理解为：&lt;code&gt;mod&lt;/code&gt; 函数接收两个同一类型 &lt;code&gt;a&lt;/code&gt; 的参数，返回值也是类型 &lt;code&gt;a&lt;/code&gt;，并且类型 &lt;code&gt;a&lt;/code&gt; 属于 &lt;code&gt;Integral&lt;/code&gt; typeclass。&lt;/p&gt;
&lt;p&gt;常见的类型包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Int&lt;/code&gt;: 有界限的整数。比如：32 位机器的最小 &lt;code&gt;Int&lt;/code&gt; 是 &lt;code&gt;-2147483648&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Integer&lt;/code&gt;: 无界限的整数。可以表达很大很大的整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Float&lt;/code&gt;: 单精度浮点数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Double&lt;/code&gt;: 双精度浮点数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bool&lt;/code&gt;: 布尔类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Char&lt;/code&gt;: 字符类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt;: 空元组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ordering&lt;/code&gt;: 取值为 &lt;code&gt;GT&lt;/code&gt;、&lt;code&gt;LT&lt;/code&gt; 或 &lt;code&gt;EQ&lt;/code&gt;，分别是 &lt;code&gt;greater than&lt;/code&gt;、&lt;code&gt;lesser than&lt;/code&gt; 和 &lt;code&gt;equal&lt;/code&gt; 的缩写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与 C 和 Java 等语言不一样，Haskell 是具有 &lt;em&gt;类型推断&lt;/em&gt; 的 &lt;strong&gt;强&lt;/strong&gt; 静态类型语言。这意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Haskell 会自动推断表达式或函数的类型，所以在定义函数的时候不需要声明类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不会自动进行类型转换&lt;/strong&gt;。因此 &lt;code&gt;Int&lt;/code&gt; 和 &lt;code&gt;Double&lt;/code&gt; 不能直接进行运算，比如：&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Prelude&amp;gt; (1::Int) == (1::Double)

&amp;lt;interactive&amp;gt;:66:14:
    Couldn&amp;#39;t match expected type ‘Int’ with actual type ‘Double’
    In the second argument of ‘(==)’, namely ‘(1 :: Double)’
    In the expression: (1 :: Int) == (1 :: Double)
    In an equation for ‘it’: it = (1 :: Int) == (1 :: Double)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="typeclass_1"&gt;Typeclass (类型类)&lt;/h3&gt;
&lt;p&gt;Typeclass 与常常出现在面向对象中的 &lt;em&gt;接口&lt;/em&gt; 类似。常见 typeclass 如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Num&lt;/code&gt;: 数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Integral&lt;/code&gt;: 整型数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Floating&lt;/code&gt;: 浮点数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Eq&lt;/code&gt;: 能测试相等。属于 &lt;code&gt;Eq&lt;/code&gt; 的类型必须实现 &lt;code&gt;(/=)&lt;/code&gt; 或 &lt;code&gt;(==)&lt;/code&gt; 函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ord&lt;/code&gt;: 能比较顺序。属于 &lt;code&gt;Ord&lt;/code&gt; 的类型必须实现 &lt;code&gt;compare&lt;/code&gt; 或 &lt;code&gt;(&amp;lt;=)&lt;/code&gt; 函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Show&lt;/code&gt;: 能转换成字符串。属于 &lt;code&gt;Show&lt;/code&gt; 的类型必须实现 &lt;code&gt;show&lt;/code&gt; 函数。除了函数以外的所有的类型都属于 &lt;code&gt;Show&lt;/code&gt; 类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Read&lt;/code&gt;: 与 &lt;code&gt;Show&lt;/code&gt; 相反。属于 &lt;code&gt;Read&lt;/code&gt; 的类型必须实现 &lt;code&gt;read&lt;/code&gt; 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如，&lt;code&gt;1 :: Int&lt;/code&gt; 就属于 &lt;code&gt;Num&lt;/code&gt;、&lt;code&gt;Integral&lt;/code&gt;、&lt;code&gt;Eq&lt;/code&gt;、&lt;code&gt;Ord&lt;/code&gt;、&lt;code&gt;Show&lt;/code&gt;。下面给出一些常见的用法：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;show&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;                &lt;span class="c1"&gt;-- &amp;quot;123&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;-- 类型推断会自动将 `read &amp;quot;2&amp;quot;` 转换成 `read &amp;quot;2&amp;quot; :: Int`&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;            &lt;span class="c1"&gt;-- 3&lt;/span&gt;
&lt;span class="c1"&gt;-- Haskell 不知道该将 `&amp;quot;2&amp;quot;` 转换成 `Int`、`Integer` 还是 `Float`，所以会报错&lt;/span&gt;
&lt;span class="c1"&gt;-- read &amp;quot;2&amp;quot;&lt;/span&gt;

&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;
&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="c1"&gt;-- fromIntegral 将 `Integral` 转换成 `Num`&lt;/span&gt;
&lt;span class="nf"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;      &lt;span class="c1"&gt;-- 2&lt;/span&gt;
&lt;span class="c1"&gt;-- `+` 的类型是 `(+) :: Num a =&amp;gt; a -&amp;gt; a -&amp;gt; a`&lt;/span&gt;
&lt;span class="c1"&gt;-- 类比面向对象中的多态和泛型的概念，想想为什么 `a`、`b` 不能直接相加&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;注意：如果从上下文不能推断出 &lt;code&gt;read&lt;/code&gt; 的返回值是什么类型，一定要 &lt;strong&gt;明确指明类型&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="_17"&gt;其他&lt;/h2&gt;
&lt;p&gt;下面给出的内容不太容易掌握，不适宜放在快速入门中，如果感兴趣，可以自己看一下 &lt;a href="http://learnyouahaskell.com/chapters"&gt;Learn You a Haskell for Great Good!&lt;/a&gt; &lt;sup id="fnref:HASKELL 趣学指南"&gt;&lt;a class="footnote-ref" href="#fn:HASKELL 趣学指南" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; 的相关章节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://learnyouahaskell.com/modules"&gt;模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learnyouahaskell.com/input-and-output"&gt;输入输出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learnyouahaskell.com/making-our-own-types-and-typeclasses"&gt;类型与类型类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learnyouahaskell.com/functors-applicative-functors-and-monoids"&gt;Functors, Applicative, and Monoids&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_18"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/Haskell"&gt;Wiki: Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learnxinyminutes.com/docs/haskell/"&gt;Learn X in Y minutes: Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learnyouahaskell.com/chapters"&gt;Learn You Some Haskell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:bmi"&gt;
&lt;p&gt;&lt;a href="https://zh.wikipedia.org/wiki/身高體重指數"&gt;身高体重指数（Body Mass Index）&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:bmi" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:DRY"&gt;
&lt;p&gt;意为：&lt;a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself"&gt;Don't repeat yourself&lt;/a&gt;，即尽可能的减少重复的逻辑和计算&amp;#160;&lt;a class="footnote-backref" href="#fnref:DRY" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:Partial_application"&gt;
&lt;p&gt;详见 &lt;a href="https://en.wikipedia.org/wiki/Partial_application"&gt;wiki&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:Partial_application" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:HASKELL 趣学指南"&gt;
&lt;p&gt;英文不好的同学可以看 &lt;a href="http://learnyoua.haskell.sg/content/zh-cn/index.html"&gt;中文版&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:HASKELL 趣学指南" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Haskell"></category><category term="编程语言"></category></entry><entry><title>Erlang 和编码风格--对大多数防御性编码风格的思考</title><link href="https://loggerhead.me/posts/erlang-he-bian-ma-feng-ge-dui-da-duo-shu-fang-yu-xing-bian-ma-feng-ge-de-si-kao.html" rel="alternate"></link><published>2015-09-20T12:09:00+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2015-09-20:posts/erlang-he-bian-ma-feng-ge-dui-da-duo-shu-fang-yu-xing-bian-ma-feng-ge-de-si-kao.html</id><summary type="html">&lt;p&gt;原文：&lt;a href="https://medium.com/@jlouis666/erlang-and-code-style-b5936dceb5e4"&gt;Erlang and code style--Musings on mostly defensive programming styles&lt;/a&gt;&lt;/p&gt;


&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Correct Erlang usage mandates you do not write any kind of defensive code. This is called &lt;em&gt;intentional programming&lt;/em&gt;. You write code for the intentional control flow path which you expect the code to take. And you don’t write any code for the paths which you think are not possible. Furthermore, you don’t write code for data flow which was not the intention of the program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正确的 Erlang 编程方式要求你不写任何防御性代码&lt;sup id="fnref:defensive code"&gt;&lt;a class="footnote-ref" href="#fn:defensive code" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;，即所谓的 &lt;em&gt;意图编程&lt;/em&gt;&lt;sup id="fnref:intentional programming"&gt;&lt;a class="footnote-ref" href="#fn:intentional programming" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;。你给能够抵达意图且会被执行的控制流路径编写代码，并且不对不可能到达的逻辑编写任何代码。而且，你不会为与程序意图无关的数据流编写代码。&lt;/p&gt;
&lt;h1 id="14"&gt;结果证明防御性编程很蠢&lt;sup id="fnref:title1"&gt;&lt;a class="footnote-ref" href="#fn:title1" rel="footnote"&gt;14&lt;/a&gt;&lt;/sup&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;If an Erlang program goes wrong, it crashes. Say we are opening a file. We can &lt;em&gt;guard&lt;/em&gt; the file open call like so:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果 Erlang 程序发生错误，它就崩溃。假如我们要打开一个文件，我们能 &lt;em&gt;断言&lt;/em&gt; 打开文件的调用，像这样：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Fd&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;read_ahead&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;What happens if the file doesn’t exist? Well the process crashes. But note we did not have to write any code for that path. The default in Erlang is to crash when a match isn’t valid. We get a badmatch error with a reason as to why we could not open the file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果文件不存在，会发生什么？进程崩溃。但是请注意，我们不需要写任何代码来做到这一点。当匹配无效的时候，Erlang 的默认行为就是崩溃。我们会获得一个错误匹配的错误，并给出我们不能打开这个文件的原因。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A process crashing is not a problem. The &lt;em&gt;program&lt;/em&gt; is still operating and supervision--An important fault-tolerance concept in Erlang--will make sure that we try again in a little while. Say we have introduced a race condition on the file open, by accident. If it happens rarely, the program would still run, even if the file open fails from time to time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;进程崩溃不是问题，问题是 &lt;em&gt;程序&lt;/em&gt; 会继续操作，监视器（一个在 Erlang 中重要的错误容忍概念）会在一小段时间后再次尝试。假如在打开文件时，我们不小心引入了一个竞争条件。如果这种情况很少发生，程序仍会继续运行，即使打开文件的操作一次又一次的失败。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You will often see code that looks like:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你会经常见到像这样的代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(...),&lt;/span&gt;
&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(...),&lt;/span&gt;
&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;which then asserts that each of these calls went well, making sure code crashes if the control and data flow is not what is expected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它断言所有的调用都会成功，确保控制流和数据流如果不是所期望的，代码就崩溃。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Notice the complete lack of error handling. We don’t write&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意，完全没有错误处理。我们不写这样的代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
    &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Reason&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Reason&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;Nor do we fall into the trap of the Go programming language and write:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也不会落入 Go 语言的圈套中，写出像这样的代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;res2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;because this is also plain silly, tedious and cumbersome to write.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为这同样很蠢，并且写起来又累赘又乏味。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The key is that we have a crash-effect in the Erlang interpreter which we can invoke where the &lt;em&gt;default&lt;/em&gt; is to crash the process if something goes wrong. And have another process clean up. Good Erlang code abuses this fact as much as possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关键在于 Erlang 解释器能使进程崩溃，如果发生错误，它 &lt;em&gt;默认&lt;/em&gt; 让进程崩溃，并且让另一个进程进行清理。漂亮的 Erlang 代码会尽可能的使用这个作用。&lt;/p&gt;
&lt;h1 id="15"&gt;意图？&lt;sup id="fnref:title2"&gt;&lt;a class="footnote-ref" href="#fn:title2" rel="footnote"&gt;15&lt;/a&gt;&lt;/sup&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Note the word intentional. In some cases, we &lt;em&gt;do&lt;/em&gt; expect calls to fail. So we just handle it like everyone else would, but since we can emulate sum-types in Erlang, we can do better than languages with no concept of a sum-type:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意「意图」这个词。在某些情况下，我们 &lt;em&gt;的确&lt;/em&gt; 希望函数调用失败。于是我们像其他所有人一样去处理失败的函数调用，但是因为我们在 Erlang 中能模拟 sum-types&lt;sup id="fnref:sum-types"&gt;&lt;a class="footnote-ref" href="#fn:sum-types" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;，所以我们能比那些没有 sum-type 的语言做得更好：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nn"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Fd&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enoent&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;Here we have written down the intention that the file might not exist. However:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We &lt;em&gt;only&lt;/em&gt; worry about non existence.&lt;/li&gt;
&lt;li&gt;We crash on &lt;em&gt;eaccess&lt;/em&gt; which means an access error due to permissions.&lt;/li&gt;
&lt;li&gt;Likewise for &lt;em&gt;eisdir, enotdir, enospc&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们在上述代码中写下了文件可能不存在的意图。然而：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们 &lt;em&gt;仅仅&lt;/em&gt; 关心文件不存在的情况。&lt;/li&gt;
&lt;li&gt;我们希望在遇到 &lt;em&gt;eaccess&lt;/em&gt; 时崩溃，表示因为权限的关系，发生了访问错误。&lt;/li&gt;
&lt;li&gt;我们希望在遇到 &lt;em&gt;eisdir, enotdir, enospc&lt;/em&gt; 时的行为也和 &lt;em&gt;eaccess&lt;/em&gt; 一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_1"&gt;为什么？&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Leaner code, that’s why.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;精炼的代码，这就是为什么。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We can skip lots of defensive code which often more than halves the code size of projects. There are much less code to maintain so when we refactor, we need to manipulate less code as well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们能减少许多防御性代码，这些防御性代码经常超过项目代码量的一半。所以当我们重构时，需要维护的代码少很多，同时，需要我们掌控的代码也更少。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our code is not littered with things having nothing to do with the “normal” code flow. This makes it far easier to read code and determine what is going on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们的代码不是和“正常”代码流无关的垃圾。这使得代码非常易读，并且非常容易确定发生了什么。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Erlang process crashes gives lots of information when something dies. For a proper OTP process, we get the State of the process before it died and what message was sent to it that triggered the crash. A dump of this is enough in about 50% of all cases and you can reproduce the error just by looking at the crash dump. In effect, this eliminates a lot of silly logging code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当什么东西挂了的时候，Erlang 进程的崩溃提供了很多信息。对一个良好的 OTP 进程，在它挂掉之前，我们会得到进程的状态，也会得到发送给它并导致它崩溃的消息。在 50% 的情况下，这个过程的堆能提供足够的信息，并且仅仅通过观察崩溃进程的堆就能重现错误。事实上，这减少了许多蠢蠢的日志记录代码。&lt;/p&gt;
&lt;h1 id="16"&gt;数据流防御性编程&lt;sup id="fnref:title3"&gt;&lt;a class="footnote-ref" href="#fn:title3" rel="footnote"&gt;16&lt;/a&gt;&lt;/sup&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Another common way of messing up Erlang programs is to mangle incoming data through pattern matching. Stuff like the following:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一种将 Erlang 程序弄成一团糟的常见方法是使用模式匹配把传入的数据弄乱。像下面这样：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="nb"&gt;is_integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;I&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="nb"&gt;is_float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="nb"&gt;is_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list_to_integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;L&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;The function will convert “anything” to an integer. Then you proceed to use it:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个函数会把“任何东西”转换成整数。接着你会使用它：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Anything&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;I&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Anything&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nv"&gt;I&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;The problem here is not with the &lt;strong&gt;process&lt;/strong&gt; function, but with the call-sites of the &lt;strong&gt;process&lt;/strong&gt; function. Each call-site has a different opinion on what data is being passed in this code. This leads to a situation where every subsystem handles conversions like these.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问题不在于 &lt;strong&gt;process&lt;/strong&gt; 函数，而在于对 &lt;strong&gt;process&lt;/strong&gt; 函数的调用。每次调用都得用不同的观点来看待传进这段代码的数据，导致子系统都得像这样对数据进行转换。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are several disguises of this anti-pattern. Here is another smell:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种反模式有几种伪装。下面是另外一种“充满臭味”的代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="nb"&gt;is_binary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;This is stringified programming where all data are pushed into a string and then manually deconstructed at each caller. It leads to a lot of ugly code with little provision for extension later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这叫字符串编程，将所有的数据放入同一个字符串，并且每个调用者都去手动解构该字符串。这种编程方式会产生一大坨丑陋的代码，并且几乎没有扩展性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rather than trying to handle different types, enforce the invariant early on the api:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与其尝试处理不同类型的数据，不如在 API 中尽早的强制数据不可变：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="nb"&gt;is_integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;And then &lt;em&gt;never&lt;/em&gt; test for correctness inside your subsystem. The dialyzer is good at inferring the use of &lt;em&gt;I&lt;/em&gt; as an integer. Littering your code with &lt;strong&gt;is_integer&lt;/strong&gt; tests is not going to buy you anything. If something is wrong in your subsystem, the code will crash, and you can go handle the error.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;并且 &lt;em&gt;绝不要&lt;/em&gt; 在子系统中测试数据的正确性，推断出 &lt;em&gt;I&lt;/em&gt; 作为整数使用是解析器所擅长的工作。代码中杂乱分布的 &lt;strong&gt;is_integer&lt;/strong&gt; 测试不会让你付出任何代价，并且如果在你的子系统中什么东西出错了，它会让你的代码崩溃，然后你就能处理这个错误了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is something to be said about static typing here, which will force you out of this unityped world very easily. In a statically typed language, I could still obtain the same thing, but then I would have to define something along the lines of (* Standard ML code follows *)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里需要谈一谈静态类型，静态类型很容易强迫你脱离单一类型。在静态类型语言中，仍能得到同样的东西，但是我必须定义某些与下面几行类似的东西（* 下面是标准 ML 代码 *）&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;datatype&lt;/span&gt; &lt;span class="kt"&gt;anything&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;INT&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt;
                  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;STRING&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
                  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;REAL&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt; &lt;span class="n"&gt;real&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;and so on. This quickly becomes hard to write pattern matches for, so hence people only defines the &lt;em&gt;anything&lt;/em&gt; type if they really need it. (Gilad Bracha was partially right when he identified this as a run-time check on the value, but what he omitted was the fact that the programmer has the decision to avoid a costly runtime check all the time—come again, Gilad ☺).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或者更多这种东西。为它编写模式匹配的代码很快就变得困难重重，因此如果有人真的需要模式匹配，他就会只定义一个 &lt;em&gt;任意&lt;/em&gt; 类型。（当 Gilad Bracha 把它当做是值的运行时检查时，他只是部分正确，他所忽略的事实是——程序员总是有权避免昂贵的运行时检查。又来了，Gilad ☺）&lt;/p&gt;
&lt;h1 id="undefined"&gt;undefined 的祸害&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Another important smell is that of the &lt;em&gt;undefined&lt;/em&gt; value. The story here is that undefined is often used to program a Option/Maybe monad. That is, we have the type&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一种主要的“充满臭味”的代码是那些使用 &lt;em&gt;undefined&lt;/em&gt; 的代码。这是指 undefined 经常被用来编写可选的或可能的 monad。也就是说，我们有如下的类型&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;type&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;[For the static typists out there: Erlang &lt;em&gt;does&lt;/em&gt; have a type system based on success types for figuring out errors, and the above is one such type definition]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[对于待在那儿的静态类型们：Erlang &lt;em&gt;确实&lt;/em&gt; 有基于成功类型&lt;sup id="fnref:success types"&gt;&lt;a class="footnote-ref" href="#fn:success types" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;的类型系统来找出错误，上面的代码就是这样一种类型定义]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is straightforward to define reflection/reification into an exception-effect for these. Jakob Sievers &lt;code&gt;stdlib2&lt;/code&gt; library already does this, as well as define the monadic helper called &lt;strong&gt;do&lt;/strong&gt; (Though the monad is of the Error-type rather than Option).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给这些静态类型将反射&lt;sup id="fnref:reflection"&gt;&lt;a class="footnote-ref" href="#fn:reflection" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;或具体化定义到一个异常作用中很简单。Jakob Sievers 的 &lt;code&gt;stdlib2&lt;/code&gt; 库已经实现了这一点，并定义了一个叫做 &lt;strong&gt;do&lt;/strong&gt; 的 monadic helper（虽然这个 monad 是错误类型而不是 Option&lt;sup id="fnref:option type"&gt;&lt;a class="footnote-ref" href="#fn:option type" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But I’ve seen:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是我看到了这样的代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;spec&lt;/span&gt; &lt;span class="n"&gt;do_x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;undefined&lt;/span&gt;
  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;
&lt;span class="nf"&gt;do_x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nf"&gt;do_x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nv"&gt;I&lt;/span&gt;&lt;span class="p"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;Which leads to complicated code. You need to be 100% in control of what values can fail and what values can not. Constructions like the above silently passes undefined on. This has its uses--but be wary when you see code like this. The &lt;em&gt;undefined&lt;/em&gt; value is essentially a &lt;em&gt;NULL&lt;/em&gt;. And those were C.A.R Hoare’s billion dollar mistake.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种方式导致代码变得复杂。你需要 100% 的控制哪些值能够失败，哪些不能。与上述结构类似的结构会悄悄的传递 undefined。虽然这种方式有适用之处，但是看到这样的代码的时候要小心。&lt;em&gt;undefined&lt;/em&gt; 本质上是一种 &lt;em&gt;NULL&lt;/em&gt;，而 NULL 又是「C.A.R Hoare 的百万美元错误」&lt;sup id="fnref:C.A.R Hoare’s billion dollar mistake"&gt;&lt;a class="footnote-ref" href="#fn:C.A.R Hoare’s billion dollar mistake" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The problem is that the above code is &lt;em&gt;nullable&lt;/em&gt;. The default in Erlang is that you never have NULL-like values. Introducing them again should be used sparingly. You will have to think long and hard because once a value is nullable, it is up to you to check this all the time. This tend to make code convoluted and complicated. It is better to test such things up front and then leave it out of the main parts of the code base as much as possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问题是上述代码是 &lt;em&gt;类 NULL 的&lt;/em&gt;。Erlang 默认绝不出现类似 NULL 的值，所以应该小心翼翼的再次引入它们。你必须仔细并慎重的考虑要不要引入它们，因为一旦一个值是类 NULL 的，那你就得从始至终的检查它。这种做法很容易让代码变得错综复杂。最好是在一开始就测试这些值，然后让它尽可能的远离代码的主要部分。&lt;/p&gt;
&lt;h1 id="_2"&gt;「开放」数据表示法&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Whenever you have a data structure, there is a set of modules which knows about and operates on that data structure. If there is only a single module, you can emulate a common pattern from Standard ML or OCaml where the concrete data structure representation is abstract for most of the program and only a single module can operate on the abstract type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;无论什么时候，只要有数据结构存在，就一定有一系列模块知道这个数据结构的存在并在它上面进行操作。如果只有一个模块，你可以参照标准 ML 或 OCaml&lt;sup id="fnref:ML_OCaml"&gt;&lt;a class="footnote-ref" href="#fn:ML_OCaml" rel="footnote"&gt;8&lt;/a&gt;&lt;/sup&gt; 模拟一个通用模式，这两种语言的数据结构表达对于大部分程序都是抽象的，并且只存在单一模块能操作这些抽象类型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is not entirely true in Erlang, where anyone can introspect any data. But keeping the illusion is handy for maintainability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Erlang 不完全是这样，任何人都能内省&lt;sup id="fnref:introspect"&gt;&lt;a class="footnote-ref" href="#fn:introspect" rel="footnote"&gt;9&lt;/a&gt;&lt;/sup&gt;到任何数据，但是保持这一点让程序更容易维护。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The more modules that can manipulate a data structure, the harder it is to alter that data structure. Consider this when putting a record in a header file. There are two levels of possible creeping insanity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You put the record definition in a header file in &lt;strong&gt;src&lt;/strong&gt;. In this case only the application itself can see the records, so they don’t leak out.&lt;/li&gt;
&lt;li&gt;You put the record definition in a header file in &lt;strong&gt;include&lt;/strong&gt;. In this case the record can leak out of the application and often will.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以操作一个数据结构的模块越多，替换这个数据结构的难度就越大。考虑将记录定义在头文件中的方式，有两种可能让人慢慢抓狂的做法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你把记录定义在 &lt;strong&gt;src&lt;/strong&gt; 文件夹下的一个头文件中。在这种情况下，只有该应用能看到这些记录，所以它们不会泄露。&lt;/li&gt;
&lt;li&gt;你把记录定义在 &lt;strong&gt;include&lt;/strong&gt; 文件夹下的一个头文件中。在这种情况下，记录可能从该应用中泄露出去，并且这种情况经常发生。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A good example is the HTTP server &lt;em&gt;cowboy&lt;/em&gt; where its request object is manipulated through the &lt;strong&gt;cowboy_req&lt;/strong&gt; module. This means the internal representation can change while keeping the rest of the world stable on the module API.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HTTP 服务器 &lt;em&gt;cowboy&lt;/em&gt; 是个很好的例子，它通过 &lt;strong&gt;cowboy_req&lt;/strong&gt; 模块操作 request 对象。这意味着即使内部数据结构的表示发生改变，基于 cowboy_req 模块的 API 的其它代码不受影响。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are cases where it makes sense to export records. But think before doing so. If a record is manipulated by several modules, chances are that you can win a lot by re-thinking the structure of the program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有时候导出记录是有用的，但是请仔细考虑后，再决定要不要这么做。如果同一个记录被多个模块所使用，可能重新考虑程序结构会更好。&lt;/p&gt;
&lt;h1 id="true-false-atom"&gt;“true” 和 “false” 是 atom() 类型&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;As a final little nod, I see too much code looking like&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后一小点，我看到很多像这样的代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;Which is hard to read. Since this is Erlang, you can just use a better name for the true and false values. Just pick an atom which makes sense and then produce that atom. It also has the advantage to catch more bugs early on if arguments get swapped by accident. Also note you can bind information to the result, by passing tuples. There is much to be said about the concept of &lt;em&gt;boolean blindness&lt;/em&gt; which in typical programs means to rely too much on boolean() values. The problem is that if you get a &lt;em&gt;true&lt;/em&gt; say, you don’t know why it was true. You want &lt;em&gt;evidence&lt;/em&gt; as to its truth. And this can be had by passing this evidence in a tuple. As an example, we can have a function like this:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种代码的可读性很低。因为这是 Erlang 代码，所以可以采用更恰当的命名来表示 true 和 false。选一个有意义的 atom，把它用在那儿。这样做的另一个好处是，如果不小心交换了参数的位置，你能尽早的捕捉到更多的 bug。还要注意，通过传递元组，你可以绑定信息到函数返回值中。关于 &lt;em&gt;boolean 盲目&lt;/em&gt; 有很多可说的，它意味着在典型程序中过分依赖于 boolean() 值。问题在于如果你表示了一个 &lt;em&gt;true&lt;/em&gt; 值，你不知道为什么它是真，你需要 &lt;em&gt;迹象&lt;/em&gt; 来表露这一点&lt;sup id="fnref:true_or_false"&gt;&lt;a class="footnote-ref" href="#fn:true_or_false" rel="footnote"&gt;10&lt;/a&gt;&lt;/sup&gt;。可以通过在元组中传递这个迹象来表明为什么是 true。比如，我们有个函数像这样：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nn"&gt;api&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;resource_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
    &lt;span class="n"&gt;true&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;api&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;fetch_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
    &lt;span class="n"&gt;false&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;But we could also write it in a more direct style:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是我们可以用更直接了当的方式写出来：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nn"&gt;api&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;fetch_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
    &lt;span class="n"&gt;not_found&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;(&lt;strong&gt;Edit:&lt;/strong&gt; I originally used the function name &lt;code&gt;resource_exists&lt;/code&gt; above but Richard Carlsson correctly points out this is a misleading name. So I changed it to something with a better name)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（&lt;strong&gt;修改：&lt;/strong&gt; 我原本是在上述例子中使用 &lt;code&gt;resource_exists&lt;/code&gt; 作为函数名，但是 Richard Carlsson 指出它具有误导性。因此我改了个更好的函数名）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;which in the long run is less error prone. We can’t by accident call the &lt;em&gt;fetch_resource&lt;/em&gt; call and if we look up the resource, we also get hold of the evidence of what the resource is. If we don’t really want to use the resource, we can just throw it away.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种方式在长远看来更少出错。我们不会意外的调用 &lt;em&gt;fetch_resource&lt;/em&gt; 函数，并且如果查找资源，我们能同时获得迹象，表明资源是什么。如果不是真的打算使用这个资源，可以简单的丢弃它。&lt;/p&gt;
&lt;h1 id="_3"&gt;结束语&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rules of thumb exists to be broken. So once in a while they must be broken. However, I hope you learnt something or had to stop and reflect on something if you happened to get here (unless you scrolled past all the interesting stuff).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经验规则就是用来被打破的。所以，偶尔必须打破这些规则。然而，我希望你学到一些东西，或者卡在某个地方的时候仔细思考（除非你跳过了&lt;sup id="fnref:scrolled past"&gt;&lt;a class="footnote-ref" href="#fn:scrolled past" rel="footnote"&gt;11&lt;/a&gt;&lt;/sup&gt;所有这些有意思的东西）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am also interested in Pet-peeves of yours, if I am missing some. The way to become a better programmer is to study the style of others.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我对文章中让你反感的东西&lt;sup id="fnref:Pet-peeves"&gt;&lt;a class="footnote-ref" href="#fn:Pet-peeves" rel="footnote"&gt;12&lt;/a&gt;&lt;/sup&gt;也感兴趣，如果我没注意到它们，请告诉我。成为一个优秀程序员的方法是学习其他优秀程序员的风格&lt;sup id="fnref:style"&gt;&lt;a class="footnote-ref" href="#fn:style" rel="footnote"&gt;13&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:defensive code"&gt;
&lt;p&gt;防御性编程强调对错误防范于未然，未雨绸缪，对程序中任何可能出现错误的地方编写处理逻辑。参见&lt;a href="https://zh.wikipedia.org/wiki/防御性编程"&gt;防御性编程&lt;/a&gt;、&lt;a href="http://www.codeceo.com/article/defensive-programming-vs-crazy-programming.html"&gt;防御性编程与疯狂偏执性编程&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:defensive code" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:intentional programming"&gt;
&lt;p&gt;意图编程强调把注意力放在能有的，能实现意图的东西上。参见 &lt;a href="https://en.wikipedia.org/wiki/Intentional_programming#Programming_Example"&gt;Intentional_programming&lt;/a&gt;、&lt;a href="http://book.51cto.com/art/201010/230850.htm"&gt;意图编程&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:intentional programming" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:sum-types"&gt;
&lt;p&gt;一种用来表示多种不同类型的数据结构。详见：&lt;a href="https://en.wikipedia.org/wiki/Tagged_union"&gt;Tagged_union&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:sum-types" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:success types"&gt;
&lt;p&gt;success types 应该理解为「函数成功执行得到的返回值所具有的类型」，即与返回错误类型相对的类型&amp;#160;&lt;a class="footnote-backref" href="#fnref:success types" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:option type"&gt;
&lt;p&gt;这里的 Option 不是「可选」的意思，而是指 &lt;a href="https://en.wikipedia.org/wiki/Option_type"&gt;option type&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:option type" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:reflection"&gt;
&lt;p&gt;反射是指程序在运行时可以访问、检测和修改它本身状态或行为的一种能力。详见 &lt;a href="https://zh.wikipedia.org/wiki/反射_(计算机科学)"&gt;reflection&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:reflection" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:C.A.R Hoare’s billion dollar mistake"&gt;
&lt;p&gt;详见 &lt;a href="https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions"&gt;Tony Hoare&lt;/a&gt; 和 &lt;a href="http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare"&gt;他的演讲&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:C.A.R Hoare’s billion dollar mistake" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:ML_OCaml"&gt;
&lt;p&gt;两种函数式语言&amp;#160;&lt;a class="footnote-backref" href="#fnref:ML_OCaml" rev="footnote" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:introspect"&gt;
&lt;p&gt;内省就是运行时类型检查。详见 &lt;a href="https://zh.wikipedia.org/wiki/内省_(计算机科学)"&gt;内省&lt;/a&gt;、&lt;a href="https://en.wikipedia.org/wiki/Type_introspection"&gt;type introspection&lt;/a&gt; 和 &lt;a href="https://www.opengl.org/wiki/Program_Introspection"&gt;program introspection&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:introspect" rev="footnote" title="Jump back to footnote 9 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:true_or_false"&gt;
&lt;p&gt;作者的意思是 true 和 false 是对称的，用 true 的地方也能用 false 替代，那么为什么要用 true 而不是 false 呢？所以需要上下文提供额外的信息来说明为什么用 true。&amp;#160;&lt;a class="footnote-backref" href="#fnref:true_or_false" rev="footnote" title="Jump back to footnote 10 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:scrolled past"&gt;
&lt;p&gt;scrolled past 意为「在浏览器中往下滚动，从而跳过了某些内容」&amp;#160;&lt;a class="footnote-backref" href="#fnref:scrolled past" rev="footnote" title="Jump back to footnote 11 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:Pet-peeves"&gt;
&lt;p&gt;Pet-peeves 是指「厌恶的东西」。作者可能是指某些编程风格的派系之争，类似与「PHP 是世界上最好的语言 :)」&amp;#160;&lt;a class="footnote-backref" href="#fnref:Pet-peeves" rev="footnote" title="Jump back to footnote 12 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:style"&gt;
&lt;p&gt;这里的 style 可能是指「优秀程序员的编码风格」，也可能是指「优秀程序员的编码风格和做事方式」&amp;#160;&lt;a class="footnote-backref" href="#fnref:style" rev="footnote" title="Jump back to footnote 13 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:title1"&gt;
&lt;p&gt;原文：It is an effect, silly&amp;#160;&lt;a class="footnote-backref" href="#fnref:title1" rev="footnote" title="Jump back to footnote 14 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:title2"&gt;
&lt;p&gt;原文：Intentional?&amp;#160;&lt;a class="footnote-backref" href="#fnref:title2" rev="footnote" title="Jump back to footnote 15 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:title3"&gt;
&lt;p&gt;原文：Data flow defensive programming&amp;#160;&lt;a class="footnote-backref" href="#fnref:title3" rev="footnote" title="Jump back to footnote 16 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:title4"&gt;
&lt;p&gt;原文：The scourge of undefined&amp;#160;&lt;a class="footnote-backref" href="#fnref:title4" rev="footnote" title="Jump back to footnote 17 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:title5"&gt;
&lt;p&gt;原文：“Open” data representations&amp;#160;&lt;a class="footnote-backref" href="#fnref:title5" rev="footnote" title="Jump back to footnote 18 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:title6"&gt;
&lt;p&gt;原文：The values ‘true’ and ‘false’ are of type atom()&amp;#160;&lt;a class="footnote-backref" href="#fnref:title6" rev="footnote" title="Jump back to footnote 19 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:title7"&gt;
&lt;p&gt;原文：Closing remarks&amp;#160;&lt;a class="footnote-backref" href="#fnref:title7" rev="footnote" title="Jump back to footnote 20 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="翻译"></category><category term="Erlang"></category><category term="编程语言"></category></entry><entry><title>Gist SSH Timeout 原因</title><link href="https://loggerhead.me/posts/gist-ssh-timeout-yuan-yin.html" rel="alternate"></link><published>2015-09-17T22:28:06+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2015-09-17:posts/gist-ssh-timeout-yuan-yin.html</id><summary type="html">&lt;p&gt;最近 clone gist 的时候总是 timeout，Google 了一番，在 ssh 上找了半天原因后发现是因为 &lt;strong&gt;GFW 把 Gist 给墙了&lt;/strong&gt;。&lt;/p&gt;


&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git@gist.github.com:48facfaab6db640c2b3f.git
Cloning into &lt;span class="s1"&gt;&amp;#39;48facfaab6db640c2b3f&amp;#39;&lt;/span&gt;...
ssh: connect to host gist.github.com port 22: Operation timed out
fatal: Could not &lt;span class="nb"&gt;read&lt;/span&gt; from remote repository.

Please make sure you have the correct access rights
and the repository exists.
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;ping gist.github.com&lt;/code&gt; 会发现 GFW 返回了一个伪造的 IP，所以 ssh 连不上。解决办法有两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;因为 github.com 没被墙，所以将 &lt;code&gt;gist.github.com&lt;/code&gt; 改成 &lt;code&gt;github.com&lt;/code&gt; 就好了&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git@github.com:48facfaab6db640c2b3f.git&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 &lt;a href="https://github.com/rofl0r/proxychains-ng"&gt;proxychains4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;proxychains4 git clone git@gist.github.com:48facfaab6db640c2b3f.git&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 VPN&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Github"></category><category term="non-tech"></category></entry><entry><title>Erlang 快速入门</title><link href="https://loggerhead.me/posts/erlang-kuai-su-ru-men.html" rel="alternate"></link><published>2015-08-21T21:08:25+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2015-08-21:posts/erlang-kuai-su-ru-men.html</id><summary type="html">&lt;p&gt;在很多语言中，我们都能看到 &lt;strong&gt;函数式范型&lt;/strong&gt;、&lt;strong&gt;动态类型&lt;/strong&gt;、&lt;strong&gt;类型系统&lt;/strong&gt; 的身影，而 Erlang 在此基础上发展出了一些自成一派的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;轻量级进程&lt;/strong&gt;。Erlang 的进程既不是操作系统层面的进程，也不是线程，而是由 Erlang 虚拟机进行管理调度的无状态的进程。建立一个进程的成本非常低，在博主机器上（2.4 GHz Intel Core i5，8 GB 1600 MHz DDR3）平均只需要 2~4 us，而建立 80 万个进程也只花费了几秒的时间，并且据官方说法，建立一个进程的内存占用不到 400 字。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息原语&lt;/strong&gt;。Erlang 直接在语言层面支持进程间通讯，并且在内部对并发进行了同步处理，用户不需要再关心多进程并发会不会发生同步问题，大大降低了在进程间传递消息的难度。例如，一句话就能搞定发消息：&lt;code&gt;Pid ! Message.&lt;/code&gt;，收消息也就多个匹配和处理的过程：&lt;code&gt;receive Message -&amp;gt; handle(Message) end.&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速失败&lt;/strong&gt;。如果发生了运行时错误，发生错误的进程会立刻停止执行，并借由消息机制传递错误，使其他进程能够帮助处理错误，或者干脆重启发生错误的进程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码热更新&lt;/strong&gt;。如果是其它语言，当代码发生变动需要重新部署时，比如紧急修复了一个 bug，你需要停止正在运行的服务器，编译后再重新运行新程序。但是使用 Erlang，你不需要停机，不需要停机，只需要利用消息机制通知服务器，更换模块即可，Erlang 虚拟机会自动加载新模块，达到“热更新”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式&lt;/strong&gt;。Erlang 为分布式集群的实现提供了相当易用的函数，在集群的不同节点间通信与进程间通信的实现大同小异。如果熟悉了 Erlang 的消息机制，那么使用 Erlang 实现简单的分布式集群的学习成本近乎于零。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Erlang 的以上特性让它特别适合于实现高可靠、高性能的服务器。然而 Erlang 并不是一门新手友好的语言，且不说它属于函数式范型，光是它那受 Prolog 影响颇深的语法，也让人望而生畏。所以本文虽是快速入门，但也需要读者有一定的功力，&lt;strong&gt;熟悉至少一门静态类型语言和动态类型语言&lt;/strong&gt;。否则，强行修炼，必将走火入魔。本文中涉及到的源代码可以在 &lt;a href="https://gist.github.com/loggerhead/48facfaab6db640c2b3f"&gt;Gist&lt;/a&gt; 获取。&lt;/p&gt;


&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;环境&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;运行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;运行环境差异&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;语法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_6"&gt;注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;模式匹配&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;数据类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;布尔运算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;数学运算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;元组匹配&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;列表操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_14"&gt;比特语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_15"&gt;模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_16"&gt;函数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_17"&gt;匿名函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_18"&gt;函数定义&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#if-case"&gt;if 与 case 表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#record"&gt;Record&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_19"&gt;宏定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_20"&gt;异常&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_21"&gt;进程与消息&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_22"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="_1"&gt;环境&lt;/h1&gt;
&lt;h2 id="_2"&gt;安装&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Linux&lt;/span&gt;
sudo apt-get install erlang
&lt;span class="c1"&gt;# OSX&lt;/span&gt;
brew install erlang
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;官方的 Erlang Shell 是不带语法高亮的，如果需要高亮，可以安装 &lt;a href="https://github.com/karlll/kjell"&gt;kjell&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="_3"&gt;运行&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;erl
&lt;span class="c1"&gt;#查看 erl 手册&lt;/span&gt;
erl -man erl
&lt;span class="c1"&gt;#查看 `lists` 模块手册&lt;/span&gt;
erl -man lists
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;在 &lt;code&gt;erl&lt;/code&gt; 中按下 &lt;code&gt;CTRL+G&lt;/code&gt; 中断正在运行的程序，如果没有运行的程序，那么再输入 &lt;code&gt;q&lt;/code&gt; 退出 &lt;code&gt;erl&lt;/code&gt;（连按两次 &lt;code&gt;CTRL+C&lt;/code&gt; 也能退出），或者输入 &lt;code&gt;h&lt;/code&gt; 查看可使用的命令。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;1&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;User switch command&lt;/span&gt;
&lt;span class="go"&gt;--&amp;gt; h&lt;/span&gt;
&lt;span class="go"&gt;c [nn]            - connect to job&lt;/span&gt;
&lt;span class="go"&gt;i [nn]            - interrupt job&lt;/span&gt;
&lt;span class="go"&gt;k [nn]            - kill job&lt;/span&gt;
&lt;span class="go"&gt;j                 - list all jobs&lt;/span&gt;
&lt;span class="go"&gt;s [shell]         - start local shell&lt;/span&gt;
&lt;span class="go"&gt;r [node [shell]]  - start remote shell&lt;/span&gt;
&lt;span class="go"&gt;q        - quit erlang&lt;/span&gt;
&lt;span class="go"&gt;? | h             - this message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;为了与命令行的 shell 相区分，下文使用 &lt;code&gt;erl&lt;/code&gt; 代指 Erlang Shell。&lt;/p&gt;
&lt;h2 id="_4"&gt;运行环境差异&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;erl&lt;/code&gt; 只能计算表达式，所以不能定义函数，不能使用 &lt;code&gt;-&lt;/code&gt; 开头的编译命令&lt;/li&gt;
&lt;li&gt;&lt;a href="http://linux.die.net/man/3/c"&gt;常用函数的缩写&lt;/a&gt;只能在 &lt;code&gt;erl&lt;/code&gt; 中使用&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.erlang.org/doc/man/escript.html"&gt;escript&lt;/a&gt;、&lt;code&gt;erl&lt;/code&gt; 和模块三者不尽相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_5"&gt;语法&lt;/h1&gt;
&lt;h2 id="_6"&gt;注释&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% `%` 在 Erlang 中表单行注释&lt;/span&gt;
&lt;span class="c"&gt;% Erlang 没有多行注释&lt;/span&gt;
&lt;span class="c"&gt;%% 用几个 `%` 来注释只是风格问题&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_7"&gt;变量&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% 变量必须以大写字母或下划线开头&lt;/span&gt;
&lt;span class="c"&gt;% 英文句号表示语句的结束&lt;/span&gt;
&lt;span class="nv"&gt;Num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;% 变量只有绑定和未绑定两种状态&lt;/span&gt;
&lt;span class="c"&gt;% 变量在第一次匹配时被绑定&lt;/span&gt;
&lt;span class="c"&gt;% 已被绑定的变量不能再改变它的值&lt;/span&gt;
&lt;span class="c"&gt;% Num = 1.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_8"&gt;模式匹配&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% `=` 并不是赋值，而是模式匹配&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c"&gt;% 模式匹配的意思是：先计算右边的值，再将结果与左边进行匹配&lt;/span&gt;
&lt;span class="nv"&gt;Answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Answer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_9"&gt;数据类型&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% 浮点数&lt;/span&gt;
&lt;span class="nv"&gt;Pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;% Atom 以小写字母开始（所以变量必须以大写字母开始），可以由字母、数字、`_` 或 `@` 组成&lt;/span&gt;
&lt;span class="nv"&gt;Bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;for_example&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c"&gt;% 被单引号括起来的也是 atom&lt;/span&gt;
&lt;span class="nv"&gt;Foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;&amp;#39;?! 2333...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c"&gt;% `true` 和 `false` 只是约定用来做布尔运算的 atom&lt;/span&gt;
&lt;span class="n"&gt;true&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;% 被花括号括起来的是元组&lt;/span&gt;
&lt;span class="nv"&gt;Point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;

&lt;span class="c"&gt;% 被中括号括起来的是列表&lt;/span&gt;
&lt;span class="nv"&gt;Nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;
&lt;span class="c"&gt;% 被双引号括起来的是字符串&lt;/span&gt;
&lt;span class="nv"&gt;Word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c"&gt;% 字符串实际上是由整数组成的列表&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;% 字符以 `$` 开头，表示该字符对应的数字&lt;/span&gt;
&lt;span class="sc"&gt;$\n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="c"&gt;% 10&lt;/span&gt;
&lt;span class="sc"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;   &lt;span class="c"&gt;% 97&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;详见&lt;a href="http://erlang.org/doc/reference_manual/typespec.html"&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="_10"&gt;布尔运算&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% `and` 类似于函数调用 `and(ExprA, ExprB)`&lt;/span&gt;
&lt;span class="n"&gt;false&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hi &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;     &lt;span class="c"&gt;% hi false&lt;/span&gt;
&lt;span class="c"&gt;% `andalso` 和其他语言一样，具有短路性质。当 `ExprA == false` 时，不计算 `ExprB`&lt;/span&gt;
&lt;span class="n"&gt;false&lt;/span&gt; &lt;span class="ow"&gt;andalso&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hi &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt; &lt;span class="c"&gt;% false&lt;/span&gt;
&lt;span class="c"&gt;% 不具有短路性质的逻辑或&lt;/span&gt;
&lt;span class="n"&gt;true&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hi &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;       &lt;span class="c"&gt;% hi true&lt;/span&gt;
&lt;span class="c"&gt;% 具有短路性质的逻辑或&lt;/span&gt;
&lt;span class="n"&gt;true&lt;/span&gt; &lt;span class="ow"&gt;orelse&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hi &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;   &lt;span class="c"&gt;% true&lt;/span&gt;
&lt;span class="c"&gt;% 逻辑非&lt;/span&gt;
&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;% 值相等吗？&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c"&gt;% 值相等且类型一致吗？&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=:=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c"&gt;% 值不相等吗？&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c"&gt;% 值不相等或类型不相等吗？&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=/=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;% 大于&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c"&gt;% 不是 &amp;#39;&amp;lt;=&amp;#39; 哦！&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_11"&gt;数学运算&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;   &lt;span class="c"&gt;% 2.5&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="ow"&gt;div&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="c"&gt;% 2&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="ow"&gt;rem&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="c"&gt;% 1&lt;/span&gt;
&lt;span class="c"&gt;% 语法 `Base#Value` 用于表示其他进制的数（2&amp;lt;=Base&amp;lt;=36）&lt;/span&gt;
&lt;span class="mi"&gt;2#101010&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8#052&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16#2A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_12"&gt;元组匹配&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% `_` 是匿名变量，用来匹配任何值&lt;/span&gt;
&lt;span class="p"&gt;{_,&lt;/span&gt; &lt;span class="p"&gt;_,&lt;/span&gt; &lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_13"&gt;列表操作&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;List&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;
&lt;span class="c"&gt;% `[Head|Tail] = List` 匹配列表的头和尾&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;Tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="c"&gt;% Head = 1, Tail = [2, 3].&lt;/span&gt;
&lt;span class="nb"&gt;hd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;List&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=:=&lt;/span&gt; &lt;span class="nv"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;List&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=:=&lt;/span&gt; &lt;span class="nv"&gt;Tail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;% `[Head|Tail]` 还可以用来组成新列表&lt;/span&gt;
&lt;span class="nv"&gt;ListPlus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;List&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt; &lt;span class="c"&gt;% [0, 1, 2, 3]&lt;/span&gt;
&lt;span class="c"&gt;% 合并成新列表&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;    &lt;span class="c"&gt;% [1, 2, 3, 4]&lt;/span&gt;

&lt;span class="c"&gt;% 剔除列表元素&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;    &lt;span class="c"&gt;% [4, 2]&lt;/span&gt;

&lt;span class="c"&gt;% 表达式 `[F(X) || X &amp;lt;- L]` 产生了一个新列表&lt;/span&gt;
&lt;span class="c"&gt;% 新列表的每个元素由列表 L 中的每个元素进行运算 F(X) 得到&lt;/span&gt;
&lt;span class="nv"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nv"&gt;List&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;                   &lt;span class="c"&gt;% [2, 4, 6]&lt;/span&gt;
&lt;span class="c"&gt;% 满足 `X rem 2 == 0` 的元素才计算 `2*X`&lt;/span&gt;
&lt;span class="nv"&gt;DoubleEven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nv"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="ow"&gt;rem&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt; &lt;span class="c"&gt;% [4]&lt;/span&gt;

&lt;span class="c"&gt;% 计算与原点的距离&lt;/span&gt;
&lt;span class="nv"&gt;Points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}].&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nn"&gt;math&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nv"&gt;Points&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt; &lt;span class="c"&gt;% [1.4142135623730951,13.0,5.0]&lt;/span&gt;
&lt;span class="c"&gt;% 计算笛卡尔积&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;Y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]].&lt;/span&gt;       &lt;span class="c"&gt;% [{1,3},{1,4},{2,3},{2,4}]&lt;/span&gt;
&lt;span class="c"&gt;% 筛选&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nv"&gt;Points&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;                    &lt;span class="c"&gt;% [4]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_14"&gt;比特语法&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% 被 `&amp;lt;&amp;lt;` 和 `&amp;gt;&amp;gt;` 括起来的值会被转换为二进制数据&lt;/span&gt;
&lt;span class="nv"&gt;Color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;16#010203&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;Red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Green&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello, world&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;% binaries 的遍历操作和列表类似&lt;/span&gt;
&lt;span class="c"&gt;% 只不过是使用 `&amp;lt;=` 而不是 `&amp;lt;-`（所以小于等于采用 `=&amp;lt;`）&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;            &lt;span class="c"&gt;% [1,2,3,4]&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;    &lt;span class="c"&gt;% &amp;lt;&amp;lt;1,2,3,4&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;详见 &lt;a href="http://www.erlang.org/documentation/doc-5.6/doc/programming_examples/bit_syntax.html"&gt;bit syntax&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="_15"&gt;模块&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://erlang.org/doc/reference_manual/modules.html"&gt;模块&lt;/a&gt;必须存储在后缀为 &lt;code&gt;.erl&lt;/code&gt; 的文件中，且 &lt;strong&gt;只能由模块属性和函数定义组成&lt;/strong&gt;，下面以 &lt;code&gt;test.erl&lt;/code&gt; 为例说明如何使用模块。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% 模块属性以 `-` 开头&lt;/span&gt;
&lt;span class="c"&gt;% module 属性是必须的，且参数必须与除去后缀的文件名一致&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="c"&gt;% import 属性用来导入其他模块的函数，然后才能在模块中使用&lt;/span&gt;
&lt;span class="c"&gt;% -import(Module, [Function1/Arity, ..., FunctionN/Arity]).&lt;/span&gt;
&lt;span class="c"&gt;% 其中 Arity 是函数的参数数目&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;模块必须编译才能使用 &lt;sup id="fnref:code_loading"&gt;&lt;a class="footnote-ref" href="#fn:code_loading" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;，编译成功会生成 &lt;code&gt;test.beam&lt;/code&gt; 文件。编译有多种方式，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;a href="http://erlang.org/doc/man/erlc.html"&gt;erlc&lt;/a&gt; 进行编译：&lt;code&gt;erlc test.erl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;erl&lt;/code&gt; 中执行 &lt;code&gt;c(test).&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://erlang.org/doc/man/code.html"&gt;模块在第一次引用时被自动加载&lt;/a&gt;，所以在调用模块中的函数时，不需要运行 &lt;code&gt;import&lt;/code&gt; 之类的语句（python 就需要）。&lt;sup id="fnref:module_load"&gt;&lt;a class="footnote-ref" href="#fn:module_load" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id="_16"&gt;函数&lt;/h2&gt;
&lt;h3 id="_17"&gt;匿名函数&lt;/h3&gt;
&lt;p&gt;表达式 &lt;code&gt;fun(X) -&amp;gt; Expression end.&lt;/code&gt; 返回 &lt;em&gt;函数&lt;/em&gt; 作为表达式的值。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% Erlang 对缩进不敏感，所以也可以写成多行&lt;/span&gt;
&lt;span class="nv"&gt;Foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;do_nothing_but_return_a_atom&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c"&gt;% 任何函数都有返回值，最后一个表达式的值会被当作返回值&lt;/span&gt;
&lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;
&lt;span class="c"&gt;% 匿名函数可以在 erl 中执行&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=:=&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="_18"&gt;函数定义&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://erlang.org/doc/reference_manual/functions.html"&gt;函数&lt;/a&gt;不能在 &lt;code&gt;erl&lt;/code&gt; 中定义，所以我们将函数定义写在 &lt;code&gt;mymethod.erl&lt;/code&gt; 模块中。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% mymethod.erl&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mymethod&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="c"&gt;% 要想在外部调用模块中的函数，首先得将函数导出&lt;/span&gt;
&lt;span class="c"&gt;% -export([Function1/Arity, ..., FunctionN/Arity]).&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;export&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;

&lt;span class="c"&gt;% 调试的时候可以使用下面的语句导出所有函数&lt;/span&gt;
&lt;span class="c"&gt;% -compile(export_all).&lt;/span&gt;

&lt;span class="c"&gt;% 不需要 `end`&lt;/span&gt;
&lt;span class="nf"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;hello, world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;函数名是一个 atom，函数定义的形式如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% 函数头部&lt;/span&gt;
&lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...,&lt;/span&gt; &lt;span class="nv"&gt;Arg3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;% 函数体&lt;/span&gt;
    &lt;span class="nv"&gt;Expression1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;Expression2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="c"&gt;% 表达式的结果作为返回值&lt;/span&gt;
    &lt;span class="nv"&gt;ExpressionN&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;其他语言中的 &lt;code&gt;if ... else ...&lt;/code&gt; 可以通过函数分句和模式匹配来实现：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;all_the_same&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% 按函数分句的先后顺序进行模式匹配&lt;/span&gt;
&lt;span class="c"&gt;% 找到第一个参数匹配的分句时，执行该分句下的表达式&lt;/span&gt;
&lt;span class="c"&gt;% 分号表分句的结束，句号表整个函数的结束&lt;/span&gt;
&lt;span class="nf"&gt;all_the_same&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c"&gt;% `_` 是匿名变量&lt;/span&gt;
&lt;span class="nf"&gt;all_the_same&lt;/span&gt;&lt;span class="p"&gt;(_,&lt;/span&gt; &lt;span class="p"&gt;_,&lt;/span&gt; &lt;span class="p"&gt;_)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;有时候需要匹配一定范围内的值，这时候模式匹配就略显不足了。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;is_adult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nf"&gt;is_adult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nf"&gt;is_adult&lt;/span&gt;&lt;span class="p"&gt;(_)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;所以 Erlang 有 guard（断言）。Guard 以 &lt;code&gt;when&lt;/code&gt; 关键字开头，可出现在 &lt;strong&gt;函数头部&lt;/strong&gt; 或 &lt;strong&gt;表达式&lt;/strong&gt; 中。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;is_adult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="nv"&gt;Age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nf"&gt;is_adult&lt;/span&gt;&lt;span class="p"&gt;(_)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Guard 可以由一系列 guard 表达式组成。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% 逗号在 guard 中的作用类似于 `and`&lt;/span&gt;
&lt;span class="nf"&gt;is_triangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;B&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;B&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;C&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;C&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;B&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nf"&gt;is_triangle&lt;/span&gt;&lt;span class="p"&gt;(_,&lt;/span&gt; &lt;span class="p"&gt;_,&lt;/span&gt; &lt;span class="p"&gt;_)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;% 分号在 guard 中的作用类似于 `or`&lt;/span&gt;
&lt;span class="nf"&gt;is_num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="nb"&gt;is_integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nb"&gt;is_float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nf"&gt;is_num&lt;/span&gt;&lt;span class="p"&gt;(_)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;下面给出几个例子帮助你熟悉函数定义：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;bro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Girlfriend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="nv"&gt;Girlfriend&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;girl&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fall in love with &lt;/span&gt;&lt;span class="si"&gt;~p~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Girlfriend&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c"&gt;% 若参数未被使用，编译时会发出警告：`Warning: variable &amp;#39;Girl&amp;#39; is unused`&lt;/span&gt;
&lt;span class="c"&gt;% 如果参数名以下划线开头，则不会警告&lt;/span&gt;
&lt;span class="nf"&gt;bro&lt;/span&gt;&lt;span class="p"&gt;(_&lt;/span&gt;&lt;span class="nv"&gt;Girl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cheat!&lt;/span&gt;&lt;span class="si"&gt;~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="c"&gt;% 参数数目不同但同名的函数没有任何关系&lt;/span&gt;
&lt;span class="nf"&gt;bro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;I&amp;#39;m a single dog&lt;/span&gt;&lt;span class="si"&gt;~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="c"&gt;% 根据参数的模式匹配执行不同的分句&lt;/span&gt;
&lt;span class="nf"&gt;yo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brother&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hi, man!&lt;/span&gt;&lt;span class="si"&gt;~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nf"&gt;yo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;How are you?&lt;/span&gt;&lt;span class="si"&gt;~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nf"&gt;yo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;People&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Are you &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;~p&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;?&lt;/span&gt;&lt;span class="si"&gt;~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;People&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;

&lt;span class="c"&gt;% 计算列表的和&lt;/span&gt;
&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;                    &lt;span class="c"&gt;% 句号&lt;/span&gt;
&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="nv"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="c"&gt;% 分号&lt;/span&gt;
&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nv"&gt;H&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;T&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;H&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt; &lt;span class="c"&gt;% 又是句号，为什么？&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;在 &lt;code&gt;erl&lt;/code&gt; 中编译并运行。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% 编译当前目录下的 `mymethod.erl` 模块&lt;/span&gt;
&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mymethod&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="c"&gt;% 可以使用 `cd` 切换目录&lt;/span&gt;
&lt;span class="c"&gt;% cd(&amp;quot;/path/to/where/you/saved/the-module/&amp;quot;).&lt;/span&gt;

&lt;span class="c"&gt;% 函数调用的形式是：`Module:Function(Arguments).`&lt;/span&gt;
&lt;span class="c"&gt;% erl 会寻找 `Module.beam` 文件中 `Function` 的定义&lt;/span&gt;
&lt;span class="nn"&gt;mymethod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;
&lt;span class="c"&gt;% 内建函数（BIFs: built-in functions）会被自动导入，不需要指出模块名&lt;/span&gt;
&lt;span class="nf"&gt;date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;
&lt;span class="c"&gt;% `seq` 并没有被自动导入，但你可以直接使用&lt;/span&gt;
&lt;span class="nn"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt; &lt;span class="c"&gt;% [1,2,3,4]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;查看更多内建函数点&lt;a href="http://linux.die.net/man/3/Erlang"&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="if-case"&gt;if 与 case 表达式&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% `if` 类似于 guard，并且语法和 guard 一致&lt;/span&gt;
&lt;span class="nf"&gt;hi_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="c"&gt;% `if` 也有返回值&lt;/span&gt;
    &lt;span class="nv"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; 
        &lt;span class="c"&gt;% 必须匹配所有的逻辑，否则会 crash&lt;/span&gt;
        &lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c"&gt;% 匹配剩下的所有可能&lt;/span&gt;
        &lt;span class="n"&gt;true&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;negative&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;if expression result is &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;~p&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;

&lt;span class="c"&gt;% `case` 类似于函数头部，其余部分和 `if` 几乎一样&lt;/span&gt;
&lt;span class="nf"&gt;hi_case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nv"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
        &lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c"&gt;% 匹配剩下的所有可能&lt;/span&gt;
        &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;negative&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;case expression result is &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;~p&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="record"&gt;Record&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://erlang.org/doc/reference_manual/records.html"&gt;Record&lt;/a&gt; 是一种类似于 C 语言中结构体的数据结构，它会在编译期间被转换成元组。record 定义不能出现在 &lt;code&gt;erl&lt;/code&gt; 中，但是可以定义在 &lt;code&gt;.erl&lt;/code&gt; 或 &lt;code&gt;.hrl&lt;/code&gt; 中，这里我们定义在 &lt;code&gt;bar.hrl&lt;/code&gt; 中。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% bar.hrl&lt;/span&gt;
&lt;span class="c"&gt;% record 将元组中的元素绑定到特定的名称&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt; 
&lt;span class="c"&gt;% 本质是元组 `{point, X = 0, Y = undefined}`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;然后在 &lt;code&gt;erl&lt;/code&gt; 中使用 record。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% 使用函数 `rr`（read records）导入 record 的定义&lt;/span&gt;
&lt;span class="nf"&gt;rr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar.hrl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;  

&lt;span class="c"&gt;% 创建 record&lt;/span&gt;
&lt;span class="nv"&gt;P0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nl"&gt;#point&lt;/span&gt;&lt;span class="p"&gt;{}.&lt;/span&gt;               &lt;span class="c"&gt;% #point{x = 0,y = undefined}&lt;/span&gt;
&lt;span class="nv"&gt;P1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nl"&gt;#point&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;          &lt;span class="c"&gt;% #point{x = 0,y = 0}&lt;/span&gt;
&lt;span class="c"&gt;% 在 `P1` 的基础上创建 record&lt;/span&gt;
&lt;span class="nv"&gt;P2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;P1&lt;/span&gt;&lt;span class="nl"&gt;#point&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;        &lt;span class="c"&gt;% #point{x = 1,y = 0}&lt;/span&gt;
&lt;span class="c"&gt;% 读取 record 的成员&lt;/span&gt;
&lt;span class="nv"&gt;P2&lt;/span&gt;&lt;span class="nl"&gt;#point.x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;P2&lt;/span&gt;&lt;span class="nl"&gt;#point.y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;     &lt;span class="c"&gt;% 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;当然，你也可以在模块中使用。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% bar.erl&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar.hrl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;export_all&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;P&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="nb"&gt;is_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;P&lt;/span&gt;&lt;span class="nl"&gt;#point.x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;is_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;P&lt;/span&gt;&lt;span class="nl"&gt;#point.y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nn"&gt;math&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;P&lt;/span&gt;&lt;span class="nl"&gt;#point.x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;P&lt;/span&gt;&lt;span class="nl"&gt;#point.x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;P&lt;/span&gt;&lt;span class="nl"&gt;#point.y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;P&lt;/span&gt;&lt;span class="nl"&gt;#point.y&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="c"&gt;% record 在 function clause 中的匹配很违背直觉&lt;/span&gt;
&lt;span class="c"&gt;% 仅匹配 `#point.y == 1`，而不管 `#point.x` 是不是 `0`&lt;/span&gt;
&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;#point&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x=? y=1&lt;/span&gt;&lt;span class="si"&gt;~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c"&gt;% 仅匹配 `#point.x == 1`，而不管 `#point.y` 是什么值&lt;/span&gt;
&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;#point&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x=1 y=?&lt;/span&gt;&lt;span class="si"&gt;~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nv"&gt;P1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nl"&gt;#point&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nv"&gt;P2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;P1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=:=&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;P2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
        &lt;span class="n"&gt;true&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;false&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Oh My God! This is impossible!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;#point&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;whatever&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="c"&gt;% x=? y=1&lt;/span&gt;
    &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;#point&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;        &lt;span class="c"&gt;% x=? y=1&lt;/span&gt;
    &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;#point&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;whatever&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt; &lt;span class="c"&gt;% x=1 y=?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;详见&lt;a href="http://erlang.org/doc/reference_manual/records.html"&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="_19"&gt;宏定义&lt;/h2&gt;
&lt;p&gt;宏定义的语法如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Const&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Replacement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Var1&lt;/span&gt;&lt;span class="p"&gt;,...,&lt;/span&gt;&lt;span class="nv"&gt;VarN&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;Replacement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;我们新建一个 &lt;code&gt;mymath.erl&lt;/code&gt; 文件实验宏定义。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% mymath.erl&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mymath&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;export_all&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="c"&gt;% 自定义的宏&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ONE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ADD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;predefined macros: &lt;/span&gt;&lt;span class="si"&gt;~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="c"&gt;% 预定义的宏&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;~p&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;~p&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;~p&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;~p&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;~p~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;MODULE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;MODULE_STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;LINE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;MACHINE&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="c"&gt;% `?MACRO` 调用宏&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;one=&lt;/span&gt;&lt;span class="si"&gt;~p&lt;/span&gt;&lt;span class="s"&gt; add(1,2)=&lt;/span&gt;&lt;span class="si"&gt;~p~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;ONE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;ADD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;然后在 &lt;code&gt;erl&lt;/code&gt; 中编译运行。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mymath&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="nn"&gt;mymath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;
&lt;span class="c"&gt;% predefined macros:&lt;/span&gt;
&lt;span class="c"&gt;% mymath &amp;quot;mymath&amp;quot; &amp;quot;mymath.erl&amp;quot; 8 &amp;#39;BEAM&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;% one=1 add(1,2)=3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;详见&lt;a href="http://erlang.org/doc/reference_manual/macros.html"&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="_20"&gt;异常&lt;/h2&gt;
&lt;p&gt;捕获异常的语法如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="nv"&gt;Expression&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
    &lt;span class="c"&gt;% guards 是可选的&lt;/span&gt;
    &lt;span class="nv"&gt;SuccessfulPattern1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Guards&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nv"&gt;Expression1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;SuccessfulPattern2&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Guards&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nv"&gt;Expression2&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt;
    &lt;span class="nv"&gt;TypeOfError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;ExceptionPattern1&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nv"&gt;Expression3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;TypeOfError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;ExceptionPattern2&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nv"&gt;Expression4&lt;/span&gt;
&lt;span class="c"&gt;% after 语句在 `try...catch` 语句之后执行&lt;/span&gt;
&lt;span class="k"&gt;after&lt;/span&gt; 
    &lt;span class="nv"&gt;Expr3&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;我们新建 &lt;code&gt;catcher.erl&lt;/code&gt; 文件，对 &lt;code&gt;try...catch&lt;/code&gt; 语句进行实验。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% catcher.erl&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;catcher&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;export_all&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="c"&gt;% `throw`, `exit`, `error` 三者都能产生异常&lt;/span&gt;
&lt;span class="nf"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lol&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c"&gt;% ** exception throw: lol&lt;/span&gt;
&lt;span class="nf"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lol&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c"&gt;% ** exception exit: lol&lt;/span&gt;
&lt;span class="nf"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lol&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c"&gt;% ** exception error: lol&lt;/span&gt;
&lt;span class="nf"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nf"&gt;normal_catcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
        &lt;span class="nv"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;do_something(&lt;/span&gt;&lt;span class="si"&gt;~p&lt;/span&gt;&lt;span class="s"&gt;) =&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;~p~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt;
        &lt;span class="nn"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;catch throw: &lt;/span&gt;&lt;span class="si"&gt;~p~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;catch exit: &lt;/span&gt;&lt;span class="si"&gt;~p~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="nn"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;catch error: &lt;/span&gt;&lt;span class="si"&gt;~p~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nf"&gt;all_catcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
        &lt;span class="nv"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;do_something(&lt;/span&gt;&lt;span class="si"&gt;~p&lt;/span&gt;&lt;span class="s"&gt;) =&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;~p~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt;
        &lt;span class="c"&gt;% 省略错误类型&lt;/span&gt;
        &lt;span class="c"&gt;% 默认为 throw 类型&lt;/span&gt;
        &lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;catch you: &lt;/span&gt;&lt;span class="si"&gt;~p~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;after&lt;/span&gt;
        &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;after `try...catch`&lt;/span&gt;&lt;span class="si"&gt;~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nf"&gt;simple_catcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;% 将异常转换为一个描述异常的元组&lt;/span&gt;
    &lt;span class="c"&gt;% 如果没有异常，则返回表达式的值&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_21"&gt;进程与消息&lt;/h2&gt;
&lt;p&gt;Erlang 的每个进程都有一个消息队列保存收到的消息，而 receive 语句是用来从消息队列中提取消息的。receive 会遍历消息队列，直到找到能够匹配的消息，将其从消息队列中移除，并执行相应的 receive 处理逻辑。&lt;sup id="fnref:conc_prog"&gt;&lt;a class="footnote-ref" href="#fn:conc_prog" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;receive 的语法如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;receive&lt;/span&gt;
    &lt;span class="nv"&gt;Pattern1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Guards1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Expressions1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;Pattern2&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Guards2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Expressions2&lt;/span&gt;
&lt;span class="c"&gt;% after 语句是可选的，意为：&lt;/span&gt;
&lt;span class="c"&gt;% 如果 `Timeout` 毫秒后没收到消息，执行 `Expressions3`&lt;/span&gt;
&lt;span class="k"&gt;after&lt;/span&gt; &lt;span class="nv"&gt;Timeout&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nv"&gt;Expressions3&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;发送消息的语法很简单：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Pid&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;我们在 &lt;code&gt;erl&lt;/code&gt; 中直观的感受一下接发消息的过程。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% `self()` 获取当前进程的 pid&lt;/span&gt;
&lt;span class="c"&gt;% `process_info(Pid)` 用来查看进程运行时信息&lt;/span&gt;
&lt;span class="c"&gt;% 返回结果中的 `messages` 字段就是消息队列的内容&lt;/span&gt;
&lt;span class="nb"&gt;process_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;

&lt;span class="c"&gt;% 向 Erlang shell 进程发送一个消息 `hi`&lt;/span&gt;
&lt;span class="nf"&gt;self&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a_more_complex_case&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;
&lt;span class="nf"&gt;self&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nf"&gt;self&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;
&lt;span class="c"&gt;% 现在消息队列中有两个消息了&lt;/span&gt;
&lt;span class="nb"&gt;process_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;

&lt;span class="k"&gt;receive&lt;/span&gt;
    &lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;get hi&lt;/span&gt;&lt;span class="si"&gt;~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;receive&lt;/span&gt;
    &lt;span class="nv"&gt;Msg&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;get: &lt;/span&gt;&lt;span class="si"&gt;~p~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c"&gt;% 被 receive 取完后，消息队列就空了&lt;/span&gt;
&lt;span class="nb"&gt;process_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;下面新建一个 &lt;code&gt;m.erl&lt;/code&gt; 文件实验一些更复杂的例子。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% m.erl&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;export&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;start_echo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_hurry&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;

&lt;span class="nf"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;receive&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;From&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;~p&lt;/span&gt;&lt;span class="s"&gt; =&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;~p&lt;/span&gt;&lt;span class="s"&gt;: &lt;/span&gt;&lt;span class="si"&gt;~p~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;From&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nv"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
            &lt;span class="nv"&gt;From&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="c"&gt;% 循环接收消息&lt;/span&gt;
            &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;% 如果10秒内没收到消息，就执行 after 语句&lt;/span&gt;
    &lt;span class="k"&gt;after&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;quit echo process&lt;/span&gt;&lt;span class="si"&gt;~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;% `after 0` 的逻辑类似于：&lt;/span&gt;
&lt;span class="c"&gt;% if is_not_empty(message_queue)&lt;/span&gt;
&lt;span class="c"&gt;%     receive()&lt;/span&gt;
&lt;span class="c"&gt;% else&lt;/span&gt;
&lt;span class="c"&gt;%     after()&lt;/span&gt;
&lt;span class="nf"&gt;do_hurry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;receive&lt;/span&gt;
        &lt;span class="nv"&gt;Msg&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;message: &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;~p&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
            &lt;span class="n"&gt;do_hurry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;after&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;no more message, quit&lt;/span&gt;&lt;span class="si"&gt;~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;% 等待10秒后从消息队列中取出所有消息&lt;/span&gt;
&lt;span class="nf"&gt;hurry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nn"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;do_hurry&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;

&lt;span class="nf"&gt;start_echo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;% 调用 `spawn` 启动新进程，并返回一个pid（进程标识符）&lt;/span&gt;
    &lt;span class="c"&gt;% 在 `erl` 中调用为 `spawn(Function)`，在模块中为 `spawn(fun Function/0)`&lt;/span&gt;
    &lt;span class="nb"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="nf"&gt;start_hurry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hurry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;然后在 &lt;code&gt;erl&lt;/code&gt; 中运行。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% 启动新进程，将新进程 pid 与 `E` 绑定&lt;/span&gt;
&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;start_echo&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;
&lt;span class="c"&gt;% Erlang shell 进程发送消息 &amp;quot;hi&amp;quot; 给 `E` 进程&lt;/span&gt;
&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;
&lt;span class="c"&gt;% 接收 `echo` 传回的消息&lt;/span&gt;
&lt;span class="k"&gt;receive&lt;/span&gt; 
    &lt;span class="nv"&gt;Msg&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;received from echo:&lt;/span&gt;&lt;span class="si"&gt;~p~n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c"&gt;% 如果10秒没有再发消息给 `E` 进程，它会执行 after&lt;/span&gt;

&lt;span class="nv"&gt;H&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;start_hurry&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;
&lt;span class="nv"&gt;H&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;
&lt;span class="nv"&gt;H&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;yo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;H&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bro&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;hr /&gt;
&lt;h1 id="_22"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://learnxinyminutes.com/docs/Erlang/"&gt;Learn X in Y minutes: Erlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learnyousomeErlang.com/"&gt;Learn You Some Erlang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:code_loading"&gt;
&lt;p&gt;&lt;a href="http://erlang.org/doc/reference_manual/code_loading.html"&gt;Compilation and Code Loading&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:code_loading" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:module_load"&gt;
&lt;p&gt;实际上还得分 &lt;strong&gt;嵌入式&lt;/strong&gt; 和 &lt;strong&gt;交互式&lt;/strong&gt; 两种运行模式来讨论。前者在启动时一次加载完所有的代码，后者在启动时加载一部分基本的模块，其他模块则在第一次引用时动态加载。&amp;#160;&lt;a class="footnote-backref" href="#fnref:module_load" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:conc_prog"&gt;
&lt;p&gt;详见官方文档 &lt;a href="http://www.erlang.org/doc/getting_started/conc_prog.html"&gt;Concurrent Programming&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:conc_prog" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Erlang"></category><category term="编程语言"></category></entry><entry><title>如何教你女朋友编程</title><link href="https://loggerhead.me/posts/ru-he-jiao-ni-nu-peng-you-bian-cheng.html" rel="alternate"></link><published>2015-07-30T18:05:05+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2015-07-30:posts/ru-he-jiao-ni-nu-peng-you-bian-cheng.html</id><summary type="html">&lt;p&gt;原文链接：&lt;a href="http://blog.jakubarnold.cz/2013/09/23/how-to-teach-your-girlfriend-programming.html"&gt;How to Teach Your Girlfriend Programming&lt;/a&gt;&lt;/p&gt;


&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Ever since I was a little software developer not so many years ago, I’ve dreamed of having a girl who I could talk to about the things I like. I wanted to talk to her about what I do. Not in a sense of yeah &lt;em&gt;I do computer stuff&lt;/em&gt;, but in a real and deep way. The kind of conversation you would have with a coworker. I wanted my girl to be the person I go to whenever I find something new that excites me, and I wanted her to understand it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;几年前，我还是个小小的软件工程师的时候，我梦到我有女朋友，并且能和她聊我喜欢的东西。我想和她聊我所做的事情。当然不是“噢，我是干计算机的”，而是更真实、更深层次的交流。就是那种存在于你和同事之间的交流。我希望在我找到令我兴奋的事物的时候，我都可以找我的女朋友倾诉，并且我希望她能理解这东西。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Back when I was still in school days, university to be specific, I used to talk about this with my friends. I expected everyone to want the same as I did, but to my surprise I was the only crazy person in a group of already crazy geeks. Every one of them told me they don’t want a programmer girl, they said &lt;em&gt;they would go crazy&lt;/em&gt;. But I call that bullshit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当我还在学校的日子（准确的说是大学），我常常和我的朋友谈论这一点。我以为每个人的看法都和我的一样，但是出乎意料的是，在这一群已经很疯狂的极客中，我是唯一一个这样想的。他们告诉我说不想要个程序媛做女朋友，他们说如果女朋友是个程序员，&lt;em&gt;他们会疯掉&lt;/em&gt;。但是我觉得这种说法是在扯蛋。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It was just their fear talking. What’s really everyone thinking is that it is impossible to find a girl who would be good looking, intelligent, interested in programming, and above all else, interested in you, the socially awkward geek. What are the odds of getting all of that?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实只是他们害怕找不到女朋友才这么说。大家真正想的是，找到一个漂亮、聪明、对编程感兴趣，最重要的是，对你（不善社交的极客）感兴趣的女孩，是不可能的。找到一个满足上面所有条件的女朋友，这种事情发生的概率能有多大呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But let me tell you a secret brother, she doesn’t need to know all of this stuff. Everything in life can be learned. Some people might have predispositions for certain things, but that doesn’t mean other people can’t learn and understand them. We carry a great pride in what we do, because it took us many years to master the profession. But truth to be told, many of the things that took you a year to understand can be explained in 5 minutes if you know how.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是兄弟，让我告诉你个秘密，她并不需要知道所有关于编程的事情。生活中的每件事都能学习。某些人可能对特定的事物有种天生的喜好，但是这不意味着其他人不能学习或理解这些事物。我们对我们所做的事情感到很自豪，是因为我们在职业上花了很多年来达到精通的程度。但是说实话，如果你知道怎么去讲解，那么许多你需要花一年时间去理解的事情，能够在5分钟内说明白。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is pointer arithmetic really difficult, or are we just telling that to ourselves to boost our ego, because we finally understand how it works? Is understanding polymorphism difficult? Are monads really that hard to understand, or are we just looking at it from the wrong point of view?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A perspective is worth 80 IQ points.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can explain pointers, manual memory management, stack &amp;amp; heap allocation, garbage collection and much more in just a couple of hours if you chose the right metaphors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是指针真的很难懂，还是因为我们最终搞懂了指针是怎么回事，所以这样暗示自己，从而显得更牛逼？理解多态很难吗？monads &lt;sup id="fnref:monad"&gt;&lt;a class="footnote-ref" href="#fn:monad" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; 真的那么难懂吗？还是说我们理解它们的角度不对？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好的观点顶得上80点智力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果选择正确的隐喻，你能在一两小时内就解释清楚指针、手动管理内存、栈 &amp;amp; 堆分配、垃圾回收和其他更多的东西。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Or maybe algorithms are difficult? I bet you wouldn’t want someone to wake you up in the middle of the night and have you write a quicksort. But what if you had knives and wanted to teach your girl how to sort them (obviously by size)? You might have to do it two or three times for her to really believe you that it works, but the algorithm itself is stupidly simple.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或者说算法很难？我打赌你肯定不愿意有谁半夜叫醒你，并且让你写个快排。但如果你有一堆刀具，并且想教你女朋友怎么对它们进行排序（显然是按尺寸排序）。你可能不得不给她演示两三次，让她相信快排确实管用，但快排的算法本身实在是简单到爆。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have a problem that you don’t understand even after a few hours, go ahead and explain it to your girlfriend. I don’t mean the usual &lt;em&gt;talk to a wall&lt;/em&gt; kind of thing, when you realize in the middle of the sentence what you wanted to do and abandon the conversation. Try to really explain it to her, even if she isn’t technical at all. It will be easy for her to understand once you find the right metaphor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你有一个问题不理解，甚至想几个小时都不理解，去找你女朋友并且把问题讲给她听。不是通常那种（讲给外行人听的）&lt;em&gt;对牛弹琴&lt;/em&gt; 式的谈话，你讲到一半，发现你想做的就不讲了。试着解释给她听，即使她一点技术都不懂。一旦你找到正确的隐喻，那么对她来说，理解这个问题就简单了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just keep in mind that she has to be willing to learn these things, you can’t force your knowledge into her, she has to be the one who wants to learn. The biggest obstacle here I would say is breaking the &lt;em&gt;I would never understand that&lt;/em&gt; fear.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记住这一点，她必须愿意学这些东西，你不能把你会的灌给她，她一定得想要学这些知识。我想说，最大的障碍是战胜 &lt;em&gt;我永远不能理解这东西&lt;/em&gt; 的恐惧心理。&lt;/p&gt;
&lt;h2 id="1"&gt;并不困难，只是费时&lt;sup id="fnref:title1"&gt;&lt;a class="footnote-ref" href="#fn:title1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;About 6 months ago my girlfriend was studying political sciences for her masters degree. She didn’t really have any technical experience up until this point.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概六个月前，我女朋友正在读政治学硕士。在这之前，她没有任何技术经验。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One day she decided she wants to learn some cool things in JavaScript to make some animations on her personal website that I made. A week later and I was teaching her Ruby on Rails. A couple of weeks after that she was already building her own web app. A couple more weeks after that she realized that she needs more in depth knowledge, so we started learning more basic things.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有一天，她决定学习一些 JavaScript 中炫酷的东西，做一些动画效果，用在我为她搭建的个人网站上。一周后我就在教她 Ruby on Rails 了。几周后她已经构建出自己的 web 应用了。又过了几周，她意识到她需要学习更深层次的知识，于是我们开始学习更多基础的东西。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We’ve learned things like how computers work, how to manually allocate memory, differences between stack and heap allocation, how to do properly reference counting in Objective-C, how garbage collectors work, functional programming (yes I mean Haskell), networking protocols and much more. She even knows things that I didn’t know just a year ago.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们学了计算机是怎么工作的、怎么手动分配内存、堆栈分配内存的区别、在 Objective-C 中如何恰当的进行引用计数、垃圾回收器是怎么工作的、函数式编程（没错，说你呢，Haskell）、网络协议和其他一些东西。她甚至知道一些我一年前都不知道的知识。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Basically I’m able to take what I know, extract the important things, throw away the 99.5% of wasted time on figuring out what is important and just teach her what she needs to know.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本上我能掌握自己知道的知识，抽取出重要的部分，少花99.5%的时间来搞清哪些是重要的，并且仅仅教她所需的知识。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is this enough to make someone a programmer? No. She will have to go through the hard parts as well, figure a lot of things out, but she already knows more than most people who go study software engineering on a technical university, just after 6 months.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是不是这就足够让一个人成为程序员了呢？不。她同样也必须学习那些难以掌握的知识，搞清楚一堆东西，但是仅仅过了六个月，她已经比大部分在技术型大学学习软件工程的学生懂得更多了。&lt;/p&gt;
&lt;h2 id="2"&gt;你是专业的老师&lt;sup id="fnref:title2"&gt;&lt;a class="footnote-ref" href="#fn:title2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Being a professional developer also means that you’re a professional teacher to some extent, since our job forces us to constantly explain things to other people. We have to put ourselves into the role of the reader and make our code understandable. We have to explain what we did when it doesn’t make sense, and we have to coach our interns on their path to greatness.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一个职业开发者，同时也意味着在某种程度上来说，你是一个专业的老师，因为我们的工作强迫我们不断的给其他人解释一些东西。我们不得不将自己置于读者的角度，并且使我们的代码容易理解。当软件出现异常时，我们必须解释我们的工作，并且我们必须教导我们的实习生用他们自己的方式变强。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All we do in our jobs is take complicated things and make them simple (hopefully, some people like to do the exact opposite). One of the reasons why it takes so long to learn something is that you get lost all the time. You might have a professor who will occasionally explain something, but you still only have about one lecture per week.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们所做的所有工作都是理解复杂的东西，并且简化它们（事与愿违，大家总喜欢做恰恰相反的事情）。你需要花很多时间去学习某个东西的原因之一是因为你常常感到困惑。可能有个教授能偶尔给你讲解一下，但你顶多每周上一次课。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On the other hand, if you’re teaching the person you live with, she’ll have unlimited access to you, the person who can answer any question, immediately.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一方面，如果你教的是和你生活在一起的人，她会一直和你保持接触，而你能立即回答出她提的任何问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Developers are so good at googling because we get lost all the time. We’re constantly looking for answers. But how productive would you be if you had someone with all the answers sitting in the same room?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为开发者总是感到困惑，所以我们非常擅长用 Google 进行搜索。我们不断的寻求答案。但是如果坐在同一房间的某人知道所有问题的答案，那么你会有多么高效呢？&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:title1"&gt;
&lt;p&gt;原文：It isn’t hard, it just takes time&amp;#160;&lt;a class="footnote-backref" href="#fnref:title1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:title2"&gt;
&lt;p&gt;原文：You are a professional teacher&amp;#160;&lt;a class="footnote-backref" href="#fnref:title2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:monad"&gt;
&lt;p&gt;函数式编程中的一个概念，在任何 FP 语言中都能使用，详见 &lt;a href="http://www.zhihu.com/question/19635359"&gt;知乎&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:monad" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="翻译"></category><category term="non-tech"></category></entry><entry><title>快速回忆你用过的 Git</title><link href="https://loggerhead.me/posts/kuai-su-hui-yi-ni-yong-guo-de-git.html" rel="alternate"></link><published>2015-07-02T15:22:38+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2015-07-02:posts/kuai-su-hui-yi-ni-yong-guo-de-git.html</id><summary type="html">&lt;p&gt;本文所介绍的内容大部分是 &lt;a href="https://git-scm.com/doc"&gt;Pro Git 2nd Edition&lt;/a&gt; 第二、三章中出现的常用命令，如果你有时间，建议将此书看一遍。&lt;/p&gt;


&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;基本原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitignore"&gt;.gitignore 文件&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;模式规则&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#glob"&gt;Glob 模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;查看信息&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#-git-help-command"&gt;列出帮助信息 -- git help &amp;lt;command&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-status"&gt;列出文件状态 -- git status&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#git-status-s"&gt;git status -s 示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-log"&gt;查看提交历史 -- git log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-diff"&gt;查看详细修改 -- git diff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;本地仓库&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#-git-init-directory"&gt;创建仓库 -- git init [directory]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-add-pathspec"&gt;跟踪文件 -- git add [&amp;lt;pathspec&amp;gt;...]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-rm-file"&gt;删除文件 -- git rm &amp;lt;file&amp;gt;...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-mv-source-destination"&gt;重命名文件 -- git mv &amp;lt;source&amp;gt; &amp;lt;destination&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;状态变动&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#-git-stage-pathspec"&gt;暂存文件 -- git stage &amp;lt;pathspec&amp;gt;...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-reset"&gt;取消暂存 -- git reset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-commit"&gt;提交修改 -- git commit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;远程仓库&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#-git-clone-repository-directory"&gt;克隆远程仓库 -- git clone &amp;lt;repository&amp;gt; [&amp;lt;directory&amp;gt;]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-remote"&gt;添加、删除、列出远程仓库 -- git remote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-ls-remote-url"&gt;列出远程仓库的所有引用 -- git ls-remote [&amp;lt;url&amp;gt;]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-push"&gt;更新远程仓库 -- git push&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-pull"&gt;下载并合并远程仓库的数据 -- git pull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-fetch-remote"&gt;下载远程仓库的数据 -- git fetch [&amp;lt;remote&amp;gt;]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;用远程仓库覆盖本地分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-submodule"&gt;子模块操作 -- git submodule&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;分支操作&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#-git-branch"&gt;创建、删除、列出分支 -- git branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-checkout"&gt;切换分支 -- git checkout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-git-tag"&gt;创建、删除、列出标签 -- git tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="_1"&gt;基本原理&lt;/h1&gt;
&lt;p&gt;Git 管理项目时，文件在三个区域转移：工作区，暂存区，以及本地仓库。&lt;/p&gt;
&lt;p&gt;&lt;img alt="git areas" src="https://dn-loggerhead.qbox.me/images/git-areas.png" /&gt;&lt;/p&gt;
&lt;p&gt;简单的说，工作区就是 &lt;code&gt;.git&lt;/code&gt; 所在目录，暂存区就是 &lt;code&gt;.git/index&lt;/code&gt; 文件，本地仓库就是 &lt;code&gt;.git&lt;/code&gt; 目录。实际上，暂存区是一个包含文件索引的目录树，记录了文件的各种信息（文件名、文件长度、修改时间等），而文件内容则存放在 &lt;code&gt;.git/objects&lt;/code&gt; 目录下。&lt;/p&gt;
&lt;p&gt;&lt;img alt="git stage" src="https://dn-loggerhead.qbox.me/images/git-stage.png" /&gt;&lt;/p&gt;
&lt;p&gt;Git 将 commit、文件、目录统统视为对象。对象以 &lt;code&gt;SHA1&lt;/code&gt; 值作为指纹，与其他对象相区分，Git 命令操作的最小单位是对象。
Git 会将文件的副本存放在 .git 文件夹下，每个文件都根据文件内容进行操作。&lt;/p&gt;
&lt;p&gt;&lt;img alt="git objects" src="https://dn-loggerhead.qbox.me/images/git-commit-and-tree.png" /&gt;&lt;/p&gt;
&lt;p&gt;由 Git 管理的文件始终在四种状态之间迁移，分别是：未跟踪（Untracked）、未修改（Unmodified）、已修改（Modified）或已暂存（Staged）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="git file lifecycle" src="https://dn-loggerhead.qbox.me/images/git-lifecycle.png" /&gt;&lt;/p&gt;
&lt;p&gt;HEAD、分支（branch）、标签（tag）都是指针，均直接或间接指向相应的 commit。HEAD 始终指向当前分支，分支和标签指向对应的 commit。通过 &lt;code&gt;git cat-file -p &amp;lt;SHA1&amp;gt;&lt;/code&gt; 可查看 commit 内容。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat .git/HEAD
ref: refs/heads/master
$ cat refs/heads/master
44181f5600579209649bf30c2dbe9227c68a3a58
$ cat refs/tags/v0.1
0d84e16dc2e19a309865202a4d2d2e267c1f315e
$ git cat-file -p 0d84e16dc2e19a309865202a4d2d2e267c1f315e
tree 7b2366b4fb6aa745d1ad542be660cab47ca6247e
parent 0acf7329fb3dec0a4f4eef2ae0d6c0e376435300
author loggerhead &amp;lt;lloggerhead@gmail.com&amp;gt; &lt;span class="m"&gt;1434017010&lt;/span&gt; +0800
committer loggerhead &amp;lt;lloggerhead@gmail.com&amp;gt; &lt;span class="m"&gt;1434017010&lt;/span&gt; +0800

add ldconfig explain
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;img alt="branch, tag and history" src="https://dn-loggerhead.qbox.me/images/git-branch-and-history.png" /&gt;&lt;/p&gt;
&lt;h1 id="gitignore"&gt;.gitignore 文件&lt;/h1&gt;
&lt;p&gt;.gitignore 文件包含一些模式，用以描述不想跟踪的文件。&lt;/p&gt;
&lt;h2 id="_2"&gt;模式规则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;忽略空行 或 &lt;code&gt;#&lt;/code&gt; 开头的行&lt;/li&gt;
&lt;li&gt;标准 glob 模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; 开头避免递归&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; 结尾表示目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!&lt;/code&gt; 开头表示反转该模式.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="glob"&gt;Glob 模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; 匹配大于等于0个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[abc]&lt;/code&gt; 匹配括号中的任意一个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; 匹配1个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt; 匹配目录，如：&lt;code&gt;a/**/z&lt;/code&gt; 会匹配 &lt;code&gt;a/z&lt;/code&gt;、&lt;code&gt;a/b/z&lt;/code&gt;、&lt;code&gt;a/b/c/z&lt;/code&gt; 等等&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 忽略所有的 .a 文件&lt;/span&gt;
*.a
&lt;span class="c1"&gt;# 不忽略 lib.a 文件, 即使上一条规则说了要忽略&lt;/span&gt;
!lib.a
&lt;span class="c1"&gt;# 仅仅忽略当前目录下的 TODO 文件&lt;/span&gt;
/TODO
&lt;span class="c1"&gt;# 忽略所有 build/ 目录下的文件&lt;/span&gt;
build/
&lt;span class="c1"&gt;# 忽略 doc/notes.txt, 但是不忽略 doc/server/arch.txt&lt;/span&gt;
doc/*.txt
&lt;span class="c1"&gt;# 忽略所有位于 doc/ 目录下的 .txt 文件&lt;/span&gt;
doc/**/*.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1 id="_3"&gt;查看信息&lt;/h1&gt;
&lt;h2 id="-git-help-command"&gt;列出帮助信息 -- &lt;code&gt;git help &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;h2 id="-git-status"&gt;列出文件状态 -- &lt;code&gt;git status&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;列出处于未跟踪、已修改或已暂存状态的文件。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git status
git status -s
git status --short
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="git-status-s"&gt;&lt;code&gt;git status -s&lt;/code&gt; 示例&lt;/h3&gt;
&lt;p&gt;输出分四栏，第一栏表示文件已暂存，第二栏表示文件已修改，第三栏是空格，第四栏是文件路径。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# git status -s&lt;/span&gt;
 M README               &lt;span class="c1"&gt;# 已修改但未暂存&lt;/span&gt;
MM Rakefile             &lt;span class="c1"&gt;# 已修改且已暂存，然后又被修改了&lt;/span&gt;
A  lib/git.rb           &lt;span class="c1"&gt;# 新文件&lt;/span&gt;
M  lib/simplegit.rb     &lt;span class="c1"&gt;# 已修改且已暂存&lt;/span&gt;
?? LICENSE.txt          &lt;span class="c1"&gt;# 未跟踪&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="-git-log"&gt;查看提交历史 -- &lt;code&gt;git log&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git log -p&lt;/code&gt;: 查看提交历史和每次提交的详细修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log -&amp;lt;n&amp;gt;&lt;/code&gt;: 查看最近 n 次提交历史&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --stat&lt;/code&gt;: 查看提交历史和每次提交的修改情况&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --since=1.weeks&lt;/code&gt;: 查看最近一星期的提交历史&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --until=1.weeks&lt;/code&gt;: 查看到上星期为止的提交历史&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --grep=hel.o&lt;/code&gt;: 查看提交信息匹配 &lt;code&gt;hel.o&lt;/code&gt; 的提交历史&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --author=f.o&lt;/code&gt;: 查看作者名匹配 &lt;code&gt;f.o&lt;/code&gt; 的提交历史&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log -S&amp;lt;string&amp;gt;&lt;/code&gt;: 查看改动过 &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; 的提交历史&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git log --oneline --decorate --color --graph
git log -Sfunction_name
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="-git-diff"&gt;查看详细修改 -- &lt;code&gt;git diff&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;查看已修改文件的详细修改。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git diff --staged&lt;/code&gt;: 查看已暂存文件和最后一次提交（commit）相比的详细修改（&lt;code&gt;cached&lt;/code&gt; 是 &lt;code&gt;staged&lt;/code&gt; 的同义词）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_4"&gt;本地仓库&lt;/h1&gt;
&lt;h2 id="-git-init-directory"&gt;创建仓库 -- &lt;code&gt;git init [directory]&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;创建仓库或重置已有仓库。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git init
git init .
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="-git-add-pathspec"&gt;跟踪文件 -- &lt;code&gt;git add [&amp;lt;pathspec&amp;gt;...]&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;跟踪（track）新文件。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="-git-rm-file"&gt;删除文件 -- &lt;code&gt;git rm &amp;lt;file&amp;gt;...&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;删除已跟踪且已提交的文件，并从工作区删除。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git rm -f &amp;lt;file&amp;gt;&lt;/code&gt;: 删除已跟踪的文件，并从工作区删除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rm --cached &amp;lt;file&amp;gt;&lt;/code&gt;: 删除已跟踪的文件，但不从工作区删除&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git rm&lt;/code&gt; 命令接受 glob 模式的参数，只不过 &lt;code&gt;*&lt;/code&gt; 之前需要一个 &lt;code&gt;\&lt;/code&gt;，因为 Git 内部会对 &lt;code&gt;*&lt;/code&gt; 作处理，而没有 &lt;code&gt;\&lt;/code&gt; 的话，shell 会先将 &lt;code&gt;*&lt;/code&gt; 展开例如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rm --cached &lt;span class="se"&gt;\*\*&lt;/span&gt;/&lt;span class="se"&gt;\*&lt;/span&gt;.log
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="-git-mv-source-destination"&gt;重命名文件 -- &lt;code&gt;git mv &amp;lt;source&amp;gt; &amp;lt;destination&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git mv README.md README
&lt;span class="c1"&gt;# 等价于下面三个命令&lt;/span&gt;
mv README.md README
git rm README.md
git add README
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1 id="_5"&gt;状态变动&lt;/h1&gt;
&lt;h2 id="-git-stage-pathspec"&gt;暂存文件 -- &lt;code&gt;git stage &amp;lt;pathspec&amp;gt;...&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;暂存（stage）修改的文件，与 &lt;code&gt;add&lt;/code&gt; 是同义词。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git stage  .&lt;/code&gt;: 暂存已修改的文件和新文件，不暂存删除变动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stage -u&lt;/code&gt;: 暂存已修改的文件和删除变动，不暂存新文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stage -A&lt;/code&gt;: 暂存所有文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="-git-reset"&gt;取消暂存 -- &lt;code&gt;git reset&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git reset HEAD &amp;lt;file&amp;gt;...&lt;/code&gt;: 取消暂存（unstage）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard &amp;lt;file&amp;gt;...&lt;/code&gt;: 丢弃对应文件未提交的修改（&lt;strong&gt;所有修改都会消失，慎用&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD&lt;/code&gt;: 丢弃所有未提交的修改（&lt;strong&gt;所有修改都会消失，慎用&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="-git-commit"&gt;提交修改 -- &lt;code&gt;git commit&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git commit -a&lt;/code&gt;: 暂存所有已跟踪的文件，并提交修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;lt;msg&amp;gt;&lt;/code&gt;: 提交修改，并将 &lt;code&gt;msg&lt;/code&gt; 作为提交信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -v&lt;/code&gt;: 提交修改，并将 &lt;code&gt;diff&lt;/code&gt; 结果附在提交信息中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit --amend&lt;/code&gt;: 重新提交修改&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 暂存并提交&lt;/span&gt;
git commit -a -m &lt;span class="s1"&gt;&amp;#39;added new benchmarks&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# 暂存漏掉的文件，重新提交&lt;/span&gt;
git commit -m &lt;span class="s1"&gt;&amp;#39;initial commit&amp;#39;&lt;/span&gt;
git add forgotten_file
git commit --amend
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1 id="_6"&gt;远程仓库&lt;/h1&gt;
&lt;h2 id="-git-clone-repository-directory"&gt;克隆远程仓库 -- &lt;code&gt;git clone &amp;lt;repository&amp;gt; [&amp;lt;directory&amp;gt;]&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;克隆远程仓库并重命名为 &lt;code&gt;&amp;lt;directory&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/libgit2/libgit2
git clone https://github.com/libgit2/libgit2 libgit2
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="-git-remote"&gt;添加、删除、列出远程仓库 -- &lt;code&gt;git remote&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git remote -v&lt;/code&gt;: 显示远程仓库名和对应的 URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote show &amp;lt;name&amp;gt;&lt;/code&gt;: 显示远程仓库的详细信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote add &amp;lt;name&amp;gt; &amp;lt;url&amp;gt;&lt;/code&gt;: 添加 &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; 作为位于 &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt; 的远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote rename &amp;lt;old&amp;gt; &amp;lt;new&amp;gt;&lt;/code&gt;: 重命名远程仓库和远程仓库本地名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote rm &amp;lt;name&amp;gt;&lt;/code&gt;: 删除远程仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# git remote -v&lt;/span&gt;
origin  https://github.com/schacon/ticgit &lt;span class="o"&gt;(&lt;/span&gt;fetch&lt;span class="o"&gt;)&lt;/span&gt;
origin  https://github.com/schacon/ticgit &lt;span class="o"&gt;(&lt;/span&gt;push&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# git remote add &amp;lt;name&amp;gt; &amp;lt;url&amp;gt;&lt;/span&gt;
git remote add pb https://github.com/paulboone/ticgit
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="-git-ls-remote-url"&gt;列出远程仓库的所有引用 -- &lt;code&gt;git ls-remote [&amp;lt;url&amp;gt;]&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;列出远程仓库的所有引用（remote references），包括分支、标签等。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# git ls-remote&lt;/span&gt;
From git@github.com:loggerhead/lhttpd.git
bc5f82b661d5fec273e66a765d23a761b74c6a54    HEAD
22f3f0ec3b612c368b3a8b9aa15012e91e48c4f6    refs/heads/dev
bc5f82b661d5fec273e66a765d23a761b74c6a54    refs/heads/master
0d84e16dc2e19a309865202a4d2d2e267c1f315e    refs/tags/v0.1
22f3f0ec3b612c368b3a8b9aa15012e91e48c4f6    refs/tags/v0.2

&lt;span class="c1"&gt;# git ls-remote https://github.com/loggerhead/lhttpd.git&lt;/span&gt;
bc5f82b661d5fec273e66a765d23a761b74c6a54    HEAD
22f3f0ec3b612c368b3a8b9aa15012e91e48c4f6    refs/heads/dev
bc5f82b661d5fec273e66a765d23a761b74c6a54    refs/heads/master
0d84e16dc2e19a309865202a4d2d2e267c1f315e    refs/tags/v0.1
22f3f0ec3b612c368b3a8b9aa15012e91e48c4f6    refs/tags/v0.2
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="-git-push"&gt;更新远程仓库 -- &lt;code&gt;git push&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git push origin --tags&lt;/code&gt;: 更新远程仓库的标签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;&lt;/code&gt;: 更新 &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; 分支到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push &amp;lt;remote&amp;gt; --delete &amp;lt;remote_branch&amp;gt;&lt;/code&gt;: 删除远程仓库上的 &lt;code&gt;&amp;lt;remote_branch&amp;gt;&lt;/code&gt; 分支&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="-git-pull"&gt;下载并合并远程仓库的数据 -- &lt;code&gt;git pull&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;下载远程仓库的数据，并进行合并。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 大部分情况等价于 `git fetch &amp;amp;&amp;amp; git merge`&lt;/span&gt;
git pull
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="-git-fetch-remote"&gt;下载远程仓库的数据 -- &lt;code&gt;git fetch [&amp;lt;remote&amp;gt;]&lt;/code&gt;&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git fetch origin
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_7"&gt;用远程仓库覆盖本地分支&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git fetch --all
git reset --hard origin/YOUR_BRANCH
&lt;span class="c1"&gt;# 覆盖所有分支&lt;/span&gt;
&lt;span class="c1"&gt;# git reset --hard origin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="-git-submodule"&gt;子模块操作 -- &lt;code&gt;git submodule&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git submodule add &amp;lt;repository&amp;gt;&lt;/code&gt;: 添加子模块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git submodule init&lt;/code&gt;: 初始化子模块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git submodule update&lt;/code&gt;: 更新子模块&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 为项目添加子模块&lt;/span&gt;
git submodule add https://github.com/chaconinc/DbConnector

&lt;span class="c1"&gt;# 下载项目的子模块&lt;/span&gt;
git clone https://github.com/chaconinc/MainProject
&lt;span class="nb"&gt;cd&lt;/span&gt; MainProject
&lt;span class="nb"&gt;cd&lt;/span&gt; DbConnector
&lt;span class="c1"&gt;# 初始化本地配置&lt;/span&gt;
git submodule init
&lt;span class="c1"&gt;# 下载子模块数据并 checkout&lt;/span&gt;
git submodule update

&lt;span class="c1"&gt;# clone 并下载所有子模块&lt;/span&gt;
git clone --recursive https://github.com/chaconinc/MainProject
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1 id="_8"&gt;分支操作&lt;/h1&gt;
&lt;h2 id="-git-branch"&gt;创建、删除、列出分支 -- &lt;code&gt;git branch&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git branch &amp;lt;branchname&amp;gt;&lt;/code&gt;: 创建分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -d &amp;lt;branchname&amp;gt;&lt;/code&gt;: 删除分支，分支必须已经被合并到其他分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -D &amp;lt;branchname&amp;gt;&lt;/code&gt;: 强制删除分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;: 列出所有分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -v&lt;/code&gt;: 列出所有分支和最后一次提交&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --merged&lt;/code&gt;: 列出被合并到当前分支的其他分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --no-merged&lt;/code&gt;: 列出未合并到当前分支的其他分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -u &amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;/code&gt;: 设置当前分支与远程分支 &lt;code&gt;&amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;/code&gt; 同步（track upstream branch）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -vv&lt;/code&gt;: 列出本地分支与远程分支的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# git branch -vv&lt;/span&gt;
  iss53     7e424c3 &lt;span class="o"&gt;[&lt;/span&gt;origin/iss53: ahead 2&lt;span class="o"&gt;]&lt;/span&gt; forgot something          &lt;span class="c1"&gt;# 本地分支比远程分支多2次提交&lt;/span&gt;
  master    1ae2a45 &lt;span class="o"&gt;[&lt;/span&gt;origin/master&lt;span class="o"&gt;]&lt;/span&gt; deploying index fix
* serverfix f8674d9 &lt;span class="o"&gt;[&lt;/span&gt;teamone/server-fix-good: ahead 3, behind 1&lt;span class="o"&gt;]&lt;/span&gt; fix  &lt;span class="c1"&gt;# 当前分支。与远程分支有4次提交未同步&lt;/span&gt;
  testing   5ea463a trying something new                              &lt;span class="c1"&gt;# 没有设置同步的远程分支&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="-git-checkout"&gt;切换分支 -- &lt;code&gt;git checkout&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout &amp;lt;branch&amp;gt;&lt;/code&gt;: 切换到分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b &amp;lt;new_branch&amp;gt; [&amp;lt;start_point&amp;gt;]&lt;/code&gt;: 创建分支，然后切换到该分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -- &amp;lt;file&amp;gt;...&lt;/code&gt;: 还原到最后提交的版本/丢弃修改。&lt;strong&gt;WARNING: 文件的任何修改都会丢失&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 将 HEAD 指针指向 testing 分支&lt;/span&gt;
git checkout testing
&lt;span class="c1"&gt;# 等价于 `git branch testing &amp;amp;&amp;amp; git checkout testing`&lt;/span&gt;
git checkout -b testing
&lt;span class="c1"&gt;# 基于远程仓库 origin 的 master 分支创建分支 testing，并切换到 testing&lt;/span&gt;
git checkout -b testing origin/master
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="-git-tag"&gt;创建、删除、列出标签 -- &lt;code&gt;git tag&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag&lt;/code&gt;: 按字母序列出所有标签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag -l &amp;lt;pattern&amp;gt;&lt;/code&gt;: 列出匹配的标签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag -a &amp;lt;tagname&amp;gt; -m &amp;lt;msg&amp;gt;&lt;/code&gt;: 创建带注释的标签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag &amp;lt;tagname&amp;gt; [&amp;lt;commit&amp;gt;]&lt;/code&gt;: 对 &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; 创建标签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag -d &amp;lt;tagname&amp;gt;&lt;/code&gt;: 删除标签&lt;/li&gt;
&lt;/ul&gt;</summary><category term="工具"></category></entry><entry><title>网络编程--IP 地址</title><link href="https://loggerhead.me/posts/wang-luo-bian-cheng-ip-di-zhi.html" rel="alternate"></link><published>2015-05-06T11:04:38+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2015-05-06:posts/wang-luo-bian-cheng-ip-di-zhi.html</id><summary type="html">&lt;p&gt;我们在进行网络编程时，绝大部分情况都会涉及到 IP 协议，因此了解一下 IP 协议是很有必要的。不过由于 IP 协议本身不算简单，而我们更多的是使用 TCP/UDP 等上层协议进行网络编程，因此要必要了解一下 IP 地址。&lt;/p&gt;


&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#ip"&gt;IP 地址的组织形式&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ip_1"&gt;IP 地址的表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ip_2"&gt;五类 IP 地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;网段与子网掩码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ip_3"&gt;特殊的 IP 地址&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ip_4"&gt;本机 IP&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#127001"&gt;127.0.0.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#0000"&gt;0.0.0.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;局域网地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;广播地址&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="ip"&gt;IP 地址的组织形式&lt;/h1&gt;
&lt;h2 id="ip_1"&gt;IP 地址的表示&lt;/h2&gt;
&lt;p&gt;IP 地址实际上是 32 bit 的数字（也就是4字节），不过由于二进制的可读性太差，所以计算机网络沿用了信息技术中的表示法，将 IP 地址按 8 bit 分成4组，每组用一个十进制数字来表示，数字之间用点做分隔，也就是所谓的 &lt;em&gt;点分十进制&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dotted-decimal notation" src="https://dn-loggerhead.qbox.me/images/dotted-decimal_notation.png" /&gt;&lt;/p&gt;
&lt;p&gt;比如，从上图可以看出 IP 地址 &lt;code&gt;172.16.254.1&lt;/code&gt; 对应于二进制 &lt;code&gt;10101100 00010000 11111110 00000001&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;因为计算机只能识别二进制，所以编程时需要将点分十进制转换成计算机可识别的二进制，这也就是为什么 Linux/Unix 需要 &lt;code&gt;inet_aton&lt;/code&gt; &lt;code&gt;inet_addr&lt;/code&gt; &lt;code&gt;inet_ntoa&lt;/code&gt; 这三个函数进行 IP 地址的转换。&lt;/p&gt;
&lt;h2 id="ip_2"&gt;五类 IP 地址&lt;/h2&gt;
&lt;p&gt;虽说 IP 地址实际上是二进制数字，但它并不是像 &lt;code&gt;0.0.0.0&lt;/code&gt;、&lt;code&gt;0.0.0.1&lt;/code&gt;、&lt;code&gt;0.0.0.2&lt;/code&gt; ... 这样构造的，而是被划分为 ABCDE 五类。那么为什么要划分呢？主要是为了分配、识别和管理的方便&lt;sup id="fnref:alloc"&gt;&lt;a class="footnote-ref" href="#fn:alloc" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;。比如：你看到 &lt;code&gt;3.xxx.xxx.xxx&lt;/code&gt; 马上就能知道，这是 A 类地址，拥有这个地址的肯定是个大型机构（类似 &lt;code&gt;省.市.区.家&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="five classes of IP" src="https://dn-loggerhead.qbox.me/images/five_classes_of_IP.png" /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类别&lt;/th&gt;
&lt;th align="right"&gt;范围&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A 类&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;0.0.0.0 - 127.255.255.255&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于规模非常大的网络，比如国家或者大公司&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B 类&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;128.0.0.0 - 191.255.255.255&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于中等规模的网络，比如学校&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C 类&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;192.0.0.0 - 223.255.255.255&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通常用于小企业&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D 类&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;224.0.0.0 - 239.255.255.255&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于多播&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E 类&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;240.0.0.0 - 255.255.255.255&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;实验用&lt;sup id="fnref:E"&gt;&lt;a class="footnote-ref" href="#fn:E" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;根据接收端的数量，IP 地址又可以分成三种：unicast（特定主机）、broadcast（所有局域网中的主机）或multicast（一组主机）。&lt;/p&gt;
&lt;h2 id="_1"&gt;网段与子网掩码&lt;/h2&gt;
&lt;p&gt;因为广播和路由&lt;sup id="fnref:Subnet_reason"&gt;&lt;a class="footnote-ref" href="#fn:Subnet_reason" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;的存在，需要将 IP 地址划分成不同的网段（试想全地球的人都呆在一个大房子里面会是多么不方便？），例如：ABC 类中的网络 ID 就指明了 IP 所在的网段。有时候为了&lt;del&gt;联机玩魔兽&lt;/del&gt;方便的处理多个主机，我们需要将它们放到一个网段下，而且希望能够与其他主机隔离，这时候就可以通过设置子网掩码将固定网段进一步划分。&lt;/p&gt;
&lt;p&gt;比如：C 类地址 &lt;code&gt;192.168.137.1&lt;/code&gt;，子网掩码 &lt;code&gt;255.255.255.240&lt;/code&gt; 就表示它位于 &lt;code&gt;192.168.137.0 - 192.168.137.15&lt;/code&gt; 网段内，也就是同一个局域网下。&lt;/p&gt;
&lt;p&gt;子网掩码长得很像 IP 地址，它实际上也是二进制数字，例如：&lt;code&gt;255.255.255.240&lt;/code&gt; 对应 &lt;code&gt;11111111 11111111 11111111 11110000&lt;/code&gt;。计算机最擅长做的是什么？二进制的运算。所以判断 IP 地址是不是位于某个网段是通过将 IP 地址与子网掩码做逻辑与来判断的。&lt;sup id="fnref:Subnet_Mask"&gt;&lt;a class="footnote-ref" href="#fn:Subnet_Mask" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="subnet calculattion" src="https://dn-loggerhead.qbox.me/images/subnet_calculattion.png" /&gt;&lt;/p&gt;
&lt;p&gt;子网掩码可以是任意的 32 bits 数字，但是实际中无一例外是以全1开头全0结束。&lt;/p&gt;
&lt;p&gt;相比使用 IP 地址和子网掩码表示网段，CIDR（Classless Inter-Domain Routing）表示法更为方便，可读性也更高。前面的例子用 CIDR 表示为 &lt;code&gt;192.168.137.0/28&lt;/code&gt;。CIDR 表示法由三部分组成：IP 地址、斜杠、掩码前缀1的个数。网段的计算方法和子网掩码方式等价，除了斜杠后的数字表示子网掩码1开头的位数以外，并无区别。看下面这个例子就明白了。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;&lt;code&gt;192.168.100.0/22&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;11000000 10101000 01100100 00000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;11111111 11111111 11111100 00000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;192.168.10&lt;strong&gt;0.0&lt;/strong&gt; - 192.168.10&lt;strong&gt;3.255&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id="ip_3"&gt;特殊的 IP 地址&lt;/h1&gt;
&lt;p&gt;有些特殊的 IP 地址&lt;sup id="fnref:special_ip"&gt;&lt;a class="footnote-ref" href="#fn:special_ip" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;我们在编程时经常遇到，这里列个表总结一下。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CIDR地址块&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0.0.0.0&lt;sup id="fnref:0.0.0.0"&gt;&lt;a class="footnote-ref" href="#fn:0.0.0.0" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;本机的所有 IP 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;127.0.0.0/8&lt;/td&gt;
&lt;td&gt;环回地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10.0.0.0/8&lt;/td&gt;
&lt;td&gt;局域网&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;172.16.0.0/12&lt;/td&gt;
&lt;td&gt;局域网&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;192.168.0.0/16&lt;/td&gt;
&lt;td&gt;局域网&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;224.0.0.1&lt;/td&gt;
&lt;td&gt;子网所有设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;255.255.255.255&lt;/td&gt;
&lt;td&gt;广播地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;子网最后一个地址&lt;/td&gt;
&lt;td&gt;广播地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;子网的第一个地址&lt;/td&gt;
&lt;td&gt;网络识别码，代表整个子网，不能被分配&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="ip_4"&gt;本机 IP&lt;/h2&gt;
&lt;h3 id="127001"&gt;127.0.0.1&lt;/h3&gt;
&lt;p&gt;假设你需要写一个服务器。我们知道，监听套接字的时候得绑定一个 IP 地址，要不然客户端就不知道跟谁通信了。假设你在宿舍调试到一半要去上课，于是抱着电脑跑到教学楼，连上 WiFi，查看获取到的 IP ，再更改代码或者配置里面的 IP 地址，然后继续调试，下课回到寝室又得重复这个步骤...&lt;/p&gt;
&lt;p&gt;环回地址解决了这个问题。它表示本机地址，发往环回地址的报文都不会出现在网络中（主机之外），而是被直接送到入口队列中（如果抓包不到，可能是这个原因）。所以 &lt;code&gt;127.0.0.1&lt;/code&gt; 经常被用于调试或本机进程间通信。&lt;/p&gt;
&lt;h3 id="0000"&gt;0.0.0.0&lt;/h3&gt;
&lt;p&gt;回到前面那个例子，虽然将套接字绑定在 &lt;code&gt;127.0.0.1&lt;/code&gt; 上能避免更换网络环境时改 IP 的麻烦，但是其他机器就访问不了服务器了。为了既能避免改 IP 的麻烦，又能让其他机器连接上来，我们可以将套接字绑定在 &lt;code&gt;0.0.0.0&lt;/code&gt; 上。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0.0.0.0&lt;/code&gt; 代表了本机上所有的 IP 地址，什么意思呢？当你输入 &lt;code&gt;ifconfig&lt;/code&gt; 命令的时候，你会看到一堆的 IP，包括：每个网卡的 IP、虚拟机的 IP、环回接口的 IP...而 &lt;code&gt;0.0.0.0&lt;/code&gt; 就像黑洞，吞下了所有发往这些 IP 的数据。你从局域网访问服务器，它就是局域网的 IP，从本机访问它就是 &lt;code&gt;127.0.0.1&lt;/code&gt;...&lt;/p&gt;
&lt;h2 id="_2"&gt;局域网地址&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;10.0.0.0 - 10.255.255.255&lt;/code&gt;、&lt;code&gt;172.16.0.0 - 172.31.255.255&lt;/code&gt;、&lt;code&gt;192.168.0.0 - 192.168.255.255&lt;/code&gt; 表示局域网 IP。位于局域网中的主机不能直接与公共网络通信，这些 IP 地址在局域网外也不能路由。但通过 &lt;a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2"&gt;NAT&lt;/a&gt; 可以做到前者。&lt;/p&gt;
&lt;p&gt;如果你的服务器别人访问不了，检查一下 IP 地址是不是位于局域网中（也有可能是被网络管理员限制了）。&lt;/p&gt;
&lt;h2 id="_3"&gt;广播地址&lt;/h2&gt;
&lt;p&gt;如果你不知道什么是广播，分别 &lt;code&gt;ping&lt;/code&gt; 一下 &lt;code&gt;224.0.0.1&lt;/code&gt;、&lt;code&gt;255.255.255.255&lt;/code&gt;、&lt;code&gt;子网最后一个 IP&lt;/code&gt; 看看会发生什么。&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id="_4"&gt;参考文献&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Dot-decimal_notation"&gt;Wiki: Dot-decimal notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.erg.abdn.ac.uk/users/gorry/course/inet-pages/ip-address.html"&gt;IP address&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.blurtit.com/62062/why-are-ip-addresses-divided-into-classes"&gt;Why are IP addresses divided into classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://packetlife.net/blog/2010/oct/14/ipv4-exhaustion-what-about-class-e-addresses/"&gt;IPv4 exhaustion what about class E addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/vamei/archive/2012/11/30/2794917.html"&gt;协议森林03 IP接力赛 (IP, ARP, RIP和BGP协议)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#Background"&gt;Wiki: Classless Inter-Domain Routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/IPv4"&gt;Wiki: IPv4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:alloc"&gt;
&lt;p&gt;因为每个主机都有唯一的 IP，所以必须由一个组织—— Internet Network Information Center，来集中管理、分配。&lt;a href="http://www.proxyforest.com/e-allocate.htm"&gt;戳这里&lt;/a&gt;了解具体的分配情况。&amp;#160;&lt;a class="footnote-backref" href="#fnref:alloc" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:E"&gt;
&lt;p&gt;IPv4 出现地址耗尽危机后有人提议使用 E 类地址，但是由于有些操作系统和路由器不支持 E 类地址，所以这部分地址并不能在实际中使用。&amp;#160;&lt;a class="footnote-backref" href="#fnref:E" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:Subnet_reason"&gt;
&lt;p&gt;因为路由器需要使用路由表保存所在网段的路由信息，而路由器的硬件资源有限只能保存部分路由信息，如果网段主机太多会导致路由表更新频繁，从而致使网络质量下降，所以需要划分网段。&amp;#160;&lt;a class="footnote-backref" href="#fnref:Subnet_reason" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:Subnet_Mask"&gt;
&lt;p&gt;&lt;a href="http://www.indiabix.com/networking/subnetting/"&gt;这里&lt;/a&gt;有些习题帮你巩固子网掩码的概念。&amp;#160;&lt;a class="footnote-backref" href="#fnref:Subnet_Mask" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:special_ip"&gt;
&lt;p&gt;&lt;a href="https://zh.wikipedia.org/wiki/IPv4#.E7.89.B9.E6.AE.8A.E7.94.A8.E9.80.94.E7.9A.84.E5.9C.B0.E5.9D.80"&gt;Wiki&lt;/a&gt; 上有更完整的特殊 IP 地址的列表。&amp;#160;&lt;a class="footnote-backref" href="#fnref:special_ip" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:0.0.0.0"&gt;
&lt;p&gt;全零网络的详情见 &lt;a href="https://en.wikipedia.org/wiki/0.0.0.0"&gt;Wiki&lt;/a&gt; 和 &lt;a href="http://www.cnblogs.com/hnrainll/archive/2011/10/13/2210101.html"&gt;hnrainll的博客&lt;/a&gt;。&amp;#160;&lt;a class="footnote-backref" href="#fnref:0.0.0.0" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="网络"></category><category term="IP"></category></entry><entry><title>LaTeX 排版简介--快速入门</title><link href="https://loggerhead.me/posts/latex-pai-ban-jian-jie-kuai-su-ru-men.html" rel="alternate"></link><published>2015-04-18T16:24:00+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2015-04-18:posts/latex-pai-ban-jian-jie-kuai-su-ru-men.html</id><summary type="html">&lt;p&gt;本文将介绍以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LaTeX 对空格、换行、注释的处理&lt;/li&gt;
&lt;li&gt;LaTeX 命令的基本形式&lt;/li&gt;
&lt;li&gt;如何进一步学习 LaTeX&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是&lt;strong&gt;不介绍&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何安装 LaTeX。如果你是 Mac 用户，那么可以参考&lt;a href="https://loggerhead.me/posts/latex-zai-mac-xia-de-zhong-wen-huan-jing-pei-zhi.html"&gt;这篇文章&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;基本的排版&lt;/li&gt;
&lt;li&gt;常用的命令和环境&lt;/li&gt;
&lt;/ul&gt;


&lt;h1 id="_1"&gt;你好，世界&lt;/h1&gt;
&lt;p&gt;我们先看一个最简单的示例。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% 文档类型是 article&lt;/span&gt;
&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;article&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% --- 导言区开始 ---&lt;/span&gt;
&lt;span class="c"&gt;% 使用 xeCJK 宏包，用于排版中日韩文字，CJK 是 China、Japan、Korea 的缩写&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;xeCJK&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% 设置正文罗马族的 CJK 字体为 STSong，粗体：STHeiti，斜体：STKaiti&lt;/span&gt;
&lt;span class="k"&gt;\setCJKmainfont&lt;/span&gt;&lt;span class="na"&gt;[BoldFont=STHeiti,ItalicFont=STKaiti]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;STSong&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% 设置正文无衬线族的 CJK 字体为 STXihei，粗体：STHeiti&lt;/span&gt;
&lt;span class="k"&gt;\setCJKsansfont&lt;/span&gt;&lt;span class="na"&gt;[BoldFont=STHeiti]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;STXihei&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% 设置正文等宽族的 CJK 字体为 STFangsong&lt;/span&gt;
&lt;span class="k"&gt;\setCJKmonofont&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;STFangsong&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% --- 导言区结束 ---&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
你好，世界
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;相信看完示例，你会有很多疑问，比如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; 是注释当前行吗？&lt;/li&gt;
&lt;li&gt;命令都是以 &lt;code&gt;\&lt;/code&gt; 开头吗？&lt;/li&gt;
&lt;li&gt;既然 &lt;code&gt;\documentclass&lt;/code&gt; 有参数，那是不是有别的文档类型？&lt;/li&gt;
&lt;li&gt;宏包是什么，有什么用？&lt;/li&gt;
&lt;li&gt;导言区是什么？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\begin{document}&lt;/code&gt; 和 &lt;code&gt;\end{document}&lt;/code&gt; 的作用是什么？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果将示例与下面的代码对比，是不是发现一些相似之处？相信看完下文你会得到答案的。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 导入 stdio.h 头文件&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// main begin&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;你好，世界&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// main end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1 id="_2"&gt;输入文件&lt;/h1&gt;
&lt;p&gt;虽说大部分 LaTeX 的规则或命令都有一致的规律，但是也存在一些与直觉相违背的地方，特别是某些特殊的字符。这里先将这些字符列出来，再对某些字符进行说明。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;显示&lt;/th&gt;
&lt;th&gt;输入&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;空格 x 1&lt;/td&gt;
&lt;td&gt;空白字符 x N、换行 x 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;新段&lt;/td&gt;
&lt;td&gt;换行 x N (N &amp;gt; 1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;新行&lt;/td&gt;
&lt;td&gt;\\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;td&gt;\textbackslash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;\#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;\$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;\%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;\^&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;\&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_&lt;/td&gt;
&lt;td&gt;\_&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{&lt;/td&gt;
&lt;td&gt;\{&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;}&lt;/td&gt;
&lt;td&gt;\}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~&lt;/td&gt;
&lt;td&gt;\~&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_3"&gt;导言区&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;\documentclass&lt;/code&gt; 和 &lt;code&gt;\begin{document}&lt;/code&gt; 之间的部分叫做&lt;strong&gt;导言区&lt;/strong&gt;（preamble）。我们可以在导言区加载宏包或者设置影响整个文档的样式，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\usepackage{minted}&lt;/code&gt; 加载 minted 宏包，用于排版代码 &lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;\setCJKxxxxfont{...}&lt;/code&gt; 设置中文字体&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\setlength{\parskip}{1em}&lt;/code&gt; 设置段间距为 &lt;a href="http://tex.stackexchange.com/questions/8260/what-are-the-various-units-ex-em-in-pt-bp-dd-pc-expressed-in-mm"&gt;1em&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LaTeX 文档必须以 &lt;code&gt;\documentclass&lt;/code&gt; 开头。而所有&lt;strong&gt;想要显示的内容&lt;/strong&gt;都必须位于 &lt;code&gt;\begin{document}&lt;/code&gt; 和 &lt;code&gt;\end{document}&lt;/code&gt; 之间。 &lt;/p&gt;
&lt;h2 id="_4"&gt;空格&lt;/h2&gt;
&lt;p&gt;LaTeX 第一个与直觉相违背的地方就是空白字符。它既不像C语言全部忽略，也不是有多少就显示多少。而是将&lt;strong&gt;多个空白字符当做一个空格&lt;/strong&gt;处理。这里所说的空白字符包括：空格、制表符（tab）或一个换行。&lt;/p&gt;
&lt;p&gt;&lt;img alt="spaces example" src="https://dn-loggerhead.qbox.me/images/spaces_example.png" /&gt;&lt;/p&gt;
&lt;p&gt;左边是输入，右边是输出（下文同）。输入是 &lt;code&gt;你好，[换行][空格x2]世界&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id="_5"&gt;换行&lt;/h2&gt;
&lt;p&gt;虽然换行也是空白字符，但对一个换行和多个换行的处理又有不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个换行 = 一个空格&lt;/li&gt;
&lt;li&gt;多个换行&lt;strong&gt;表示一个段落的结束和另一个段落的开始&lt;/strong&gt;（和 Markdown 一样）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="paragraph example" src="https://dn-loggerhead.qbox.me/images/paragraph_example.png" /&gt;&lt;/p&gt;
&lt;h2 id="_6"&gt;注释&lt;/h2&gt;
&lt;h3 id="_7"&gt;单行注释&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;%&lt;/code&gt; 表示注释当前行，同时&lt;strong&gt;忽略换行和下一行开头的空白字符&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="comment example" src="https://dn-loggerhead.qbox.me/images/comment_example.png" /&gt;&lt;/p&gt;
&lt;h3 id="_8"&gt;多行注释&lt;/h3&gt;
&lt;p&gt;先在导言区加入 &lt;code&gt;\usepackage{verbatim}&lt;/code&gt; ，再像下图一样将注释放在 &lt;code&gt;\begin{comment}&lt;/code&gt; 和 &lt;code&gt;\end{comment}&lt;/code&gt; 之间就行了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="multi-line comment example" src="https://dn-loggerhead.qbox.me/images/multi-line_comment_example.png" /&gt;&lt;/p&gt;
&lt;p&gt;因为一个换行等价于一个空格，所以上图多出来一个空格。如果不想要，这时候 &lt;code&gt;%&lt;/code&gt; 就派上用场了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="multi-line comment example" src="https://dn-loggerhead.qbox.me/images/multi-line_comment_notice_example.png" /&gt;&lt;/p&gt;
&lt;h1 id="latex"&gt;LaTeX 命令&lt;/h1&gt;
&lt;h2 id="_9"&gt;基本格式&lt;/h2&gt;
&lt;p&gt;LaTeX 命令的基本格式如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\command&lt;/span&gt;&lt;span class="na"&gt;[optional]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;paramter&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;对有些命令来说，参数是必须的，放在 &lt;code&gt;paramter&lt;/code&gt; 的位置。可选参数放在 &lt;code&gt;optional&lt;/code&gt; 的位置。其中 &lt;code&gt;\command&lt;/code&gt; 有三种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由&lt;strong&gt;对大小写敏感的字母&lt;/strong&gt;组成，任何&lt;strong&gt;其他字符&lt;/strong&gt;表示结束。如：&lt;code&gt;\newline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;由 &lt;code&gt;\&lt;/code&gt; 紧挨着一个&lt;strong&gt;非字母字符&lt;/strong&gt;组成。如：&lt;code&gt;\\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\command*[optional]{paramter}&lt;/code&gt; ，表示命令的变种。如：&lt;code&gt;\section*{}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;\command&lt;/code&gt; 后面的所有空白字符都将被忽略，除非加一对花括号 &lt;code&gt;{}&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img alt="command example" src="https://dn-loggerhead.qbox.me/images/command_example.png" /&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是，&lt;a href="http://tex.stackexchange.com/questions/6497/the-scope-of-latex-commands"&gt;LaTeX 命令并没有一致的作用域&lt;/a&gt;。有些命令只影响它的参数，比如：&lt;code&gt;\emph{foo}&lt;/code&gt;，而有些命令却影响整个段落，比如：&lt;code&gt;\noindent&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="_10"&gt;环境&lt;/h2&gt;
&lt;p&gt;环境是一种特殊的命令，它对包裹起来的内容起作用，其基本格式如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;environment-name&lt;span class="nb"&gt;}&lt;/span&gt;
... text
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;environment-name&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;环境也能带参数，不过也没什么规律...比如：minipage、figure和picture环境能接受的参数就不尽相同。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;minipage&lt;span class="nb"&gt;}&lt;/span&gt;[position]&lt;span class="nb"&gt;{&lt;/span&gt;width&lt;span class="nb"&gt;}&lt;/span&gt;
... text
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;minipage&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;figure&lt;span class="nb"&gt;}&lt;/span&gt;[placement]
  &lt;span class="c"&gt;% body of the figure&lt;/span&gt;
  &lt;span class="k"&gt;\caption&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;figure title&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;figure&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;picture&lt;span class="nb"&gt;}&lt;/span&gt;(width,height)(x offset,y offset)
... picture commands
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;picture&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="documentclass"&gt;documentclass&lt;/h2&gt;
&lt;p&gt;所有的 LaTeX 文档都必须以 &lt;code&gt;\documentclass[options]{class}&lt;/code&gt; 开头，指明文档类型。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;class&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;article&lt;/td&gt;
&lt;td&gt;排版科学期刊、演示文档、短报告、程序文档、邀请函...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;proc&lt;/td&gt;
&lt;td&gt;一个基于article的会议文集类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;minimal&lt;/td&gt;
&lt;td&gt;最小的文档类型。只设置了页面尺寸和基本字体。主要用来debug&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;report&lt;/td&gt;
&lt;td&gt;排版多章节长报告、短篇书籍、博士论文...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;book&lt;/td&gt;
&lt;td&gt;排版书籍&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;slides&lt;/td&gt;
&lt;td&gt;排版幻灯片。该文档类使用大号sans serif字体。也可以考虑用Beamer类型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;options&lt;/code&gt; 定义文档的行为，多个 option 用英文逗号分隔。最常见的 option 见下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;options&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10pt / 11pt / 12pt&lt;/td&gt;
&lt;td&gt;设置文档的主要字体。默认是10pt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a4paper / letterpaper/ a5paper / b5paper / executivepaper / legalpaper&lt;/td&gt;
&lt;td&gt;定义纸张的大小。默认是letterpaper。a4paper就是A4纸的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fleqn&lt;/td&gt;
&lt;td&gt;设置行间公式为左对齐，而不是居中对齐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;leqno&lt;/td&gt;
&lt;td&gt;设置行间公式的编号为左对齐，而不是右对齐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;titlepage / notitlepage&lt;/td&gt;
&lt;td&gt;指定是否在文档标题后另起一页。article默认不开始新页，report和book则相反&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;onecolumn / twocolumn&lt;/td&gt;
&lt;td&gt;以单栏或双栏的方式来排版文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;twoside / oneside&lt;/td&gt;
&lt;td&gt;指定文档为双面或单面打印格式。article和report为单面，book为双面。注意：该选项只是作用于文档样式，而不会通知打印机以双面格式打印文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;landscape&lt;/td&gt;
&lt;td&gt;将文档的打印输出布局设置为landscape模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;openright / openany&lt;/td&gt;
&lt;td&gt;指定新的一章仅在奇数页开始还是在下一页开始。该选项对article不起作用，因为article没有“章”。report默认在下一页开始新一章，而book总是在奇数页开始&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="na"&gt;[11pt,twoside,a4paper]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;article&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;它告诉 LaTeX 以 article 的形式排版文章，设置基本的字体大小为 11pt，布局为适合在 A4 纸上双面打印的形式。&lt;/p&gt;
&lt;h2 id="usepackage"&gt;usepackage&lt;/h2&gt;
&lt;p&gt;宏包的概念类似于编程语言里边库的概念，如果想包含图片、代码、彩色文字、流程图等等，你都得使用宏包。使用宏包的命令是：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="na"&gt;[options]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;package&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;options&lt;/code&gt; 与 &lt;code&gt;\documentclass&lt;/code&gt; 的 &lt;code&gt;options&lt;/code&gt; 相似，用于指定宏包的一些特性。&lt;/p&gt;
&lt;p&gt;如果想了解某个宏包怎么使用，有哪些参数。你可以在终端输入 &lt;code&gt;texdoc&lt;/code&gt; 查看宏包的文档。也可以通过查看 &lt;a href="http://book.douban.com/subject/1418356/"&gt;The LATEX Companion&lt;/a&gt; 来获取需要的信息。&lt;/p&gt;
&lt;h3 id="_11"&gt;安装宏包&lt;/h3&gt;
&lt;h4 id="_12"&gt;自动安装&lt;/h4&gt;
&lt;h5 id="mactex"&gt;MacTeX&lt;/h5&gt;
&lt;p&gt;如果你安装了 MacTeX，那么使用 &lt;code&gt;TeX Live Utility.app&lt;/code&gt; 可以十分方便的安装、更新宏包。&lt;/p&gt;
&lt;h5 id="tex-live-mactex"&gt;TeX Live 或 MacTeX&lt;/h5&gt;
&lt;p&gt;如果你使用 TeX Live 或 MacTeX，那么你可以使用 tlmgr 方便的安装宏包。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tlmgr install &amp;lt;package1&amp;gt; &amp;lt;package2&amp;gt; ...
tlmgr remove &amp;lt;package1&amp;gt; &amp;lt;package2&amp;gt; ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4 id="_13"&gt;手动安装&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;十分麻烦，不建议使用！&lt;/strong&gt;如果你手动安装失败了，一般是第4步弄错了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;a href="http://ctan.org/"&gt;ctan&lt;/a&gt; 搜索需要的宏包，并下载。&lt;/p&gt;
&lt;p&gt;&lt;img alt="download_package_from_ctan" src="https://dn-loggerhead.qbox.me/images/download_package_from_ctan.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压。通常会得到 .ins 文件、.dtx 文件、INSTALL 和 README。如果不存在 .ins 文件，请查看 INSTALL 和 README。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将 .ins 文件视作普通 LaTeX 文档打开编译 ，LaTeX 会从 .dtx 文件中抽取出 .sty 文件。如果是通过命令行编译，那么命令是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
xelatex -shell-escape xxx.ins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将 .sty 文件放到 LaTeX 发行版能找到的目录下，通常路径含 &lt;code&gt;texmf-local&lt;/code&gt; 或 &lt;code&gt;texmf&lt;/code&gt;（"Tex and MetaFont" 的缩写，指代 Latex 发行版的目录树）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;发行版&lt;/th&gt;
&lt;th&gt;目录&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MacTeX&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.tug.org/mactex/faq/#qm05"&gt;~/Library/texmf/tex/latex&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 &lt;code&gt;mkdir -p&lt;/code&gt; 自行创建&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MiKTEX&lt;/td&gt;
&lt;td&gt;任意目录&lt;/td&gt;
&lt;td&gt;得先&lt;a href="http://docs.miktex.org/manual/localadditions.html#id573803"&gt;注册为用户管理的 texmf 目录&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新 LaTeX 文件名数据库。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;发行版&lt;/th&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TEXlive/MacTeX&lt;/td&gt;
&lt;td&gt;&lt;code&gt;texhash&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MiKTEX&lt;/td&gt;
&lt;td&gt;&lt;code&gt;initexmf --update-fndb&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="latex_1"&gt;如何进一步学习 LaTeX&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;如果遇到问题，上 &lt;a href="http://tex.stackexchange.com/"&gt;StackExchange&lt;/a&gt; 搜索，几乎你能遇到的问题都能在上面找到答案。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikibooks.org/wiki/LaTeX"&gt;LaTeX - Wikibooks&lt;/a&gt; 和 &lt;a href="https://www.sharelatex.com/learn"&gt;ShareLaTeX guides&lt;/a&gt; 都是在线文档，内容详细，示例很多。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tobi.oetiker.ch/lshort/lshort.pdf"&gt;The Not So Short Introduction to LaTeX&lt;/a&gt; 又叫做 LATEX2ε in 157 minutes，是一本很不错的入门书，内容简短精炼。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/1418351/"&gt;TeXbook&lt;/a&gt; 是 TeX 语言的作者 Knuth 亲自写的介绍 TeX 基本概念的一本书。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4 id="_14"&gt;参考文献&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tobi.oetiker.ch/lshort/lshort.pdf"&gt;The Not So Short Introduction to LaTeX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sharelatex.com/learn"&gt;ShareLaTeX guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikibooks.org/wiki/LaTeX"&gt;LaTeX - Wikibooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirror.utexas.edu/ctan/macros/xetex/latex/xecjk/xeCJK.pdf"&gt;xeCJK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.maths.tcd.ie/~dwilkins/LaTeXPrimer/Preamble.html"&gt;The Preamble of the LaTeX Input file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyroc.at/blog/2013/04/03/cjk-italics/"&gt;汉字中的“斜体”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="LaTeX"></category></entry><entry><title>LaTeX 在 Mac 下的中文环境配置</title><link href="https://loggerhead.me/posts/latex-zai-mac-xia-de-zhong-wen-huan-jing-pei-zhi.html" rel="alternate"></link><published>2015-04-07T22:51:00+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2015-04-07:posts/latex-zai-mac-xia-de-zhong-wen-huan-jing-pei-zhi.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;本文的目标是让需要对&lt;strong&gt;中文&lt;/strong&gt;论文进行排版的 &lt;strong&gt;OS X&lt;/strong&gt; 用户安装配置好中文环境，编译示例得到 foo.pdf。&lt;/li&gt;
&lt;li&gt;如果只需排版英文，那么中文配置部分可以跳过。&lt;/li&gt;
&lt;li&gt;如果是 Linux/Unix 或 Windows 用户，将 Skim 换成相应的 pdf阅读器（LaTeXing 默认设置中有提及）后，LaTeXing 部分仍适用，但 MacTeX 部分不再适用。&lt;/li&gt;
&lt;/ul&gt;


&lt;h1 id="_1"&gt;安装&lt;/h1&gt;
&lt;p&gt;MacTeX 是必备的。Skim 和 &lt;a href="http://www.latexing.com/features.html"&gt;LaTeXing&lt;/a&gt; 虽说不是必须的，但是强烈推荐安装。后文会介绍它们的作用，先将它们安装好：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mirror.ctan.org/systems/mac/mactex/MacTeX.pkg"&gt;下载 MacTeX.pkg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;a href="https://packagecontrol.io/"&gt;Package Control&lt;/a&gt; 安装 LaTeXing 和 LaTeX-cwl，并重启 Sublime&lt;/li&gt;
&lt;li&gt;&lt;a href="http://skim-app.sourceforge.net/"&gt;下载 Skim&lt;/a&gt;。LaTeXing 需要与它（或者 &lt;em&gt;预览&lt;/em&gt;）配合实现跳转到 pdf。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在下载 MacTeX 的这段时间，我们可以先了解一下 LaTeXing。&lt;/p&gt;
&lt;h2 id="latexing"&gt;LaTeXing&lt;/h2&gt;
&lt;p&gt;LaTeXing 是 &lt;a href="https://www.sublimetext.com/3"&gt;Sublime&lt;/a&gt; 的 LaTeX 插件，与之类似的还有 &lt;a href="https://packagecontrol.io/packages/LaTeXTools"&gt;LaTeXTools&lt;/a&gt;。两者功能类似，只不过 LaTeXing 更容易配置和使用，而且某些功能更加出色。它的特点包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LaTeX 命令自动补全&lt;/p&gt;
&lt;p&gt;&lt;img alt="auto complete" src="https://dn-loggerhead.qbox.me/images/latexing_autocomplete_1.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;丰富的 snippet&lt;/p&gt;
&lt;p&gt;&lt;img alt="snippet" src="https://dn-loggerhead.qbox.me/images/snippet.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;填充引用、宏包、文档类型等任何东西&lt;/p&gt;
&lt;p&gt;&lt;img alt="fill everything" src="https://dn-loggerhead.qbox.me/images/fill_everything.png" /&gt;
&lt;img alt="fill cite" src="https://dn-loggerhead.qbox.me/images/latexing_fill_cite.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快捷键跳转到生成的 pdf&lt;/p&gt;
&lt;p&gt;&lt;img alt="pdf result" src="https://dn-loggerhead.qbox.me/images/pdf_result.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可读性更高的出错提示&lt;/p&gt;
&lt;p&gt;&lt;img alt="error" src="https://dn-loggerhead.qbox.me/images/error.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动补全功能需要安装 LaTeXing 的插件——&lt;a href="https://packagecontrol.io/packages/LaTeX-cwl"&gt;LaTeX-cwl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跳转 pdf 需要照下图设置 Skim&lt;/p&gt;
&lt;p&gt;&lt;img alt="skim config" src="https://dn-loggerhead.qbox.me/images/skim_config.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双击出错信息可以跳转到出错行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_2"&gt;中文配置&lt;/h1&gt;
&lt;h2 id="_3"&gt;安装中文字体&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://coding.net/u/loggerhead/p/fonts/git/archive/master"&gt;下载 STXihei、STSong、STKaiti、STHeiti、STFangsong&lt;/a&gt;，双击它们，系统会调用字体册（Font Book）打开它们，点击安装即可。&lt;/p&gt;
&lt;h2 id="mactex"&gt;配置 MacTeX&lt;/h2&gt;
&lt;p&gt;在终端输入&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim &lt;span class="sb"&gt;`&lt;/span&gt;mdfind ctex-xecjk-winfonts.def &lt;span class="p"&gt;|&lt;/span&gt; egrep &lt;span class="s2"&gt;&amp;quot;texlive/\d{4}/texmf-dist/tex/latex/ctex/fontset/ctex-xecjk-winfonts.def&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;将 &lt;em&gt;ctex-xecjk-winfonts.def&lt;/em&gt; 文件修改成：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% ctex-xecjk-winfonts.def: Windows 的 xeCJK 字体设置，默认为六种中易字体&lt;/span&gt;
&lt;span class="k"&gt;\setCJKmainfont&lt;/span&gt;&lt;span class="na"&gt;[BoldFont={STHeiti},ItalicFont=STKaiti]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;STSong&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setCJKsansfont&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;STHeiti&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setCJKmonofont&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;STFangsong&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\setCJKfamilyfont&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;zhsong&lt;span class="nb"&gt;}{&lt;/span&gt;STSong&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setCJKfamilyfont&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;zhhei&lt;span class="nb"&gt;}{&lt;/span&gt;STHeiti&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setCJKfamilyfont&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;zhkai&lt;span class="nb"&gt;}{&lt;/span&gt;STKaiti&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setCJKfamilyfont&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;zhfs&lt;span class="nb"&gt;}{&lt;/span&gt;STFangsong&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setCJKfamilyfont&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;zhli&lt;span class="nb"&gt;}{&lt;/span&gt;LiSu&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setCJKfamilyfont&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;zhyou&lt;span class="nb"&gt;}{&lt;/span&gt;YouYuan&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\songti&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\CJKfamily&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;zhsong&lt;span class="nb"&gt;}}&lt;/span&gt; &lt;span class="c"&gt;% 宋体&lt;/span&gt;
&lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\heiti&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\CJKfamily&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;zhhei&lt;span class="nb"&gt;}}&lt;/span&gt;   &lt;span class="c"&gt;% 黑体&lt;/span&gt;
&lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\kaishu&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\CJKfamily&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;zhkai&lt;span class="nb"&gt;}}&lt;/span&gt;  &lt;span class="c"&gt;% 楷书&lt;/span&gt;
&lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\fangsong&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\CJKfamily&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;zhfs&lt;span class="nb"&gt;}}&lt;/span&gt; &lt;span class="c"&gt;% 仿宋&lt;/span&gt;
&lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\lishu&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\CJKfamily&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;zhli&lt;span class="nb"&gt;}}&lt;/span&gt;    &lt;span class="c"&gt;% 隶书&lt;/span&gt;
&lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\youyuan&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\CJKfamily&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;zhyou&lt;span class="nb"&gt;}}&lt;/span&gt; &lt;span class="c"&gt;% 幼圆&lt;/span&gt;

&lt;span class="k"&gt;\endinput&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="latexing_1"&gt;配置 LaTeXing&lt;/h2&gt;
&lt;p&gt;点击&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Sublime Text =&amp;gt; Preferences =&amp;gt; Package Settings =&amp;gt; LaTeXing =&amp;gt; Settings - User
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;打开 LaTeXing.sublime-settings，填入以下内容：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;fallback_encoding&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;utf_8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// 打开.tex的同时打开.pdf文件&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;open_pdf_on_load&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// 某些宏包需要这个参数，如：minted&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;build_arguments&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-shell-escape&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;// 使用xelatex而不是pdflatex进行编译&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;quick_build&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Default Build: latexmk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;primary&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;cmds&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;xelatex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Quick Build 1: xelatex + bibtex + xelatex (2x)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;cmds&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;xelatex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bibtex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xelatex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xelatex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Quick Build 2: xelatex + biber + xelatex (2x)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;cmds&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;xelatex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;biber&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xelatex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xelatex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_4"&gt;测试&lt;/h2&gt;
&lt;p&gt;用 Sublime 创建 foo.tex，输入以下内容并保存：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;minimal&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;xeCJK&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setCJKmainfont&lt;/span&gt;&lt;span class="na"&gt;[BoldFont=STHeiti,ItalicFont=STKaiti]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;STSong&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setCJKsansfont&lt;/span&gt;&lt;span class="na"&gt;[BoldFont=STHeiti]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;STXihei&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setCJKmonofont&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;STFangsong&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
你好，世界
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;按 &lt;code&gt;Cmd+B&lt;/code&gt; 进行编译（3083以上版本的 sublime 在弹出框中选择 &lt;code&gt;LaTeX - Primary Quick Build&lt;/code&gt; 作为默认编译方式），如果配置成功，控制台的输出应该是这样&lt;/p&gt;
&lt;p&gt;&lt;img alt="compile result" src="https://dn-loggerhead.qbox.me/images/compile_result.png" /&gt;&lt;/p&gt;
&lt;p&gt;按 &lt;code&gt;Cmd+L Cmd+J&lt;/code&gt; 跳转到生成的 foo.pdf（红点是 .tex 文件改动的地方）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pdf result" src="https://dn-loggerhead.qbox.me/images/pdf_result.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果没能成功编译出 foo.pdf，那么问题很可能是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有安装相应的中文字体&lt;/li&gt;
&lt;li&gt;foo.tex 的文件编码不是 UTF-8。如果你不能确定文件编码，点击 &lt;em&gt;File =&amp;gt; Save with Encoding =&amp;gt; UTF-8&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;LaTeXing 使用 pdflatex 而不是 xelatex 进行编译&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了确定问题的所在，我们在终端输入命令 &lt;code&gt;xelatex foo.tex&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果能生成 foo.pdf，那么是 LaTeXing 没有配置正确。&lt;/li&gt;
&lt;li&gt;如果 xelatex 输出一堆错误信息，那么是中文字体没有安装或配置成功。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果提示 xelatex 命令不存在，输入： &lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
sudo ln -s /Library/TeX/Distributions/Programs/texbin/xelatex /usr/xelatex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;重启终端，重新输入 &lt;code&gt;xelatex foo.tex&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="faq"&gt;FAQ&lt;/h1&gt;
&lt;h2 id="tex-latex"&gt;TeX 与 LaTeX&lt;/h2&gt;
&lt;p&gt;TeX 不仅是一个排版程序，而且是一种程序语言。LaTeX 就是用这种语言写成的一个"TeX 宏包"，它扩展了 TeX 的功能，使我们很方便的逻辑的进行创作而不是专心于字体，缩进这些烦人的东西。类似 C++ 与 MFC、Ruby 与 Ruby on Rails 的关系。&lt;/p&gt;
&lt;h2 id="latex-latex2e"&gt;LaTeX 与 LaTeX2e&lt;/h2&gt;
&lt;p&gt;LaTeX2 &lt;span class="math"&gt;\varepsilon&lt;/span&gt; 是 LaTeX 目前的版本。以前的 LaTeX 叫做 LaTeX 2.09。现在随便下载一个 TeX 系统，里面带的 LaTeX 都是 LaTeX2 &lt;span class="math"&gt;\varepsilon&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id="mactex-miktex"&gt;MacTeX 与 MikTeX&lt;/h2&gt;
&lt;p&gt;不同的 TeX 发行版本而已，比如 OS X 下有 MacTeX，Windows 下有 MikTeX，Linux/UNIX 下有 teTeX 和 TeX Live。TeX 与它们的关系就像 Linux 内核与 Debian、Redhat、Arch 的关系一样。所以每个 TeX 发行版里都包含了 TeX，LaTeX 等等。&lt;/p&gt;
&lt;h2 id="latex-cjkxecjk"&gt;LaTeX 与 CJK、xeCJK&lt;/h2&gt;
&lt;p&gt;CJK、xeCJK 都是 LaTeX 的宏包，MacTeX.pkg 里面已经包含了它们，不必再自行安装。&lt;/p&gt;</summary><category term="LaTeX"></category><category term="Mac"></category></entry><entry><title>AES 加密算法的实现</title><link href="https://loggerhead.me/posts/aes-jia-mi-suan-fa-de-shi-xian.html" rel="alternate"></link><published>2014-03-24T17:27:37+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2014-03-24:posts/aes-jia-mi-suan-fa-de-shi-xian.html</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"&gt;AES (Advanced Encryption
Standard)&lt;/a&gt; 是由 NIST (美国国家标准与技术研究院) 发布于 &lt;a href="http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf"&gt;FIPS
PUB 197&lt;/a&gt; 用来替代 &lt;a href="https://en.wikipedia.org/wiki/Data_Encryption_Standard"&gt;DES (Data Encryption
Standard)&lt;/a&gt; 的高级加密标准。而 Rijndael 算法是被 NIST 认为符合 AES 且被采用的一种对称加密算法，所以一般对 AES 和 Rijndael 算法这两个概念不予细究。&lt;/p&gt;
&lt;p&gt;由于本文主要介绍 AES 算法的实现，对其原理不作详细介绍，所以和算法实现有关的数学知识我就只粗略提一下。文中出现的伪代码和实际实现有些出入，仅供读者理解算法各部分的实现思路。至于算法的各种实现细节，可以参考我用 &lt;a href="https://github.com/loggerhead/lab/blob/master/rijndael_cipher.py"&gt;python 写的源代码&lt;/a&gt;。&lt;/p&gt;


&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;数学基础&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;有限域加法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;有限域乘法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;算法说明&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_5"&gt;预处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;伪代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;算法实现&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#subbytes"&gt;字节替代 SubBytes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#s-box"&gt;S-Box 的生成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#invsubbytes"&gt;逆字节替代 invSubBytes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#shiftrows"&gt;行移位 ShiftRows&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#invshiftrows"&gt;逆行移位 invShiftRows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#mixcolumns"&gt;列混合 MixColumns&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#invmixcolumns"&gt;逆列混合 invMixColumns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#addroundkey"&gt;轮密钥加 AddRoundKey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keyexpansion"&gt;密钥扩展 KeyExpansion&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#key"&gt;key 的预处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rcon"&gt;轮常数 rcon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;其余函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="_1"&gt;数学基础&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://zh.wikipedia.org/wiki/有限域"&gt;有限域&lt;/a&gt;是指含有有限个元素的域，其中元素的个数被称为 &lt;em&gt;阶&lt;/em&gt;。那么，什么是&lt;a href="http://zh.wikipedia.org/wiki/域_(數學)"&gt;域&lt;/a&gt;呢？我也不知道，不过不打紧，我们只要能看懂下表的运算 (注意：运算结果模除了阶数 3) ，并且知道域具有下面这几条性质就行了：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;+&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;*&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;在加法和乘法上封闭，即对任意属于该域的 &lt;span class="math"&gt;a&lt;/span&gt;, &lt;span class="math"&gt;b&lt;/span&gt;，都有 &lt;span class="math"&gt;a+b&lt;/span&gt; 和 &lt;span class="math"&gt;a*b&lt;/span&gt; 也属于该域&lt;/li&gt;
&lt;li&gt;加法和乘法符合结合律和交换律&lt;/li&gt;
&lt;li&gt;符合乘法对加法的分配律，即对任意属于该域的 &lt;span class="math"&gt;a&lt;/span&gt;, &lt;span class="math"&gt;b&lt;/span&gt;, &lt;span class="math"&gt;c&lt;/span&gt;，恒有 &lt;span class="math"&gt;a*(b+c)=(a*b)+(a*c)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;有限域加法&lt;/h2&gt;
&lt;p&gt;有限域中两个元素的加法定义为其多项式表示的相应系数的“加法”。此处加法是异或运算(记为 &lt;span class="math"&gt;\oplus&lt;/span&gt;)，即模 2 加：&lt;span class="math"&gt;1\oplus1=0,\ 1\oplus0=1,\ 0\oplus0=0&lt;/span&gt;。我们也可以把多项式表示成二进制形式，例如：&lt;span class="math"&gt;x^8+x^4+x^3+x+1\Leftrightarrow100011011&lt;/span&gt;。有限域加法到底是什么意思呢？我们看一个例子就懂了：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{matrix}
 &amp;amp; (x^6+x^4+x^2+x+1)+(x^7+x+1)=x^7+x^6+x^4+x^2 &amp;amp; \\
\Longleftrightarrow &amp;amp; 01010111\oplus10000011=11010100 &amp;amp; 
\end{matrix}
&lt;/div&gt;
&lt;h2 id="_3"&gt;有限域乘法&lt;/h2&gt;
&lt;p&gt;有限域 &lt;span class="math"&gt;GF(2^8)&lt;/span&gt; 上的乘法 (记为 &lt;span class="math"&gt;\cdot&lt;/span&gt; ) 定义为多项式的乘积模除 (记为 &lt;code&gt;%&lt;/code&gt; ) 不可约多项式 (不能进行因式分解) ：&lt;span class="math"&gt;x^8+x^4+x^3+x+1&lt;/span&gt;。例如：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{aligned}
&amp;amp;\ \ \ \ (x^6+x^4+x^2+x+1)\cdot(x^7+x+1)\ \ \ \Longleftrightarrow \ \ \ (01010111\cdot 10000011)\%100011011\\
&amp;amp;=(x^{13}+x^{11}+x^9+x^8+x^7+x^7+x^5+x^3+x^2+x+x^6+x^4+x^2+x+1)\%(x^8+x^4+x^3+x+1) \\
&amp;amp;=(x^{13}+x^{11}+x^9+x^8+x^6+x^5+x^4+x^3+1)\%(x^8+x^4+x^3+x+1) \\
&amp;amp;=x^7+x^6+1 \ \ \ \Longleftrightarrow \ \ \ 11000001 \\
\end{aligned}
&lt;/div&gt;
&lt;p&gt;&lt;img alt="模除多项式" src="https://dn-loggerhead.qbox.me/images/模除多项式.png" /&gt;&lt;/p&gt;
&lt;h1 id="_4"&gt;算法说明&lt;/h1&gt;
&lt;p&gt;Rijndael 是带有可变块长和可变密钥长度的迭代块密码，它的输入和输出均为 128 bits 的数据分组 (blocks)，使用的密钥可以为 128，192 或 256 bits。由于块密码自身只能加密特定长度的单块数据，若要加密变长数据，则数据必须先被划分为一些单独的密码块。通常而言，最后一块数据需要使用合适填充方式将数据扩展到符合密码块大小的长度。一种工作模式描述了加密每一数据块的过程，常见的有 CBC、ECB、CTR、OCF、CFB 五种工作模式，我们下面的介绍都是指 CBC 模式。&lt;/p&gt;
&lt;p&gt;对于加密和解密变换，Rijndael 算法使用 4 个不同的以字节为基本单位的变换复合而成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用一个替代表 (S-Box) 对状态 state 进行字节替代；&lt;/li&gt;
&lt;li&gt;将状态矩阵 state 的每一行循环移位不同的位移量；&lt;/li&gt;
&lt;li&gt;将状态矩阵 state 中每一列的数据进行混合；&lt;/li&gt;
&lt;li&gt;将轮密钥加到状态 state 上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;预处理&lt;/h2&gt;
&lt;p&gt;假设我们要加密的字符串是 unicode 编码的 &lt;code&gt;hello,world=你好,世界&lt;/code&gt;，那么将它进行处理并填充后的数据块为：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Rijndael算法预处理" src="https://dn-loggerhead.qbox.me/images/Rijndael算法预处理.png" /&gt;&lt;/p&gt;
&lt;p&gt;原始输入有两个问题需要进行处理。首先，unicode 编码的字母 &lt;code&gt;a&lt;/code&gt; 和汉字 &lt;code&gt;啊&lt;/code&gt; 分别占用了 1 byte 和 2 bytes，也就是字符可能占用 1 到 2 个字节。问题在于，如果不能保证字符占用的字节个数，那么解密的时候就无法知道应当把某个字节当做一个字母处理，还是一个汉字的某个字节处理。所以，我们将所有只占用 1 byte 的字符高位填充 &lt;code&gt;0&lt;/code&gt;，使所有的字符均占用 2 bytes。其次，最后一个块只有 2 bytes (&lt;code&gt;{75 4C}&lt;/code&gt;)，但是算法的处理单位是数据块，也就是 &lt;span class="math"&gt;4*4&lt;/span&gt; bytes (即128 bits) 。于是我们采用 &lt;a href="https://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7"&gt;PKCS7 的填充算法&lt;/a&gt;填充 14 (&lt;code&gt;14 = 0x0E&lt;/code&gt;) 个 &lt;code&gt;{0E}&lt;/code&gt;，使最后一个块也占用 16 bytes。注意，如果最后一个块正好占用 16 bytes，那么新增一个块并填充 16 个 &lt;code&gt;{10}&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="_6"&gt;伪代码&lt;/h2&gt;
&lt;p&gt;AES 算法的加密解密伪代码如下所示：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;AddRoundKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Nr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;SubBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ShiftRows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;MixColumns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;AddRoundKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;SubBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ShiftRows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;AddRoundKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Nr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invCipher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;AddRoundKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Nr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Nr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;invShiftRows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;invSubBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;AddRoundKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;invMixColumns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;invShiftRows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;invSubBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;AddRoundKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;其中，分组大小 &lt;code&gt;Nb&lt;/code&gt;、密钥长度 &lt;code&gt;Nk&lt;/code&gt;、轮数 &lt;code&gt;Nr&lt;/code&gt;、扩展密钥 &lt;code&gt;w&lt;/code&gt;、状态矩阵 &lt;code&gt;state&lt;/code&gt; 的含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Nb=4&lt;/code&gt;，该值反应了状态 &lt;code&gt;state&lt;/code&gt; 中 32-bit 字的个数(列数)；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nk=4、6、8&lt;/code&gt;，反应了密钥 &lt;code&gt;key&lt;/code&gt; 中 32-bit 字的个数(列数) ；&lt;/li&gt;
&lt;li&gt;算法的轮数 &lt;code&gt;Nr&lt;/code&gt; 依赖于密钥长度；&lt;/li&gt;
&lt;li&gt;w 是经过密钥扩展后得到的 4-byte 字的一维数组，由 &lt;code&gt;KeyExpansion(key)&lt;/code&gt; 得到；&lt;/li&gt;
&lt;li&gt;加密算法的中间结果，表示为 &lt;span class="math"&gt;4*Nb&lt;/span&gt; byte 的矩阵数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前符合 AES 的一切 Nk-Nb-Nr 的组合如下表所示。虽然未来版本可能包括对这些参数允许取值的改变或增加，不过我们的代码实现以此表为准。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align="center"&gt;Nk&lt;/th&gt;
&lt;th align="center"&gt;Nb&lt;/th&gt;
&lt;th align="center"&gt;Nr&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AES-128&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AES-192&lt;/td&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AES-256&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id="_7"&gt;算法实现&lt;/h1&gt;
&lt;h2 id="subbytes"&gt;字节替代 SubBytes&lt;/h2&gt;
&lt;p&gt;字节替代变换是一个非线性的字节替代，它独立地将状态 &lt;code&gt;state&lt;/code&gt; 中的每个字节利用替代表 (S-Box) 进行运算。运算规则是：将字节的高 4 位作为 x，低 4 位作为 y 进行查表得到变换后的字节。比如：&lt;code&gt;{49}&lt;/code&gt; 由行标为 4，列标为 9 的单元决定，变换结果为 &lt;code&gt;{3B}&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="state_and_S-Box" src="https://dn-loggerhead.qbox.me/images/state_and_S-Box.png" /&gt;&lt;/p&gt;
&lt;h3 id="s-box"&gt;S-Box 的生成&lt;/h3&gt;
&lt;p&gt;任意字节 &lt;span class="math"&gt;A=\{xy\}&lt;/span&gt; 在 S-Box 中对应单元 &lt;span class="math"&gt;B^{'}&lt;/span&gt; 都由两个变换得到:&lt;/p&gt;
&lt;p&gt;(1) 在有限域 &lt;span class="math"&gt;GF(2^8)&lt;/span&gt; 上找到使 &lt;span class="math"&gt;A\cdot B=1&lt;/span&gt; 的 &lt;span class="math"&gt;B&lt;/span&gt;，其中 &lt;span class="math"&gt;A=\{00\}&lt;/span&gt; 时 &lt;span class="math"&gt;B=\{00\}&lt;/span&gt;。实现的伪代码如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invMult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x01&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="c1"&gt;# * 表示 有限域$GF(2^8)$上的乘法&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mh"&gt;0x01&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;(2) 应用定义在 &lt;span class="math"&gt;GF(2)&lt;/span&gt; 上的仿射变换:&lt;/p&gt;
&lt;div class="math"&gt;B^{'}_i=B_i \oplus B_{(i+4)\%8} \oplus B_{(i+5)\%8} \oplus B_{(i+6)\%8} \oplus B_{(i+7)\%8} \oplus C_i&lt;/div&gt;
&lt;p&gt;其中 &lt;span class="math"&gt;0 \leq i&amp;lt;8&lt;/span&gt;，&lt;span class="math"&gt;B_i&lt;/span&gt; 是字节 B 的第 i 比特，&lt;span class="math"&gt;C_i&lt;/span&gt; 是值为 &lt;span class="math"&gt;01100011&lt;/span&gt; 的字节 C 的第 i 比特，&lt;span class="math"&gt;\%&lt;/span&gt; 是普通的模除运算。S-Box 在 &lt;span class="math"&gt;GF(2)&lt;/span&gt; 上的仿射变换还可以表示为矩阵形式：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{bmatrix}
B^{'}_7\\
B^{'}_6\\
B^{'}_5\\
B^{'}_4\\
B^{'}_3\\
B^{'}_2\\
B^{'}_1\\
B^{'}_0
\end{bmatrix}
=
\begin{bmatrix}
1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\\
0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0\\
0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1\\
1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1\\
1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1\\
1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1\\
1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1
\end{bmatrix}
\cdot
\begin{bmatrix}
B_7\\
B_6\\
B_5\\
B_4\\
B_3\\
B_2\\
B_1\\
B_0
\end{bmatrix}
\oplus
\begin{bmatrix}
0\\
1\\
1\\
0\\
0\\
0\\
1\\
1
\end{bmatrix}
&lt;/div&gt;
&lt;p&gt;例如：&lt;span class="math"&gt;A=\{49\}&lt;/span&gt;，则 &lt;span class="math"&gt;B=invMult(A)=\{64\}=01100100_{(2)}&lt;/span&gt;，&lt;span class="math"&gt;B^{'}=00111011_{(2)}=\{3B\}&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id="invsubbytes"&gt;逆字节替代 invSubBytes&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;invSubBytes&lt;/code&gt; 与 &lt;code&gt;SubBytes&lt;/code&gt; 类似，伪代码如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invSubBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# 取高4位&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xF0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
        &lt;span class="c1"&gt;# 取低4位&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xF&lt;/span&gt;
        &lt;span class="n"&gt;replace_byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inv_S_Box&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;其中，&lt;code&gt;inv_S_Box&lt;/code&gt; 的每个单元都是通过逆向查询 S-Box 得到的，例如：对于字节 &lt;code&gt;{3B}&lt;/code&gt;，&lt;code&gt;inv_S_Box[3][B]=49&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="shiftrows"&gt;行移位 ShiftRows&lt;/h2&gt;
&lt;p&gt;将 &lt;code&gt;state&lt;/code&gt; 的每一行左循环移位 r 次 (r 为行号，且 &lt;span class="math"&gt;0 \leq r&amp;lt;3&lt;/span&gt;) ，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="行移位ShiftRows" src="https://dn-loggerhead.qbox.me/images/行移位ShiftRows.png" /&gt;&lt;/p&gt;
&lt;h3 id="invshiftrows"&gt;逆行移位 invShiftRows&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;invShiftRows&lt;/code&gt; 与 &lt;code&gt;ShiftRows&lt;/code&gt; 的唯一区别在于，左循环移位变成了右循环移位。&lt;/p&gt;
&lt;h2 id="mixcolumns"&gt;列混合 MixColumns&lt;/h2&gt;
&lt;p&gt;列混合 &lt;code&gt;MixColumns&lt;/code&gt; 在 &lt;code&gt;state&lt;/code&gt; 上按照每一列进行运算，并将每一列看作 &lt;span class="math"&gt;GF(2^8)&lt;/span&gt; 上的多项式且被一个固定的多项式 &lt;span class="math"&gt;\{03\}x^3+\{01\}x^2+\{01\}x+\{02\}&lt;/span&gt; 模 &lt;span class="math"&gt;x^4+1&lt;/span&gt; 乘，这可以表示成矩阵形式：&lt;/p&gt;
&lt;div class="math"&gt;\begin{bmatrix}
S^{'}_{0,c}\\
S^{'}_{1,c}\\
S^{'}_{2,c}\\
S^{'}_{3,c}
\end{bmatrix}
=
\begin{bmatrix}
02 &amp;amp; 03 &amp;amp; 01 &amp;amp; 01\\
01 &amp;amp; 02 &amp;amp; 03 &amp;amp; 01\\
01 &amp;amp; 01 &amp;amp; 02 &amp;amp; 03\\
03 &amp;amp; 01 &amp;amp; 01 &amp;amp; 02
\end{bmatrix}
\cdot 
\begin{bmatrix}
S_{0,c}\\
S_{1,c}\\
S_{2,c}\\
S_{3,c}
\end{bmatrix}&lt;/div&gt;
&lt;p&gt;注意，&lt;span class="math"&gt;S_{r,c}&lt;/span&gt; 表 state 第 r 行第 c 列处的字节。也等价于下面的运算：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{aligned}
S^{'}_{0,c}=(\{02\}\cdot S_{0,c}) \oplus (\{03\}\cdot S_{1,c}) \oplus S_{2,c} \oplus S_{3,c}\\
S^{'}_{1,c}=S_{0,c} \oplus (\{02\}\cdot S_{1,c}) \oplus (\{03\}\cdot S_{2,c}) \oplus S_{3,c}\\
S^{'}_{2,c}=S_{0,c} \oplus S_{1,c} \oplus (\{02\}\cdot S_{2,c}) \oplus (\{03\}\cdot S_{3,c})\\
S^{'}_{3,c}=(\{03\}\cdot S_{0,c}) \oplus S_{1,c} \oplus S_{2,c} \oplus (\{02\}\cdot S_{3,c})\\
\end{aligned}
&lt;/div&gt;
&lt;p&gt;&lt;img alt="列混合MixColumns" src="https://dn-loggerhead.qbox.me/images/列混合MixColumns.png" /&gt;&lt;/p&gt;
&lt;h3 id="invmixcolumns"&gt;逆列混合 invMixColumns&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;invMixColumns&lt;/code&gt; 与 &lt;code&gt;MixColumns&lt;/code&gt; 区别不大，只不过将相乘的多项式换成了 &lt;span class="math"&gt;\{0B\}x^3+\{0D\}x^2+\{09\}x+\{0E\}&lt;/span&gt;，也可表示为矩阵形式：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{bmatrix}
S^{'}_{0,c}\\
S^{'}_{1,c}\\
S^{'}_{2,c}\\
S^{'}_{3,c}
\end{bmatrix}
=
\begin{bmatrix}
0E &amp;amp; 0B &amp;amp; 0D &amp;amp; 09\\
09 &amp;amp; 0E &amp;amp; 0B &amp;amp; 0D\\
0D &amp;amp; 09 &amp;amp; 0E &amp;amp; 0B\\
0B &amp;amp; 0D &amp;amp; 09 &amp;amp; 0E
\end{bmatrix}
\cdot 
\begin{bmatrix}
S_{0,c}\\
S_{1,c}\\
S_{2,c}\\
S_{3,c}
\end{bmatrix}
&lt;/div&gt;
&lt;h2 id="addroundkey"&gt;轮密钥加 AddRoundKey&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;AddRoundKey&lt;/code&gt; 只是简单的将 &lt;code&gt;state&lt;/code&gt; 的每一列与一个轮密钥进行 &lt;em&gt;异或加&lt;/em&gt;，即：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{bmatrix}
S^{'}_{0,c}\\
S^{'}_{1,c}\\
S^{'}_{2,c}\\
S^{'}_{3,c}
\end{bmatrix}
=
\begin{bmatrix}
w_{l+c,0} &amp;amp;\\
w_{l+c,1} &amp;amp;\\
w_{l+c,2} &amp;amp;\\
w_{l+c,3} &amp;amp;
\end{bmatrix}
\oplus
\begin{bmatrix}
S_{0,c}\\
S_{1,c}\\
S_{2,c}\\
S_{3,c}
\end{bmatrix}
&lt;/div&gt;
&lt;p&gt;其中 &lt;span class="math"&gt;w=KeyExpansion(key)&lt;/span&gt;，&lt;span class="math"&gt;l=round*Nb&lt;/span&gt;，round 是当前轮数，且 &lt;span class="math"&gt;0 \leq round \leq Nr&lt;/span&gt;，&lt;span class="math"&gt;w_{l+c,n}&lt;/span&gt; 表示 &lt;code&gt;w&lt;/code&gt; 数组中下标为 &lt;code&gt;l+c&lt;/code&gt; 的字的第 n+1 个字节 (最高位位于第 1 个字节) 。&lt;/p&gt;
&lt;p&gt;&lt;img alt="轮密钥加变换" src="https://dn-loggerhead.qbox.me/images/轮密钥加变换.png" /&gt;&lt;/p&gt;
&lt;h2 id="keyexpansion"&gt;密钥扩展 KeyExpansion&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;KeyExpansion&lt;/code&gt; 调用后生成 &lt;span class="math"&gt;Nb*(Nr+1)&lt;/span&gt; 个字，即 &lt;span class="math"&gt;4*Nb*(Nr+1)&lt;/span&gt; bytes。我们先看一段伪代码加深一下理解：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;KeyExpansion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nb&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nr&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;# 注意：数组下标从0开始&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Nk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="c1"&gt;# key 为字节数组&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bytesToWord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Nk&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Nb&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nr&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;Nk&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# i/Nk 会向下取整&lt;/span&gt;
            &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rotword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;rcon&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Nk&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;Nk&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;Nk&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Nk&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="key"&gt;key 的预处理&lt;/h3&gt;
&lt;p&gt;为了接收任意的 key 输入，我们可以将 key 像下面这样进行处理，使得 key 的长度为 128，192 或 256：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;toBit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;toBit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;当然，这种做法并不高效，只不过抛砖引玉而已。&lt;/p&gt;
&lt;h3 id="rcon"&gt;轮常数 rcon&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;rcon&lt;/code&gt; 是一个字数组，生成的算法是 &lt;a href="http://en.wikipedia.org/wiki/Rijndael_key_schedule"&gt;Rijndael key schedule&lt;/a&gt;，AES 实现中可能用到的值如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;下标&lt;/th&gt;
&lt;th align="center"&gt;值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0x00000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0x01000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;0x02000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;0x04000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;0x08000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;0x10000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;6&lt;/td&gt;
&lt;td align="center"&gt;0x20000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;7&lt;/td&gt;
&lt;td align="center"&gt;0x40000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;0x80000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;9&lt;/td&gt;
&lt;td align="center"&gt;0x1B000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;10&lt;/td&gt;
&lt;td align="center"&gt;0x36000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;...&lt;/td&gt;
&lt;td align="center"&gt;......&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;rcon[0]&lt;/code&gt; 仅用于占位，实际中并未使用它。&lt;code&gt;rcon&lt;/code&gt; 由 &lt;span class="math"&gt;rcon[i][0]=rcon[i-1][0]\cdot 2&lt;/span&gt; 生成，&lt;code&gt;rcon[i][0]&lt;/code&gt; 表示 &lt;code&gt;rcon[i]&lt;/code&gt; 的最高字节，剩余三个字节均用 &lt;code&gt;0&lt;/code&gt; 填充。&lt;span class="math"&gt;\cdot&lt;/span&gt; 是前面介绍过的有限域 &lt;span class="math"&gt;GF(2^8)&lt;/span&gt; 内的模 &lt;span class="math"&gt;x^8+x^4+x^3+x+1&lt;/span&gt; 乘法。&lt;/p&gt;
&lt;h3 id="_8"&gt;其余函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;循环左移 &lt;code&gt;rotword&lt;/code&gt;，和行移位 &lt;code&gt;ShiftRows&lt;/code&gt; 中的循环左移一样，这里将字中的每个字节循环左移 1 次；&lt;/li&gt;
&lt;li&gt;字替换 &lt;code&gt;subword&lt;/code&gt;，使用 S-Box 替换字中的每个字节；&lt;/li&gt;
&lt;li&gt;异或 &lt;code&gt;xor&lt;/code&gt;，将两个字进行异或。&lt;/li&gt;
&lt;/ul&gt;</summary><category term="AES"></category><category term="Rijndael"></category><category term="加密算法"></category></entry><entry><title>Java 同时初始化两个类</title><link href="https://loggerhead.me/posts/java-tong-shi-chu-shi-hua-liang-ge-lei.html" rel="alternate"></link><published>2012-12-07T20:00:00+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2012-12-07:posts/java-tong-shi-chu-shi-hua-liang-ge-lei.html</id><summary type="html">&lt;p&gt;同时初始化两个类的意义在于当两个类之间关系密切，即方法经常与另一个类进行通信时，可以简化通信。&lt;/p&gt;


&lt;p&gt;我们直接看代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * 同时初始化只适用于单例模式，且不适用于饿汉式&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="c1"&gt;//初始化B&lt;/span&gt;
            &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="c1"&gt;//初始化C&lt;/span&gt;
            &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="c1"&gt;//初始化A&lt;/span&gt;
            &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//未初始化&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//同时初始化&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term="Java"></category></entry><entry><title>Java 内部类用法小结</title><link href="https://loggerhead.me/posts/java-nei-bu-lei-yong-fa-xiao-jie.html" rel="alternate"></link><published>2012-07-31T16:20:00+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2012-07-31:posts/java-nei-bu-lei-yong-fa-xiao-jie.html</id><summary type="html">&lt;h2 id="_1"&gt;定义&lt;/h2&gt;
&lt;p&gt;顾名思义，创建于外部类之内的类。可以定义于外部类的方法内。下面用I类表内部类，O类表外部类。（I：inner，O：outer）&lt;/p&gt;
&lt;h2 id="_2"&gt;用途&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;private修饰的内部类用来隐藏实现的细节&lt;/li&gt;
&lt;li&gt;匿名类使方法实现更简洁、优美（例：工厂方法，适配器方法）&lt;/li&gt;
&lt;li&gt;可用于有效的实现“多重继承”&lt;/li&gt;
&lt;/ol&gt;


&lt;h2 id="_3"&gt;特性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;可以使用O类所有成员（包括private）&lt;/li&gt;
&lt;li&gt;可以被static、private修饰（O类不可以）&lt;/li&gt;
&lt;li&gt;可以匿名，但必须进行继承&lt;/li&gt;
&lt;li&gt;可实例化，如果被static修饰：new O.I()；否则：new O().new I()  （O类引用.new I()）&lt;/li&gt;
&lt;li&gt;不可在O类的导出类中被覆盖 (这点不像O类方法)&lt;/li&gt;
&lt;li&gt;可被继承，但其指向O类的“秘密的”引用必须被初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_4"&gt;示例&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Outer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Inner&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;innerMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Inner&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Inner&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;outerMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;innerMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Outer&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;outerMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;InnerMethod print the string&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//工厂模式示例&lt;/span&gt;
&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ProductFactory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Product&lt;/span&gt; &lt;span class="nf"&gt;getProduct&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CandyFactory&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;ProductFactory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt; &lt;span class="nf"&gt;getProduct&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Candy&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JellyFactory&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;ProductFactory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt; &lt;span class="nf"&gt;getProduct&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Jelly&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;production&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ProductFactory&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Product&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProduct&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;production&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CandyFactory&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;production&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JellyFactory&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Interface1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;methodI1&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Interface2&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;methodI2&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;methodC1&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class2&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;methodC2&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RealInterface&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Interface1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Interface2&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;methodI1&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Implements Interface1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;methodI2&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Implements Interface2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RealClass1&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Class1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;methodC1&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Implements Class1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RealClass2&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Class2&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;methodC2&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Implements Class2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;RealInterface&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RealInterface&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;RealClass1&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RealClass1&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;RealClass2&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RealClass2&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;methodI1&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;methodI1&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;methodI2&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;methodI2&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;methodC1&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;methodC1&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;methodC2&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;methodC2&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Test1&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Test1&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;methodI1&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;methodI2&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;methodC1&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;methodC2&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;1.可以使用O类所有成员（包括private）&lt;/span&gt;
&lt;span class="cm"&gt;2.可以被static、private修饰（O类不可以）&lt;/span&gt;
&lt;span class="cm"&gt;3.可以匿名，但必须进行继承&lt;/span&gt;
&lt;span class="cm"&gt;4.可实例化，如果被static修饰：new O.I()；否则：new O().new I()  （O类引用.new I()）&lt;/span&gt;
&lt;span class="cm"&gt;5.不可在O类的导出类中被覆盖 (这点不像O类方法)&lt;/span&gt;
&lt;span class="cm"&gt;6.可被继承，但其指向O类的“秘密的”引用必须被初始化&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Anonymity&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Outer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Outer&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Outer()&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Inner1&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Outer string s&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Inner1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Inner1&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Inner1()&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Inner string s&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//特性1&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Outer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;s&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//特性2&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Inner2&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StaticInner&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;StaticInner&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;StaticInner()&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Anonymity&lt;/span&gt; &lt;span class="nf"&gt;getAnonumityClass&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//特性3&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Anonymity&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AnonymityClass()&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExtendsOuter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Outer&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//特性5&lt;/span&gt;
    &lt;span class="n"&gt;ExtendsOuter&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/*  ==    super();&lt;/span&gt;
&lt;span class="cm"&gt;    ==    System.out.println(&amp;quot;Outer()&amp;quot;);&lt;/span&gt;
&lt;span class="cm"&gt;     +      new Inner1();&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Inner1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Inner1&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ExtendsOuter.Inner1()&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//特性6特例&lt;/span&gt;
    &lt;span class="c1"&gt;//因为ExtendsOuter已经继承了Outer&lt;/span&gt;
    &lt;span class="c1"&gt;//从而指向外围类(Outer)的“秘密的”的引用已经通过继承关系(ExtendsOuter extends Outer)进行了初始化&lt;/span&gt;
    &lt;span class="c1"&gt;//所以不必再进行“特殊处理”&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExtendsInner1&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Outer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Inner1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ExtendsInner1&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ExtendsOuter.ExtendsInner1()&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//特性6&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExtendsInner2&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Outer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Inner1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ExtendsInner2&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Outer&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Test1.ExtendsOuter2()&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ExtendsInner2&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Outer&lt;/span&gt; &lt;span class="n"&gt;outer&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;outer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Test1.ExtendsOuter2(Outer outer)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Test1&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Test1&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//特性4&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Outer&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Inner1&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Outer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;StaticInner&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//特性5&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ExtendsOuter&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term="Java"></category></entry><entry><title>Java 类的初始化顺序</title><link href="https://loggerhead.me/posts/java-lei-de-chu-shi-hua-shun-xu.html" rel="alternate"></link><published>2012-06-14T19:45:00+08:00</published><author><name>loggerhead</name></author><id>tag:loggerhead.me,2012-06-14:posts/java-lei-de-chu-shi-hua-shun-xu.html</id><summary type="html">&lt;h2 id="_1"&gt;示例&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;由这个实例可看出同一个类中初始化的先后顺序是：&lt;/span&gt;
&lt;span class="cm"&gt;1.静态变量&amp;amp;&amp;amp;静态代码块（靠前的先初始化）&lt;/span&gt;
&lt;span class="cm"&gt;2.非静态变量&amp;amp;&amp;amp;非静态代码块（靠前的先初始化）&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InitializeDemo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;block 1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;static block 1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string b2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;block 2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string b1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;static block 2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;f()&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;        注释掉1、2行可以发现：&lt;/span&gt;
&lt;span class="cm"&gt;        静态代码块、静态变量初始化在该类被使用之前执行&lt;/span&gt;
&lt;span class="cm"&gt;        非静态代码块、非静态变量在创建对象时被执行&lt;/span&gt;
&lt;span class="cm"&gt;        */&lt;/span&gt;
        &lt;span class="n"&gt;InitializeDemo&lt;/span&gt; &lt;span class="n"&gt;ini&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;InitializeDemo&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;   &lt;span class="c1"&gt;//1&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ini&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;                   &lt;span class="c1"&gt;//2&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;



&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; *由此实例可知导出类及基类的初始化顺序是：&lt;/span&gt;
&lt;span class="cm"&gt; *1.基类的静态变量&amp;amp;&amp;amp;静态代码块&lt;/span&gt;
&lt;span class="cm"&gt; *2.导出类的静态变量&amp;amp;&amp;amp;静态代码块&lt;/span&gt;
&lt;span class="cm"&gt; *3.基类的非静态变量&amp;amp;&amp;amp;非静态代码块&lt;/span&gt;
&lt;span class="cm"&gt; *4.基类的构造方法&lt;/span&gt;
&lt;span class="cm"&gt; *5.导出类的非静态变量&amp;amp;&amp;amp;非静态代码块&lt;/span&gt;
&lt;span class="cm"&gt; *6.导出类的构造方法&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="c1"&gt;//可理解为extends IniA是对IniA的一次调用，于是IniA中的static执行&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InitializeDemo2&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;IniA&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;static block&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;InitializeDemo2&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;InitializeDemo2()&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;block&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;InitializeDemo2&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IniA&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IniA static block&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;IniA&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IniA()&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IniA block&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * 这个实例说明：&lt;/span&gt;
&lt;span class="cm"&gt; * 在其他任何事物发生之前，对象的存储空间初始化为二进制的零&lt;/span&gt;
&lt;span class="cm"&gt; * 构造器应尽可能在不调用方法的条件下使用简单的方法使对象进入正常状态（以免多态性造成灾难）&lt;/span&gt;
&lt;span class="cm"&gt; * 构造器可安全调用的方法是final方法（private方法属于final方法）&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.*;&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Ini1&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Ini1&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Ini1() before&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;draw2&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;draw3&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Ini1() after&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Ini1.draw()&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;draw2&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Ini1.draw2()&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;draw3&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Ini1.draw3()&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InitializeDemo3&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Ini1&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;InitializeDemo3.draw(&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;draw2&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;InitializeDemo3.draw2(&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;InitializeDemo3&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;draw2&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;InitializeDemo3() after&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Initialize!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="cm"&gt;/* 报错！不能覆盖基类final方法&lt;/span&gt;
&lt;span class="cm"&gt;    public void draw3(){&lt;/span&gt;
&lt;span class="cm"&gt;        out.println(&amp;quot;Ini1.draw3()&amp;quot;);&lt;/span&gt;
&lt;span class="cm"&gt;    }&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;InitializeDemo3&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id="_2"&gt;总结&lt;/h2&gt;
&lt;p&gt;初始化顺序是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存储空间初始化为二进制的零&lt;/li&gt;
&lt;li&gt;static先于非static&lt;/li&gt;
&lt;li&gt;基类先于导出类&lt;/li&gt;
&lt;li&gt;非static先于构造器&lt;/li&gt;
&lt;li&gt;导出类static先于基类非static&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;只要存在对类的调用（extends视为对其调用），该类的static就会执行。
只有创建该类的对象，非static才会执行。&lt;/p&gt;
&lt;p&gt;也可以抽象理解为优先级：static&amp;gt;继承关系&amp;gt;非static&amp;gt;构造器
同一优先级的，按先后顺序进行初始化&lt;/p&gt;</summary><category term="Java"></category></entry></feed>